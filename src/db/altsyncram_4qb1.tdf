--altsyncram ADDRESS_REG_B="CLOCK1" CLOCK_ENABLE_INPUT_B="BYPASS" CYCLONEII_M4K_COMPATIBILITY="ON" DEVICE_FAMILY="Cyclone IV E" ENABLE_ECC="FALSE" IMPLEMENT_IN_LES="ON" LOW_POWER_MODE="AUTO" OPERATION_MODE="DUAL_PORT" OUTDATA_ACLR_B="CLEAR1" OUTDATA_REG_B="CLOCK1" WIDTH_A=32 WIDTH_B=32 WIDTH_BYTEENA_A=1 WIDTH_ECCSTATUS=2 WIDTHAD_A=3 WIDTHAD_B=3 address_a address_b addressstall_b clock0 clock1 clocken1 data_a q_b wren_a ALTERA_INTERNAL_OPTIONS=suppress_da_rule_internal=d103
--VERSION_BEGIN 20.1 cbx_altera_syncram_nd_impl 2020:06:05:12:04:24:SJ cbx_altsyncram 2020:06:05:12:04:24:SJ cbx_cycloneii 2020:06:05:12:04:24:SJ cbx_lpm_add_sub 2020:06:05:12:04:24:SJ cbx_lpm_compare 2020:06:05:12:04:24:SJ cbx_lpm_decode 2020:06:05:12:04:24:SJ cbx_lpm_mux 2020:06:05:12:04:24:SJ cbx_mgl 2020:06:05:13:25:21:SJ cbx_nadder 2020:06:05:12:04:24:SJ cbx_stratix 2020:06:05:12:04:24:SJ cbx_stratixii 2020:06:05:12:04:24:SJ cbx_stratixiii 2020:06:05:12:04:24:SJ cbx_stratixv 2020:06:05:12:04:24:SJ cbx_util_mgl 2020:06:05:12:04:24:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION decode_i87 (data[2..0], enable)
RETURNS ( eq[7..0]);
FUNCTION mux_f48 (data[255..0], sel[2..0])
RETURNS ( result[31..0]);

--synthesis_resources = lut 168 reg 359 
OPTIONS ALTERA_INTERNAL_OPTION = "suppress_da_rule_internal=d103;SUPPRESS_DA_RULE_INTERNAL=C106";

SUBDESIGN altsyncram_4qb1
( 
	address_a[2..0]	:	input;
	address_b[2..0]	:	input;
	addressstall_b	:	input;
	clock0	:	input;
	clock1	:	input;
	clocken1	:	input;
	data_a[31..0]	:	input;
	q_b[31..0]	:	output;
	wren_a	:	input;
) 
VARIABLE 
	address_reg[2..0] : dffe;
	address_stall_emulator_b[2..0] : dffe;
	data_reg[31..0] : dffe;
	outdata_reg[31..0] : dffe;
	ram_block[255..0] : dffe;
	rd_data_out_latch[31..0] : dffe;
	wren_reg : dffe;
	address_decoder : decode_i87;
	output_mux : mux_f48;
	aclr1	: NODE;
	address_b_wire[2..0]	: WIRE;

BEGIN 
	address_reg[].clk = clock0;
	address_reg[].d = address_a[];
	address_stall_emulator_b[].clk = clock1;
	address_stall_emulator_b[].d = address_b[];
	address_stall_emulator_b[].ena = (! addressstall_b);
	data_reg[].clk = clock0;
	data_reg[].d = data_a[];
	outdata_reg[].clk = clock1;
	outdata_reg[].clrn = (! aclr1);
	outdata_reg[].d = rd_data_out_latch[].q;
	outdata_reg[].ena = clocken1;
	ram_block[].clk = (! clock0);
	ram_block[].d = ( data_reg[].q, data_reg[].q, data_reg[].q, data_reg[].q, data_reg[].q, data_reg[].q, data_reg[].q, data_reg[].q);
	ram_block[].ena = ( address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..7], address_decoder.eq[7..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..6], address_decoder.eq[6..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..5], address_decoder.eq[5..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..4], address_decoder.eq[4..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..3], address_decoder.eq[3..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..2], address_decoder.eq[2..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..1], address_decoder.eq[1..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0], address_decoder.eq[0..0]);
	rd_data_out_latch[].clk = clock1;
	rd_data_out_latch[].d = output_mux.result[];
	wren_reg.clk = clock0;
	wren_reg.d = wren_a;
	address_decoder.data[] = address_reg[].q;
	address_decoder.enable = wren_reg.q;
	output_mux.data[] = ram_block[].q;
	output_mux.sel[] = address_b_wire[];
	aclr1 = GND;
	address_b_wire[] = ((address_stall_emulator_b[].q & addressstall_b) # ((! addressstall_b) & address_b[]));
	q_b[] = outdata_reg[].q;
END;
--VALID FILE
