--a_fefifo LPM_NUMWORDS=64 lpm_widthad=6 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" USEDW_IN_DELAY=1 aclr clock empty rreq usedw_in
--VERSION_BEGIN 23.1 cbx_cycloneii 2024:05:14:17:57:38:SC cbx_fifo_common 2024:05:14:17:57:38:SC cbx_lpm_add_sub 2024:05:14:17:57:38:SC cbx_lpm_compare 2024:05:14:17:57:38:SC cbx_lpm_counter 2024:05:14:17:57:37:SC cbx_lpm_decode 2024:05:14:17:57:37:SC cbx_mgl 2024:05:14:17:57:46:SC cbx_nadder 2024:05:14:17:57:38:SC cbx_stratix 2024:05:14:17:57:38:SC cbx_stratixii 2024:05:14:17:57:38:SC  VERSION_END


-- Copyright (C) 2024  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 10 reg 4 
SUBDESIGN a_fefifo_8dc
( 
	aclr	:	input;
	clock	:	input;
	empty	:	output;
	rreq	:	input;
	usedw_in[5..0]	:	input;
) 
VARIABLE 
	b_full : dffe;
	b_non_empty : dffe;
	b_one : dffe;
	llreq : dffe;
	cmp_full_aeb_int	:	WIRE;
	cmp_full_agb_int	:	WIRE;
	cmp_full_ageb	:	WIRE;
	cmp_full_dataa[5..0]	:	WIRE;
	cmp_full_datab[5..0]	:	WIRE;
	equal_one[5..0]	: WIRE;
	equal_two[5..0]	: WIRE;
	equal_zero[5..0]	: WIRE;
	is_one0	: WIRE;
	is_one1	: WIRE;
	is_one2	: WIRE;
	is_one3	: WIRE;
	is_one4	: WIRE;
	is_one5	: WIRE;
	is_two0	: WIRE;
	is_two1	: WIRE;
	is_two2	: WIRE;
	is_two3	: WIRE;
	is_two4	: WIRE;
	is_two5	: WIRE;
	is_zero0	: WIRE;
	is_zero1	: WIRE;
	is_zero2	: WIRE;
	is_zero3	: WIRE;
	is_zero4	: WIRE;
	is_zero5	: WIRE;
	usedw[5..0]	: WIRE;

BEGIN 
	b_full.clk = clock;
	b_full.clrn = (! aclr);
	b_full.d = cmp_full_ageb;
	b_non_empty.clk = clock;
	b_non_empty.clrn = (! aclr);
	b_non_empty.d = (((b_non_empty.q & (b_non_empty.q $ (((is_one5 & (! llreq.q)) # (is_two5 & llreq.q)) & rreq))) # ((b_one.q & (! is_zero5)) & (! is_one5))) # (((! b_one.q) & (! b_non_empty.q)) & (! is_zero5)));
	b_one.clk = clock;
	b_one.clrn = (! aclr);
	b_one.d = ((! b_one.q) & (b_non_empty.q & (((is_one5 & (! llreq.q)) # (is_two5 & llreq.q)) & rreq)));
	llreq.clk = clock;
	llreq.clrn = (! aclr);
	llreq.d = (rreq & b_non_empty.q);
	IF (cmp_full_dataa[] == cmp_full_datab[]) THEN
		cmp_full_aeb_int = VCC;
	ELSE
		cmp_full_aeb_int = GND;
	END IF;
	IF (cmp_full_dataa[] > cmp_full_datab[]) THEN
		cmp_full_agb_int = VCC;
	ELSE
		cmp_full_agb_int = GND;
	END IF;
	cmp_full_ageb = cmp_full_agb_int # cmp_full_aeb_int;
	cmp_full_dataa[] = usedw[];
	cmp_full_datab[] = B"111101";
	empty = (! b_non_empty.q);
	equal_one[] = ( B"1", B"1", B"1", B"1", B"1", B"0");
	equal_two[] = ( B"1", B"1", B"1", B"1", B"0", B"1");
	equal_zero[] = ( B"1", B"1", B"1", B"1", B"1", B"1");
	is_one0 = (usedw[0..0] $ equal_one[0..0]);
	is_one1 = ((usedw[1..1] $ equal_one[1..1]) & is_one0);
	is_one2 = ((usedw[2..2] $ equal_one[2..2]) & is_one1);
	is_one3 = ((usedw[3..3] $ equal_one[3..3]) & is_one2);
	is_one4 = ((usedw[4..4] $ equal_one[4..4]) & is_one3);
	is_one5 = ((usedw[5..5] $ equal_one[5..5]) & is_one4);
	is_two0 = (usedw[0..0] $ equal_two[0..0]);
	is_two1 = ((usedw[1..1] $ equal_two[1..1]) & is_two0);
	is_two2 = ((usedw[2..2] $ equal_two[2..2]) & is_two1);
	is_two3 = ((usedw[3..3] $ equal_two[3..3]) & is_two2);
	is_two4 = ((usedw[4..4] $ equal_two[4..4]) & is_two3);
	is_two5 = ((usedw[5..5] $ equal_two[5..5]) & is_two4);
	is_zero0 = (usedw[0..0] $ equal_zero[0..0]);
	is_zero1 = ((usedw[1..1] $ equal_zero[1..1]) & is_zero0);
	is_zero2 = ((usedw[2..2] $ equal_zero[2..2]) & is_zero1);
	is_zero3 = ((usedw[3..3] $ equal_zero[3..3]) & is_zero2);
	is_zero4 = ((usedw[4..4] $ equal_zero[4..4]) & is_zero3);
	is_zero5 = ((usedw[5..5] $ equal_zero[5..5]) & is_zero4);
	usedw[] = usedw_in[];
END;
--VALID FILE
