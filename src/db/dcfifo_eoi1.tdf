--dcfifo_mixed_widths CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CLOCKS_ARE_SYNCHRONIZED="FALSE" DEVICE_FAMILY="Cyclone IV E" IGNORE_CARRY_BUFFERS="OFF" LPM_NUMWORDS=32 LPM_SHOWAHEAD="OFF" LPM_WIDTH=32 LPM_WIDTH_R=32 LPM_WIDTHU=5 LPM_WIDTHU_R=5 OVERFLOW_CHECKING="ON" RDSYNC_DELAYPIPE=4 UNDERFLOW_CHECKING="ON" USE_EAB="OFF" WRSYNC_DELAYPIPE=4 data q rdclk rdempty rdreq wrclk wrfull wrreq CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Cyclone IV E" LOW_POWER_MODE="AUTO" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
--VERSION_BEGIN 23.1 cbx_a_gray2bin 2024:05:14:17:57:37:SC cbx_a_graycounter 2024:05:14:17:57:37:SC cbx_altdpram 2024:05:14:17:57:37:SC cbx_altera_counter 2024:05:14:17:57:38:SC cbx_altera_gray_counter 2024:05:14:17:57:38:SC cbx_altera_syncram 2024:05:14:17:57:38:SC cbx_altera_syncram_nd_impl 2024:05:14:17:57:38:SC cbx_altsyncram 2024:05:14:17:57:38:SC cbx_cycloneii 2024:05:14:17:57:38:SC cbx_dcfifo 2024:05:14:17:57:38:SC cbx_fifo_common 2024:05:14:17:57:38:SC cbx_lpm_add_sub 2024:05:14:17:57:38:SC cbx_lpm_compare 2024:05:14:17:57:38:SC cbx_lpm_counter 2024:05:14:17:57:37:SC cbx_lpm_decode 2024:05:14:17:57:37:SC cbx_lpm_mux 2024:05:14:17:57:37:SC cbx_mgl 2024:05:14:17:57:46:SC cbx_nadder 2024:05:14:17:57:38:SC cbx_scfifo 2024:05:14:17:57:38:SC cbx_stratix 2024:05:14:17:57:38:SC cbx_stratixii 2024:05:14:17:57:38:SC cbx_stratixiii 2024:05:14:17:57:38:SC cbx_stratixv 2024:05:14:17:57:38:SC cbx_util_mgl 2024:05:14:17:57:38:SC  VERSION_END


-- Copyright (C) 2024  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION a_fefifo_2dc (aclr, clock, rreq, usedw_in[4..0])
RETURNS ( empty);
FUNCTION a_fefifo_b9c (aclr, clock, usedw_in[4..0], wreq)
RETURNS ( full);
FUNCTION a_gray2bin_qgb (gray[4..0])
RETURNS ( bin[4..0]);
FUNCTION a_graycounter_p57 (aclr, clock, cnt_en)
RETURNS ( q[4..0]);
FUNCTION a_graycounter_uc6 (aclr, clock, cnt_en)
RETURNS ( q[4..0]);
FUNCTION altdpram (aclr, byteena[WIDTH_BYTEENA-1..0], data[WIDTH-1..0], inclock, inclocken, outclock, outclocken, rdaddress[WIDTHAD-1..0], rdaddressstall, rden, sclr, wraddress[WIDTHAD-1..0], wraddressstall, wren)
WITH ( ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_PAUSED_READ_CAPABILITIES, ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_POWER_UP_CONDITIONS, ACF_DISABLE_MLAB_RAM_USE, ACF_IMPLEMENT_MLAB_IN_16_BIT_DEEP_MODE, BYTE_SIZE, INDATA_ACLR, INDATA_REG, LPM_FILE, lpm_hint, MAXIMUM_DEPTH, NUMWORDS, OUTDATA_ACLR, OUTDATA_REG, OUTDATA_SCLR, RAM_BLOCK_TYPE, RDADDRESS_ACLR, RDADDRESS_REG, RDCONTROL_ACLR, RDCONTROL_REG, READ_DURING_WRITE_MODE_MIXED_PORTS, USE_EAB, WIDTH, WIDTH_BYTEENA = 1, WIDTHAD, WRADDRESS_ACLR, WRADDRESS_REG, WRCONTROL_ACLR, WRCONTROL_REG)
RETURNS ( q[WIDTH-1..0]);
FUNCTION dffpipe_cd9 (clock, clrn, d[4..0])
RETURNS ( q[4..0]);
FUNCTION alt_synch_pipe_lc8 (clock, clrn, d[4..0])
RETURNS ( q[4..0]);
FUNCTION cntr_c9b (aclr, clock, cnt_en)
RETURNS ( q[4..0]);

--synthesis_resources = altdpram 1 lut 38 reg 113 
OPTIONS ALTERA_INTERNAL_OPTION = "AUTO_SHIFT_REGISTER_RECOGNITION=OFF;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;{-to rdptrrg} PRESERVE_REGISTER=ON;-name CUT ON -from *fiforam|cells* -to *fiforam|xq*;-name SDC_STATEMENT ""set_false_path -from **fiforam|cells** -to **fiforam|xq** "";-name CUT ON -from write_delay_cycle -to dffpipe_rs_dgwp|dffpipe_fd9:dffpipe12|dffe13a;-name SDC_STATEMENT ""set_false_path -from *write_delay_cycle* -to *dffpipe_rs_dgwp|dffpipe_fd9:dffpipe12|dffe13a* """;

SUBDESIGN dcfifo_eoi1
( 
	data[31..0]	:	input;
	q[31..0]	:	output;
	rdclk	:	input;
	rdempty	:	output;
	rdreq	:	input;
	rdusedw[4..0]	:	output;
	wrclk	:	input;
	wrfull	:	output;
	wrreq	:	input;
	wrusedw[4..0]	:	output;
) 
VARIABLE 
	read_state : a_fefifo_2dc;
	write_state : a_fefifo_b9c;
	gray2bin_rs_nbwp : a_gray2bin_qgb;
	gray2bin_ws_nbrp : a_gray2bin_qgb;
	rdptr_g : a_graycounter_p57;
	wrptr_g : a_graycounter_uc6;
	fiforam : altdpram
		WITH (
			OUTDATA_REG = "OUTCLOCK",
			RDCONTROL_ACLR = "OFF",
			RDCONTROL_REG = "UNREGISTERED",
			USE_EAB = "OFF",
			WIDTH = 32,
			WIDTHAD = 5
		);
	rdptrrg[4..0] : dffe;
	write_delay_cycle[4..0] : dffe;
	dffpipe_rdbuw : dffpipe_cd9;
	dffpipe_rdusedw : dffpipe_cd9;
	dffpipe_rs_dbwp : dffpipe_cd9;
	dffpipe_rs_dgwp : alt_synch_pipe_lc8;
	dffpipe_wr_dbuw : dffpipe_cd9;
	dffpipe_wrusedw : dffpipe_cd9;
	dffpipe_ws_dgrp : alt_synch_pipe_lc8;
	dffpipe_ws_nbrp : dffpipe_cd9;
	lpm_add_sub_rd_udwn_dataa[4..0]	:	WIRE;
	lpm_add_sub_rd_udwn_datab[4..0]	:	WIRE;
	lpm_add_sub_rd_udwn_result[4..0]	:	WIRE;
	lpm_add_sub_wr_udwn_dataa[4..0]	:	WIRE;
	lpm_add_sub_wr_udwn_datab[4..0]	:	WIRE;
	lpm_add_sub_wr_udwn_result[4..0]	:	WIRE;
	rdptr_b : cntr_c9b;
	wrptr_b : cntr_c9b;
	aclr	: NODE;
	rd_dbuw[4..0]	: WIRE;
	rd_udwn[4..0]	: WIRE;
	rs_dbwp[4..0]	: WIRE;
	rs_dgwp[4..0]	: WIRE;
	rs_nbwp[4..0]	: WIRE;
	tmp_aclr_r	: WIRE;
	tmp_aclr_w	: WIRE;
	tmp_data[4..0]	: WIRE;
	valid_rreq	: WIRE;
	valid_wreq	: WIRE;
	wr_dbuw[4..0]	: WIRE;
	wr_udwn[4..0]	: WIRE;
	ws_dbrp[4..0]	: WIRE;
	ws_dgrp[4..0]	: WIRE;
	ws_nbrp[4..0]	: WIRE;

BEGIN 
	read_state.aclr = aclr;
	read_state.clock = rdclk;
	read_state.rreq = rdreq;
	read_state.usedw_in[] = rd_dbuw[];
	write_state.aclr = aclr;
	write_state.clock = wrclk;
	write_state.usedw_in[] = wr_dbuw[];
	write_state.wreq = wrreq;
	gray2bin_rs_nbwp.gray[] = rs_dgwp[];
	gray2bin_ws_nbrp.gray[] = ws_dgrp[];
	rdptr_g.aclr = aclr;
	rdptr_g.clock = rdclk;
	rdptr_g.cnt_en = valid_rreq;
	wrptr_g.aclr = aclr;
	wrptr_g.clock = wrclk;
	wrptr_g.cnt_en = valid_wreq;
	fiforam.data[] = data[];
	fiforam.inclock = wrclk;
	fiforam.outclock = rdclk;
	fiforam.outclocken = valid_rreq;
	fiforam.rdaddress[] = rdptr_g.q[];
	fiforam.wraddress[] = wrptr_g.q[];
	fiforam.wren = valid_wreq;
	rdptrrg[].clk = rdclk;
	rdptrrg[].clrn = (! aclr);
	rdptrrg[].d = rdptr_g.q[];
	rdptrrg[].ena = valid_rreq;
	write_delay_cycle[].clk = wrclk;
	write_delay_cycle[].clrn = (! aclr);
	write_delay_cycle[].d = wrptr_g.q[];
	dffpipe_rdbuw.clock = rdclk;
	dffpipe_rdbuw.clrn = tmp_aclr_r;
	dffpipe_rdbuw.d[] = rd_udwn[];
	dffpipe_rdusedw.clock = rdclk;
	dffpipe_rdusedw.clrn = tmp_aclr_r;
	dffpipe_rdusedw.d[] = rd_udwn[];
	dffpipe_rs_dbwp.clock = rdclk;
	dffpipe_rs_dbwp.clrn = tmp_aclr_r;
	dffpipe_rs_dbwp.d[] = rs_nbwp[];
	dffpipe_rs_dgwp.clock = rdclk;
	dffpipe_rs_dgwp.clrn = tmp_aclr_r;
	dffpipe_rs_dgwp.d[] = write_delay_cycle[].q;
	dffpipe_wr_dbuw.clock = wrclk;
	dffpipe_wr_dbuw.clrn = tmp_aclr_w;
	dffpipe_wr_dbuw.d[] = wr_udwn[];
	dffpipe_wrusedw.clock = wrclk;
	dffpipe_wrusedw.clrn = tmp_aclr_w;
	dffpipe_wrusedw.d[] = wr_udwn[];
	dffpipe_ws_dgrp.clock = wrclk;
	dffpipe_ws_dgrp.clrn = tmp_aclr_w;
	dffpipe_ws_dgrp.d[] = tmp_data[];
	dffpipe_ws_nbrp.clock = wrclk;
	dffpipe_ws_nbrp.clrn = tmp_aclr_w;
	dffpipe_ws_nbrp.d[] = ws_nbrp[];
	lpm_add_sub_rd_udwn_result[] = lpm_add_sub_rd_udwn_dataa[] - lpm_add_sub_rd_udwn_datab[];
	lpm_add_sub_rd_udwn_dataa[] = rs_dbwp[];
	lpm_add_sub_rd_udwn_datab[] = rdptr_b.q[];
	lpm_add_sub_wr_udwn_result[] = lpm_add_sub_wr_udwn_dataa[] - lpm_add_sub_wr_udwn_datab[];
	lpm_add_sub_wr_udwn_dataa[] = wrptr_b.q[];
	lpm_add_sub_wr_udwn_datab[] = ws_dbrp[];
	rdptr_b.aclr = aclr;
	rdptr_b.clock = rdclk;
	rdptr_b.cnt_en = valid_rreq;
	wrptr_b.aclr = aclr;
	wrptr_b.clock = wrclk;
	wrptr_b.cnt_en = valid_wreq;
	aclr = GND;
	q[] = fiforam.q[];
	rd_dbuw[] = dffpipe_rdbuw.q[];
	rd_udwn[] = lpm_add_sub_rd_udwn_result[];
	rdempty = read_state.empty;
	rdusedw[] = dffpipe_rdusedw.q[];
	rs_dbwp[] = dffpipe_rs_dbwp.q[];
	rs_dgwp[] = dffpipe_rs_dgwp.q[];
	rs_nbwp[] = gray2bin_rs_nbwp.bin[];
	tmp_aclr_r = (! aclr);
	tmp_aclr_w = (! aclr);
	tmp_data[] = rdptrrg[].q;
	valid_rreq = (rdreq & (! read_state.empty));
	valid_wreq = (wrreq & (! write_state.full));
	wr_dbuw[] = dffpipe_wr_dbuw.q[];
	wr_udwn[] = lpm_add_sub_wr_udwn_result[];
	wrfull = write_state.full;
	wrusedw[] = dffpipe_wrusedw.q[];
	ws_dbrp[] = dffpipe_ws_nbrp.q[];
	ws_dgrp[] = dffpipe_ws_dgrp.q[];
	ws_nbrp[] = gray2bin_ws_nbrp.bin[];
END;
--VALID FILE
