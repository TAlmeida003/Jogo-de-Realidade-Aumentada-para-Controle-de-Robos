
proj_nios.elf:     file format elf32-littlenios2
proj_nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000194 memsz 0x000001a4 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  000011b4  2**0
                  CONTENTS
  2 .text         00000194  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  000011b4  000011b4  000011b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000000  000011b4  000011b4  000011b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000010  000011b4  000011b4  000011b4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000011c4  000011c4  000011b4  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000148  00000000  00000000  000011e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0000089f  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000005a7  00000000  00000000  00001bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000004d7  00000000  00000000  00002176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000174  00000000  00000000  00002650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000003aa  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  00002b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000020  00000000  00000000  00002b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000049  00000000  00000000  00002ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 000003ec  00000000  00000000  00002be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 000000ea  00000000  00000000  00002fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00003e7a  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00003e7d  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00003e89  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00003e8a  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00003e8b  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00003e96  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00003ea1  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000006  00000000  00000000  00003eac  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000059  00000000  00000000  00003eb2  2**0
                  CONTENTS, READONLY
 28 .jdi          00004d21  00000000  00000000  00003f0b  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00030b88  00000000  00000000  00008c2c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
000011b4 l    d  .rodata	00000000 .rodata
000011b4 l    d  .rwdata	00000000 .rwdata
000011b4 l    d  .bss	00000000 .bss
000011c4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 KEY.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
0000112c g     F .text	0000002c alt_main
000011b4 g       *ABS*	00000000 __flash_rwdata_start
00001184 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
000011b8 g     O .bss	00000004 alt_argv
000091b4 g       *ABS*	00000000 _gp
0000118c g     F .text	00000028 memcpy
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00001064 g     F .text	00000010 open_KEY
000011c4 g       *ABS*	00000000 __bss_end
0000117c g     F .text	00000004 alt_dcache_flush_all
000011b4 g       *ABS*	00000000 __ram_rwdata_end
000011b4 g       *ABS*	00000000 __ram_rodata_end
000011c0 g     O .bss	00000004 jtag_uart_0
000011c4 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
0000109c g     F .text	0000000c close_KEY
00001020 g     F .text	0000003c _start
00001178 g     F .text	00000004 alt_sys_init
000011b4 g       *ABS*	00000000 __ram_rwdata_start
000011b4 g       *ABS*	00000000 __ram_rodata_start
00001074 g     F .text	00000028 read_KEY
000011c4 g       *ABS*	00000000 __alt_stack_base
000011b4 g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000008 main
000011b4 g     O .bss	00000004 alt_envp
000011b4 g       *ABS*	00000000 __flash_rodata_start
00001158 g     F .text	00000020 alt_irq_init
000011bc g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
000011b4 g       *ABS*	00000000 _edata
000011c4 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
00001180 g     F .text	00000004 alt_icache_flush_all
000010a8 g     F .text	00000084 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a46d14 	ori	gp,gp,37300
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10846d14 	ori	r2,r2,4532

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c47114 	ori	r3,r3,4548

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00010a80 	call	10a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	000112c0 	call	112c <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <alt_after_alt_main>

0000105c <main>:
    }
*/
//    close_KEY();

    return 0;
}
    105c:	0005883a 	mov	r2,zero
    1060:	f800283a 	ret

00001064 <open_KEY>:
#define REG_CONTROLE_OFFSET 1


int open_KEY(){
    volatile int *p_led = (int *) MEMORIA_BASE_KEY;
    *(p_led + REG_CONTROLE_OFFSET) = 2047;
    1064:	0081ffc4 	movi	r2,2047
    1068:	008c0515 	stw	r2,12308(zero)
    return 1;
}
    106c:	00800044 	movi	r2,1
    1070:	f800283a 	ret

00001074 <read_KEY>:


int read_KEY (int* kay_data){
    volatile int *p_led = (int *) MEMORIA_BASE_KEY;
    
    if (*(p_led + REG_DATA_OFFSET) != 0){
    1074:	008c0417 	ldw	r2,12304(zero)
    1078:	10000626 	beq	r2,zero,1094 <read_KEY+0x20>
    	*kay_data = *(p_led + REG_DATA_OFFSET);
    107c:	008c0417 	ldw	r2,12304(zero)
    1080:	20800015 	stw	r2,0(r4)
        *(p_led + REG_DATA_OFFSET) = 26;
    1084:	00800684 	movi	r2,26
    1088:	008c0415 	stw	r2,12304(zero)
        return 1;
    108c:	00800044 	movi	r2,1
    1090:	f800283a 	ret
    }
    *kay_data = 0;
    1094:	20000015 	stw	zero,0(r4)
    return 0;
}
    1098:	f800283a 	ret

0000109c <close_KEY>:

int close_KEY(){
    volatile int *p_led = (int *) MEMORIA_BASE_KEY;
    *(p_led + REG_CONTROLE_OFFSET) = 0;
    109c:	000c0515 	stw	zero,12308(zero)
    return 1;
}
    10a0:	00800044 	movi	r2,1
    10a4:	f800283a 	ret

000010a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    10a8:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    10ac:	01000034 	movhi	r4,0
    10b0:	01400034 	movhi	r5,0
    10b4:	dfc00015 	stw	ra,0(sp)
    10b8:	21046d04 	addi	r4,r4,4532
    10bc:	29446d04 	addi	r5,r5,4532
    10c0:	21400426 	beq	r4,r5,10d4 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    10c4:	01800034 	movhi	r6,0
    10c8:	31846d04 	addi	r6,r6,4532
    10cc:	310dc83a 	sub	r6,r6,r4
    10d0:	000118c0 	call	118c <memcpy>
  if (to != from)
    10d4:	01000034 	movhi	r4,0
    10d8:	01400034 	movhi	r5,0
    10dc:	21040804 	addi	r4,r4,4128
    10e0:	29440804 	addi	r5,r5,4128
    10e4:	21400426 	beq	r4,r5,10f8 <alt_load+0x50>
      *to++ = *from++;
    10e8:	01800034 	movhi	r6,0
    10ec:	31840804 	addi	r6,r6,4128
    10f0:	310dc83a 	sub	r6,r6,r4
    10f4:	000118c0 	call	118c <memcpy>
  if (to != from)
    10f8:	01000034 	movhi	r4,0
    10fc:	01400034 	movhi	r5,0
    1100:	21046d04 	addi	r4,r4,4532
    1104:	29446d04 	addi	r5,r5,4532
    1108:	21400426 	beq	r4,r5,111c <alt_load+0x74>
      *to++ = *from++;
    110c:	01800034 	movhi	r6,0
    1110:	31846d04 	addi	r6,r6,4532
    1114:	310dc83a 	sub	r6,r6,r4
    1118:	000118c0 	call	118c <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    111c:	000117c0 	call	117c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1120:	dfc00017 	ldw	ra,0(sp)
    1124:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    1128:	00011801 	jmpi	1180 <alt_icache_flush_all>

0000112c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    112c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1130:	0009883a 	mov	r4,zero
{
    1134:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    1138:	00011580 	call	1158 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    113c:	00011780 	call	1178 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1140:	d1a00017 	ldw	r6,-32768(gp)
    1144:	d1600117 	ldw	r5,-32764(gp)
    1148:	d1200217 	ldw	r4,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    114c:	dfc00017 	ldw	ra,0(sp)
    1150:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    1154:	000105c1 	jmpi	105c <main>

00001158 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1158:	deffff04 	addi	sp,sp,-4
    115c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    1160:	00011840 	call	1184 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1164:	00800044 	movi	r2,1
    1168:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    116c:	dfc00017 	ldw	ra,0(sp)
    1170:	dec00104 	addi	sp,sp,4
    1174:	f800283a 	ret

00001178 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    1178:	f800283a 	ret

0000117c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    117c:	f800283a 	ret

00001180 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    1180:	f800283a 	ret

00001184 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1184:	000170fa 	wrctl	ienable,zero
}
    1188:	f800283a 	ret

0000118c <memcpy>:
    118c:	2005883a 	mov	r2,r4
    1190:	0007883a 	mov	r3,zero
    1194:	30c0011e 	bne	r6,r3,119c <memcpy+0x10>
    1198:	f800283a 	ret
    119c:	28cf883a 	add	r7,r5,r3
    11a0:	39c00003 	ldbu	r7,0(r7)
    11a4:	10c9883a 	add	r4,r2,r3
    11a8:	18c00044 	addi	r3,r3,1
    11ac:	21c00005 	stb	r7,0(r4)
    11b0:	003ff806 	br	1194 <memcpy+0x8>
