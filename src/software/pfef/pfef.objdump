
pfef.elf:     file format elf32-littlenios2
pfef.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008180

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000cc4 memsz 0x00000cc4 flags r-x
    LOAD off    0x00001ce4 vaddr 0x00008ce4 paddr 0x00008cf0 align 2**12
         filesz 0x0000000c memsz 0x0000000c flags rw-
    LOAD off    0x00000cfc vaddr 0x00008cfc paddr 0x00008cfc align 2**12
         filesz 0x00000000 memsz 0x000001f8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000a88  00008180  00008180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000dc  00008c08  00008c08  00001c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000000c  00008ce4  00008cf0  00001ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001f8  00008cfc  00008cfc  00001cfc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00008ef4  00008ef4  00001cf0  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00001cf0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002f0  00000000  00000000  00001d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00002612  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000012e8  00000000  00000000  00004622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000012dd  00000000  00000000  0000590a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  0000044c  00000000  00000000  00006be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00000b6d  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  00007ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00007bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00000b30  00000000  00000000  00007c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000014c  00000000  00000000  00008758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000072c  00000000  00000000  000088a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  0000a482  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0000a485  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0000a491  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0000a492  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0000a493  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0000a497  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0000a49b  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  0000a49f  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000b  00000000  00000000  0000a4aa  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000b  00000000  00000000  0000a4b5  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000b  00000000  00000000  0000a4c0  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 00000039  00000000  00000000  0000a4cb  2**0
                  CONTENTS, READONLY
 31 .jdi          00005498  00000000  00000000  0000a504  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     00084400  00000000  00000000  0000f99c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008180 l    d  .text	00000000 .text
00008c08 l    d  .rodata	00000000 .rodata
00008ce4 l    d  .rwdata	00000000 .rwdata
00008cfc l    d  .bss	00000000 .bss
00008ef4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
000081b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000081bc l     F .text	000000c4 interrupt
00000000 l    df *ABS*	00000000 joystick_io.c
00008604 l     F .text	00000010 interrupt
00008d14 l     O .bss	00000004 callback_button
00008614 l     F .text	00000014 pulse_we
00008628 l     F .text	00000058 config_pin_state
00008680 l     F .text	00000058 read_pin
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008d28 g     O .bss	00000004 alt_instruction_exception_handler
00008b1c g     F .text	0000002c alt_main
00008df4 g     O .bss	00000100 alt_irq
00008cf0 g       *ABS*	00000000 __flash_rwdata_start
00008b48 g     F .text	00000038 alt_putstr
00008d0c g     O .bss	00000004 txIndex
00008c00 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008800 g     F .text	00000064 peripheral_enable_callback
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008d20 g     O .bss	00000004 alt_argv
00010ce4 g       *ABS*	00000000 _gp
000088c8 g     F .text	00000028 memcpy
00008bdc g     F .text	00000024 alt_exception_cause_generated_bad_addr
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008cfc g     O .bss	00000004 JoyState
00008ef4 g       *ABS*	00000000 __bss_end
00008a30 g     F .text	00000068 alt_iic_isr_register
00008280 g     F .text	00000048 joiIrq
000083f0 g     F .text	0000001c executeCommand
00008a18 g     F .text	00000018 alt_ic_irq_enabled
00008d18 g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	00000060 alt_irq_handler
00008bd4 g     F .text	00000004 alt_dcache_flush_all
00008cf0 g       *ABS*	00000000 __ram_rwdata_end
00008ce4 g       *ABS*	00000000 __ram_rodata_end
00008cec g     O .rwdata	00000004 jtag_uart_0
00008864 g     F .text	0000005c peripheral_disable_callback
00008ef4 g       *ABS*	00000000 end
0000815c g     F .exceptions	00000024 alt_instruction_exception_entry
0000f530 g       *ABS*	00000000 __alt_stack_pointer
00008ba4 g     F .text	00000030 altera_avalon_jtag_uart_write
0000875c g     F .text	00000084 initialize_joystick
00008d10 g     O .bss	00000004 txlength
00008180 g     F .text	0000003c _start
00008954 g     F .text	00000050 strstr
00008ba0 g     F .text	00000004 alt_sys_init
00008ce4 g       *ABS*	00000000 __ram_rwdata_start
00008c08 g       *ABS*	00000000 __ram_rodata_start
0000890c g     F .text	00000048 strncpy
000087e0 g     F .text	00000020 close_joystick
000086d8 g     F .text	00000040 read_KEY
00008ce4 g     O .rwdata	00000004 uart_ptr
00008ef4 g       *ABS*	00000000 __alt_stack_base
00008d04 g     O .bss	00000004 send_command
00008cfc g       *ABS*	00000000 __bss_start
0000840c g     F .text	000001f8 main
00008d1c g     O .bss	00000004 alt_envp
00008d2c g     O .bss	00000064 rxBuffer
000082c8 g     F .text	00000128 sendReceive
00008d90 g     O .bss	00000064 txBuffer
00008c08 g       *ABS*	00000000 __flash_rodata_start
00008b80 g     F .text	00000020 alt_irq_init
00008d24 g     O .bss	00000004 alt_argc
00008d00 g     O .bss	00000004 receive_byte
00008020 g       .exceptions	00000000 alt_irq_entry
000088c0 g     F .text	00000008 set_callback
00008020 g       *ABS*	00000000 __ram_exceptions_start
000089a4 g     F .text	00000004 alt_ic_isr_register
00008cf0 g       *ABS*	00000000 _edata
00008ef4 g       *ABS*	00000000 _end
00008180 g       *ABS*	00000000 __ram_exceptions_end
000089e0 g     F .text	00000038 alt_ic_irq_disable
00008718 g     F .text	00000044 read_JOYSTICK
0000f530 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000800c g       .entry	00000000 _exit
000088f0 g     F .text	0000001c strlen
00008bd8 g     F .text	00000004 alt_icache_flush_all
00008ce8 g     O .rwdata	00000004 alt_priority_mask
00008d08 g     O .bss	00000004 rxIndex
000089a8 g     F .text	00000038 alt_ic_irq_enable
00008a98 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08606014 	ori	at,at,33152
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
    8094:	e93fff04 	addi	r4,ea,-4
    8098:	000815c0 	call	815c <alt_instruction_exception_entry>
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>
    80a0:	ebffff04 	addi	r15,ea,-4
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defffe04 	addi	sp,sp,-8
    8100:	dfc00115 	stw	ra,4(sp)
    8104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    810c:	04000074 	movhi	r16,1
    8110:	84237d04 	addi	r16,r16,-29196
    i = 0;
    8114:	0005883a 	mov	r2,zero
    mask = 1;
    8118:	00c00044 	movi	r3,1
      if (active & mask)
    811c:	20ca703a 	and	r5,r4,r3
    8120:	28000b26 	beq	r5,zero,8150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
    8124:	100490fa 	slli	r2,r2,3
    8128:	8085883a 	add	r2,r16,r2
    812c:	10c00017 	ldw	r3,0(r2)
    8130:	11000117 	ldw	r4,4(r2)
    8134:	183ee83a 	callr	r3
    8138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    813c:	203ff51e 	bne	r4,zero,8114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    8140:	dfc00117 	ldw	ra,4(sp)
    8144:	dc000017 	ldw	r16,0(sp)
    8148:	dec00204 	addi	sp,sp,8
    814c:	f800283a 	ret
      mask <<= 1;
    8150:	1806907a 	slli	r3,r3,1
      i++;
    8154:	10800044 	addi	r2,r2,1
      if (active & mask)
    8158:	003ff006 	br	811c <alt_irq_handler+0x20>

0000815c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    815c:	d0a01117 	ldw	r2,-32700(gp)
{
    8160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
    8164:	10000326 	beq	r2,zero,8174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    8168:	000d883a 	mov	r6,zero
    816c:	013fffc4 	movi	r4,-1
    8170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    8178:	0005883a 	mov	r2,zero
    817c:	f800283a 	ret

Disassembly of section .text:

00008180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8184:	defd4c14 	ori	sp,sp,62768
    movhi gp, %hi(_gp)
    8188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    818c:	d6833914 	ori	gp,gp,3300
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8194:	10a33f14 	ori	r2,r2,36092

    movhi r3, %hi(__bss_end)
    8198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    819c:	18e3bd14 	ori	r3,r3,36596

    beq r2, r3, 1f
    81a0:	10c00326 	beq	r2,r3,81b0 <_start+0x30>

0:
    stw zero, (r2)
    81a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81ac:	10fffd36 	bltu	r2,r3,81a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81b0:	0008a980 	call	8a98 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81b4:	0008b1c0 	call	8b1c <alt_main>

000081b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81b8:	003fff06 	br	81b8 <alt_after_alt_main>

000081bc <interrupt>:
    }
}*/


static void interrupt (void* context){
    unsigned int status = uart_ptr[REG_INT_STATUS];
    81bc:	d0a00017 	ldw	r2,-32768(gp)
    81c0:	10c00317 	ldw	r3,12(r2)

    if (status & TX_NOT_FULL){
    81c4:	1900200c 	andi	r4,r3,128
    81c8:	20001726 	beq	r4,zero,8228 <interrupt+0x6c>
        uart_ptr[REG_DATA] = txBuffer[txIndex++];
    81cc:	d1200a17 	ldw	r4,-32728(gp)
    81d0:	20c00044 	addi	r3,r4,1
    81d4:	d0e00a15 	stw	r3,-32728(gp)
    81d8:	00c00074 	movhi	r3,1
    81dc:	18e36404 	addi	r3,r3,-29296
    81e0:	1907883a 	add	r3,r3,r4
    81e4:	18c00003 	ldbu	r3,0(r3)
    81e8:	18c03fcc 	andi	r3,r3,255
    81ec:	18c0201c 	xori	r3,r3,128
    81f0:	18ffe004 	addi	r3,r3,-128
    81f4:	10c00015 	stw	r3,0(r2)
        uart_ptr[REG_INT_STATUS] = TX_NOT_FULL;
    81f8:	00c02004 	movi	r3,128
    81fc:	10c00315 	stw	r3,12(r2)

        if (txIndex >= txlength) {
    8200:	d1200a17 	ldw	r4,-32728(gp)
    8204:	d0e00b17 	ldw	r3,-32724(gp)
    8208:	20c01c36 	bltu	r4,r3,827c <interrupt+0xc0>
            send_command = 1;
    820c:	00c00044 	movi	r3,1
    8210:	d0e00815 	stw	r3,-32736(gp)
    	    uart_ptr[REG_INT_ENABLE] &= ~(TX_NOT_FULL);
    8214:	10c00217 	ldw	r3,8(r2)
    8218:	013fdfc4 	movi	r4,-129
    821c:	1906703a 	and	r3,r3,r4
    8220:	10c00215 	stw	r3,8(r2)
    8224:	f800283a 	ret
        }
    } else if (status & RX_NOT_EMPTY){
    8228:	18c0020c 	andi	r3,r3,8
    822c:	18001326 	beq	r3,zero,827c <interrupt+0xc0>
        rxBuffer[rxIndex++] = uart_ptr[REG_DATA];  // Lê o dado e incrementa o índice
    8230:	11400017 	ldw	r5,0(r2)
    8234:	d1200917 	ldw	r4,-32732(gp)
    8238:	20c00044 	addi	r3,r4,1
    823c:	d0e00915 	stw	r3,-32732(gp)
    8240:	00c00074 	movhi	r3,1
    8244:	18e34b04 	addi	r3,r3,-29396
    8248:	1909883a 	add	r4,r3,r4
    824c:	21400005 	stb	r5,0(r4)
        rxBuffer[rxIndex] = '\0';
    8250:	d1200917 	ldw	r4,-32732(gp)
    8254:	1907883a 	add	r3,r3,r4
    8258:	18000005 	stb	zero,0(r3)
       // printf("%c", rxBuffer[rxIndex - 1]);
        receive_byte = 1;
    825c:	00c00044 	movi	r3,1
    8260:	d0e00715 	stw	r3,-32740(gp)
        uart_ptr[REG_INT_STATUS] = RX_NOT_EMPTY;
    8264:	00c00204 	movi	r3,8
    8268:	10c00315 	stw	r3,12(r2)

        if (rxIndex >= BUFFER_SIZE){
    826c:	d0a00917 	ldw	r2,-32732(gp)
    8270:	10801930 	cmpltui	r2,r2,100
    8274:	1000011e 	bne	r2,zero,827c <interrupt+0xc0>
        	rxIndex = 0;
    8278:	d0200915 	stw	zero,-32732(gp)
        }
	}
}
    827c:	f800283a 	ret

00008280 <joiIrq>:
        //printf("Erro ao executar o comando '%s'.\n", command);
        return 0;
    }
}

void joiIrq(void* context){
    8280:	deffff04 	addi	sp,sp,-4
    JoyState = 1;
    8284:	00800044 	movi	r2,1
    read_JOYSTICK(UP_DIR, BOTH_EDGE);
    8288:	01400084 	movi	r5,2
    828c:	01000284 	movi	r4,10
void joiIrq(void* context){
    8290:	dfc00015 	stw	ra,0(sp)
    JoyState = 1;
    8294:	d0a00615 	stw	r2,-32744(gp)
    read_JOYSTICK(UP_DIR, BOTH_EDGE);
    8298:	00087180 	call	8718 <read_JOYSTICK>
    read_JOYSTICK(DOWN_DIR, BOTH_EDGE);
    829c:	01400084 	movi	r5,2
    82a0:	010002c4 	movi	r4,11
    82a4:	00087180 	call	8718 <read_JOYSTICK>
    read_JOYSTICK(LEFT_DIR, BOTH_EDGE);
    82a8:	01400084 	movi	r5,2
    82ac:	01000204 	movi	r4,8
    82b0:	00087180 	call	8718 <read_JOYSTICK>
    read_JOYSTICK(RIGHT_DIR, BOTH_EDGE);
    82b4:	01400084 	movi	r5,2
    82b8:	01000244 	movi	r4,9
}
    82bc:	dfc00017 	ldw	ra,0(sp)
    82c0:	dec00104 	addi	sp,sp,4
    read_JOYSTICK(RIGHT_DIR, BOTH_EDGE);
    82c4:	00087181 	jmpi	8718 <read_JOYSTICK>

000082c8 <sendReceive>:
int sendReceive(const char* message, const char* expected){
    82c8:	defffb04 	addi	sp,sp,-20
    82cc:	dc800215 	stw	r18,8(sp)
    82d0:	dc400115 	stw	r17,4(sp)
    82d4:	dc000015 	stw	r16,0(sp)
    82d8:	dfc00415 	stw	ra,16(sp)
    82dc:	dcc00315 	stw	r19,12(sp)
    82e0:	2021883a 	mov	r16,r4
    82e4:	2825883a 	mov	r18,r5
    txlength = strlen(message);
    82e8:	00088f00 	call	88f0 <strlen>
    82ec:	d0a00b15 	stw	r2,-32724(gp)
    txIndex = 0;
    82f0:	d0200a15 	stw	zero,-32728(gp)
        uart_ptr[REG_DATA] = message[txIndex++];
    82f4:	d4600017 	ldw	r17,-32768(gp)
    rxIndex = 0;
    82f8:	d0200915 	stw	zero,-32732(gp)
    rxBuffer[0] = '\0';
    82fc:	00800074 	movhi	r2,1
    8300:	10234b05 	stb	zero,-29396(r2)
        uart_ptr[REG_DATA] = message[txIndex++];
    8304:	00c00204 	movi	r3,8
    for (int i = 0; (i < 8) && (txIndex < txlength); i++) {
    8308:	d1200a17 	ldw	r4,-32728(gp)
    830c:	d0a00b17 	ldw	r2,-32724(gp)
    8310:	2080082e 	bgeu	r4,r2,8334 <sendReceive+0x6c>
        uart_ptr[REG_DATA] = message[txIndex++];
    8314:	d0a00a17 	ldw	r2,-32728(gp)
    for (int i = 0; (i < 8) && (txIndex < txlength); i++) {
    8318:	18ffffc4 	addi	r3,r3,-1
        uart_ptr[REG_DATA] = message[txIndex++];
    831c:	11000044 	addi	r4,r2,1
    8320:	d1200a15 	stw	r4,-32728(gp)
    8324:	8085883a 	add	r2,r16,r2
    8328:	10800007 	ldb	r2,0(r2)
    832c:	88800015 	stw	r2,0(r17)
    for (int i = 0; (i < 8) && (txIndex < txlength); i++) {
    8330:	183ff51e 	bne	r3,zero,8308 <sendReceive+0x40>
    if (txIndex < txlength) {
    8334:	d0e00a17 	ldw	r3,-32728(gp)
    8338:	d0a00b17 	ldw	r2,-32724(gp)
    833c:	1880212e 	bgeu	r3,r2,83c4 <sendReceive+0xfc>
    	strncpy((char*) txBuffer, message, BUFFER_SIZE - 1);
    8340:	01000074 	movhi	r4,1
    8344:	018018c4 	movi	r6,99
    8348:	800b883a 	mov	r5,r16
    834c:	21236404 	addi	r4,r4,-29296
    8350:	000890c0 	call	890c <strncpy>
    	uart_ptr[REG_INT_ENABLE] |= TX_NOT_FULL;
    8354:	88800217 	ldw	r2,8(r17)
    8358:	10802014 	ori	r2,r2,128
    835c:	88800215 	stw	r2,8(r17)
            if (strstr(rxBuffer, expected)) {
    8360:	04000074 	movhi	r16,1
            } else if (strstr(rxBuffer, "ERROR\r\n")) {
    8364:	04c00074 	movhi	r19,1
            } else if (strstr(rxBuffer, "FAIL\r\n")) {
    8368:	04400074 	movhi	r17,1
            if (strstr(rxBuffer, expected)) {
    836c:	84234b04 	addi	r16,r16,-29396
            } else if (strstr(rxBuffer, "ERROR\r\n")) {
    8370:	9ce30204 	addi	r19,r19,-29688
            } else if (strstr(rxBuffer, "FAIL\r\n")) {
    8374:	8c630404 	addi	r17,r17,-29680
        if (send_command && receive_byte){
    8378:	d0a00817 	ldw	r2,-32736(gp)
    837c:	103ffe26 	beq	r2,zero,8378 <sendReceive+0xb0>
    8380:	d0a00717 	ldw	r2,-32740(gp)
    8384:	103ffc26 	beq	r2,zero,8378 <sendReceive+0xb0>
            if (strstr(rxBuffer, expected)) {
    8388:	900b883a 	mov	r5,r18
    838c:	8009883a 	mov	r4,r16
            receive_byte = 0;
    8390:	d0200715 	stw	zero,-32740(gp)
            if (strstr(rxBuffer, expected)) {
    8394:	00089540 	call	8954 <strstr>
    8398:	10000d1e 	bne	r2,zero,83d0 <sendReceive+0x108>
            } else if (strstr(rxBuffer, "ERROR\r\n")) {
    839c:	980b883a 	mov	r5,r19
    83a0:	8009883a 	mov	r4,r16
    83a4:	00089540 	call	8954 <strstr>
    83a8:	1000041e 	bne	r2,zero,83bc <sendReceive+0xf4>
            } else if (strstr(rxBuffer, "FAIL\r\n")) {
    83ac:	880b883a 	mov	r5,r17
    83b0:	8009883a 	mov	r4,r16
    83b4:	00089540 	call	8954 <strstr>
    83b8:	103fef26 	beq	r2,zero,8378 <sendReceive+0xb0>
                return 0;
    83bc:	0005883a 	mov	r2,zero
    83c0:	00000406 	br	83d4 <sendReceive+0x10c>
    	send_command = 1;
    83c4:	00800044 	movi	r2,1
    83c8:	d0a00815 	stw	r2,-32736(gp)
    83cc:	003fe406 	br	8360 <sendReceive+0x98>
                return 1;
    83d0:	00800044 	movi	r2,1
}
    83d4:	dfc00417 	ldw	ra,16(sp)
    83d8:	dcc00317 	ldw	r19,12(sp)
    83dc:	dc800217 	ldw	r18,8(sp)
    83e0:	dc400117 	ldw	r17,4(sp)
    83e4:	dc000017 	ldw	r16,0(sp)
    83e8:	dec00504 	addi	sp,sp,20
    83ec:	f800283a 	ret

000083f0 <executeCommand>:
int executeCommand(const char* command, const char* expected) {
    83f0:	deffff04 	addi	sp,sp,-4
    83f4:	dfc00015 	stw	ra,0(sp)
    if (sendReceive(command, expected)) {
    83f8:	00082c80 	call	82c8 <sendReceive>
}
    83fc:	1004c03a 	cmpne	r2,r2,zero
    8400:	dfc00017 	ldw	ra,0(sp)
    8404:	dec00104 	addi	sp,sp,4
    8408:	f800283a 	ret

0000840c <main>:

int main(){
    alt_putstr("Teste ESP: \n");
    840c:	01000074 	movhi	r4,1
int main(){
    8410:	defff604 	addi	sp,sp,-40
    alt_putstr("Teste ESP: \n");
    8414:	21230604 	addi	r4,r4,-29672
int main(){
    8418:	dfc00915 	stw	ra,36(sp)
    841c:	dc400715 	stw	r17,28(sp)
    8420:	dc000615 	stw	r16,24(sp)
    8424:	dc800815 	stw	r18,32(sp)
    alt_putstr("Teste ESP: \n");
    8428:	0008b480 	call	8b48 <alt_putstr>
    char as[] = "{\"a\": 0.0,\"l\": 0}";
    842c:	01400074 	movhi	r5,1
    8430:	01800484 	movi	r6,18
    8434:	29633404 	addi	r5,r5,-29488
    8438:	d9000184 	addi	r4,sp,6
    843c:	00088c80 	call	88c8 <memcpy>
    initialize_joystick();
    8440:	000875c0 	call	875c <initialize_joystick>
    uart_ptr[REG_CONTROL] =  0;
    8444:	d0a00017 	ldw	r2,-32768(gp)
    uart_ptr[REG_CONTROL] =  0b11111;
    8448:	00c007c4 	movi	r3,31
    uart_ptr[REG_INT_ENABLE] = 0x08;
    alt_ic_isr_register(0, 2, (void *)interrupt, NULL, 0x0);
    844c:	01800074 	movhi	r6,1
    uart_ptr[REG_CONTROL] =  0;
    8450:	10000115 	stw	zero,4(r2)
    uart_ptr[REG_CONTROL] =  0b11111;
    8454:	10c00115 	stw	r3,4(r2)
    uart_ptr[REG_INT_ENABLE] = 0x08;
    8458:	00c00204 	movi	r3,8
    845c:	10c00215 	stw	r3,8(r2)
    alt_ic_isr_register(0, 2, (void *)interrupt, NULL, 0x0);
    8460:	000f883a 	mov	r7,zero
    8464:	31a06f04 	addi	r6,r6,-32324
    8468:	01400084 	movi	r5,2
    846c:	0009883a 	mov	r4,zero
    8470:	d8000015 	stw	zero,0(sp)
    8474:	00089a40 	call	89a4 <alt_ic_isr_register>
    set_callback(joiIrq);
    8478:	01000074 	movhi	r4,1
    847c:	2120a004 	addi	r4,r4,-32128
    8480:	00088c00 	call	88c0 <set_callback>

    peripheral_enable_callback(UP_DIR, BOTH_EDGE);
    8484:	01400084 	movi	r5,2
    8488:	01000284 	movi	r4,10
    848c:	00088000 	call	8800 <peripheral_enable_callback>
    peripheral_enable_callback(DOWN_DIR, BOTH_EDGE);
    8490:	01400084 	movi	r5,2
    8494:	010002c4 	movi	r4,11
    8498:	00088000 	call	8800 <peripheral_enable_callback>
    peripheral_enable_callback(LEFT_DIR, BOTH_EDGE);
    849c:	01400084 	movi	r5,2
    84a0:	01000204 	movi	r4,8
    84a4:	00088000 	call	8800 <peripheral_enable_callback>
    peripheral_enable_callback(RIGHT_DIR, BOTH_EDGE);
    84a8:	01400084 	movi	r5,2
    84ac:	01000244 	movi	r4,9
    84b0:	00088000 	call	8800 <peripheral_enable_callback>

    int move = 0;

    executeCommand("ATE0\r\n", "OK\r\n");                        // Desabilita eco
    84b4:	01400074 	movhi	r5,1
    84b8:	01000074 	movhi	r4,1
    84bc:	29630a04 	addi	r5,r5,-29656
    84c0:	21230c04 	addi	r4,r4,-29648
    84c4:	00083f00 	call	83f0 <executeCommand>
    executeCommand("AT+UART_CUR=115200,8,1,0,3\r\n", "OK\r\n");  // Configura UART
    84c8:	01400074 	movhi	r5,1
    84cc:	01000074 	movhi	r4,1
    84d0:	29630a04 	addi	r5,r5,-29656
    84d4:	21230e04 	addi	r4,r4,-29640
    84d8:	00083f00 	call	83f0 <executeCommand>
    //executeCommand("AT+CWLAP\r\n", "OK\r\n");                  // Lista redes
    executeCommand("AT+CWMODE=1\r\n", "OK\r\n");                 // Modo Station
    84dc:	01400074 	movhi	r5,1
    84e0:	01000074 	movhi	r4,1
    84e4:	29630a04 	addi	r5,r5,-29656
    84e8:	21231604 	addi	r4,r4,-29608
    84ec:	00083f00 	call	83f0 <executeCommand>
    executeCommand("AT+CWJAP=\"Wi-Net _ANDRE\",\"grazy5446\"\r\n", "OK\r\n"); // Conecta na rede
    84f0:	01400074 	movhi	r5,1
    84f4:	01000074 	movhi	r4,1
    84f8:	29630a04 	addi	r5,r5,-29656
    84fc:	21231a04 	addi	r4,r4,-29592
    
    while (!executeCommand("AT+CIPSTART=\"TCP\",\"192.168.25.107\",12345\r\n", "OK\r\n"));
    8500:	04400074 	movhi	r17,1
    8504:	04000074 	movhi	r16,1
    executeCommand("AT+CWJAP=\"Wi-Net _ANDRE\",\"grazy5446\"\r\n", "OK\r\n"); // Conecta na rede
    8508:	00083f00 	call	83f0 <executeCommand>
    while (!executeCommand("AT+CIPSTART=\"TCP\",\"192.168.25.107\",12345\r\n", "OK\r\n"));
    850c:	8c630a04 	addi	r17,r17,-29656
    8510:	84232404 	addi	r16,r16,-29552
    8514:	880b883a 	mov	r5,r17
    8518:	8009883a 	mov	r4,r16
    851c:	00083f00 	call	83f0 <executeCommand>
    8520:	103ffc26 	beq	r2,zero,8514 <main+0x108>
    8524:	04000804 	movi	r16,32
    8528:	04400c04 	movi	r17,48
                as[14] = 0x20;
                as[15] = 0x31;
                move = 1;
            } else if (read_JOYSTICK(DOWN_DIR, LEVEL)){
                as[14] = 0x2D;
                as[15] = 0x31;
    852c:	04800c44 	movi	r18,49
        if (JoyState){
    8530:	d0a00617 	ldw	r2,-32744(gp)
    8534:	103ffe26 	beq	r2,zero,8530 <main+0x124>
            if (read_JOYSTICK(UP_DIR, LEVEL)){
    8538:	014000c4 	movi	r5,3
    853c:	01000284 	movi	r4,10
    8540:	00087180 	call	8718 <read_JOYSTICK>
    8544:	10001b1e 	bne	r2,zero,85b4 <main+0x1a8>
            } else if (read_JOYSTICK(DOWN_DIR, LEVEL)){
    8548:	014000c4 	movi	r5,3
    854c:	010002c4 	movi	r4,11
    8550:	00087180 	call	8718 <read_JOYSTICK>
    8554:	1000261e 	bne	r2,zero,85f0 <main+0x1e4>
                as[14] = 0x20;
                as[15] = 0x30;
                move = 0;
            }
            
            if (move & read_JOYSTICK(LEFT_DIR, LEVEL)){
    8558:	014000c4 	movi	r5,3
    855c:	01000204 	movi	r4,8
                as[14] = 0x20;
    8560:	dc000505 	stb	r16,20(sp)
                as[15] = 0x30;
    8564:	dc400545 	stb	r17,21(sp)
            if (move & read_JOYSTICK(LEFT_DIR, LEVEL)){
    8568:	00087180 	call	8718 <read_JOYSTICK>
                as[5] = 0x20;
                as[8] = 0x39;
            } else if (move & read_JOYSTICK(RIGHT_DIR, LEVEL)){
    856c:	014000c4 	movi	r5,3
    8570:	01000244 	movi	r4,9
    8574:	00087180 	call	8718 <read_JOYSTICK>
                as[5] = 0x2D;
                as[8] = 0x39;
            } else {
                as[5] = 0x20;
                as[8] = 0x30;
    8578:	00c00804 	movi	r3,32
    857c:	00800c04 	movi	r2,48
            }
            
            JoyState = 0;
            
            executeCommand("AT+CIPSEND=17\r\n", ">");                    // Pronto para envio
    8580:	01400074 	movhi	r5,1
    8584:	01000074 	movhi	r4,1
    8588:	29632f04 	addi	r5,r5,-29508
    858c:	21233004 	addi	r4,r4,-29504
                as[5] = 0x20;
    8590:	d8c002c5 	stb	r3,11(sp)
                as[8] = 0x39;
    8594:	d8800385 	stb	r2,14(sp)
            JoyState = 0;
    8598:	d0200615 	stw	zero,-32744(gp)
            executeCommand("AT+CIPSEND=17\r\n", ">");                    // Pronto para envio
    859c:	00083f00 	call	83f0 <executeCommand>
            executeCommand((const char *) as, "OK\r\n");
    85a0:	01400074 	movhi	r5,1
    85a4:	29630a04 	addi	r5,r5,-29656
    85a8:	d9000184 	addi	r4,sp,6
    85ac:	00083f00 	call	83f0 <executeCommand>
    85b0:	003fdf06 	br	8530 <main+0x124>
    85b4:	00800804 	movi	r2,32
            if (move & read_JOYSTICK(LEFT_DIR, LEVEL)){
    85b8:	014000c4 	movi	r5,3
    85bc:	01000204 	movi	r4,8
                as[14] = 0x2D;
    85c0:	d8800505 	stb	r2,20(sp)
                as[15] = 0x31;
    85c4:	dc800545 	stb	r18,21(sp)
            if (move & read_JOYSTICK(LEFT_DIR, LEVEL)){
    85c8:	00087180 	call	8718 <read_JOYSTICK>
    85cc:	1080004c 	andi	r2,r2,1
    85d0:	1000091e 	bne	r2,zero,85f8 <main+0x1ec>
            } else if (move & read_JOYSTICK(RIGHT_DIR, LEVEL)){
    85d4:	014000c4 	movi	r5,3
    85d8:	01000244 	movi	r4,9
    85dc:	00087180 	call	8718 <read_JOYSTICK>
    85e0:	1080004c 	andi	r2,r2,1
    85e4:	103fe426 	beq	r2,zero,8578 <main+0x16c>
    85e8:	00c00b44 	movi	r3,45
    85ec:	00000306 	br	85fc <main+0x1f0>
    85f0:	00800b44 	movi	r2,45
    85f4:	003ff006 	br	85b8 <main+0x1ac>
    85f8:	00c00804 	movi	r3,32
    85fc:	00800e44 	movi	r2,57
    8600:	003fdf06 	br	8580 <main+0x174>

00008604 <interrupt>:
	config_pin_state(direction, state);
	return read_pin(direction);
}

static void interrupt (void* context){
	if (callback_button != NULL){
    8604:	d0a00c17 	ldw	r2,-32720(gp)
    8608:	10000126 	beq	r2,zero,8610 <interrupt+0xc>
		callback_button();
    860c:	1000683a 	jmp	r2
	}
}
    8610:	f800283a 	ret

00008614 <pulse_we>:
	IOWR(WE_JOYSTICK_BASE,0, 1);
    8614:	00c00044 	movi	r3,1
    8618:	00800074 	movhi	r2,1
    861c:	10c41835 	stwio	r3,4192(r2)
	IOWR(WE_JOYSTICK_BASE,0, 0);
    8620:	10041835 	stwio	zero,4192(r2)
}
    8624:	f800283a 	ret

00008628 <config_pin_state>:
	IOWR(WE_JOYSTICK_LSB_BASE, 0, RCTL);
    8628:	00c00144 	movi	r3,5
    862c:	00800074 	movhi	r2,1
    8630:	10c42035 	stwio	r3,4224(r2)
	*data_LSB = IORD(RD_JOYSTICK_LSB_BASE, 0);
    8634:	10c42837 	ldwio	r3,4256(r2)
	*data_MSB = IORD(RD_JOYSTICK_MSB_BASE, 0);
    8638:	11842437 	ldwio	r6,4240(r2)
	mask = data_MSB << 18 | data_LSB >> 14; // Pegar os bits de sele��o
    863c:	1804d3ba 	srli	r2,r3,14
    8640:	300c94ba 	slli	r6,r6,18
	mask = ~(3 << (2 * peripheral)) & mask; //limpar seletor de edge
    8644:	2008907a 	slli	r4,r4,1
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WCTL);
    8648:	1806913a 	slli	r3,r3,4
	mask = data_MSB << 18 | data_LSB >> 14; // Pegar os bits de sele��o
    864c:	308cb03a 	or	r6,r6,r2
	mask = ~(3 << (2 * peripheral)) & mask; //limpar seletor de edge
    8650:	008000c4 	movi	r2,3
    8654:	1104983a 	sll	r2,r2,r4
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WCTL);
    8658:	18c00214 	ori	r3,r3,8
	mask = ~(3 << (2 * peripheral)) & mask; //limpar seletor de edge
    865c:	0084303a 	nor	r2,zero,r2
    8660:	1184703a 	and	r2,r2,r6
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WCTL);
    8664:	01800074 	movhi	r6,1
    8668:	30c42035 	stwio	r3,4224(r6)
	mask = (state << (2 * peripheral)) | mask;
    866c:	290a983a 	sll	r5,r5,r4
    8670:	288ab03a 	or	r5,r5,r2
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    8674:	00800074 	movhi	r2,1
    8678:	11441c35 	stwio	r5,4208(r2)
	pulse_we();
    867c:	00086141 	jmpi	8614 <pulse_we>

00008680 <read_pin>:
	IOWR(WE_JOYSTICK_LSB_BASE, 0, RDEC);
    8680:	00c00104 	movi	r3,4
    8684:	00800074 	movhi	r2,1
    8688:	10c42035 	stwio	r3,4224(r2)
	*data_LSB = IORD(RD_JOYSTICK_LSB_BASE, 0);
    868c:	10c42837 	ldwio	r3,4256(r2)
	*data_MSB = IORD(RD_JOYSTICK_MSB_BASE, 0);
    8690:	10842437 	ldwio	r2,4240(r2)
	if ((data_LSB & 1 << peripheral) != 0){
    8694:	00800044 	movi	r2,1
    8698:	1108983a 	sll	r4,r2,r4
    869c:	20c4703a 	and	r2,r4,r3
    86a0:	10000c26 	beq	r2,zero,86d4 <read_pin+0x54>
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4  | WDEC);
    86a4:	1806913a 	slli	r3,r3,4
static int read_pin(unsigned int peripheral){
    86a8:	deffff04 	addi	sp,sp,-4
    86ac:	dfc00015 	stw	ra,0(sp)
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4  | WDEC);
    86b0:	18c001d4 	ori	r3,r3,7
    86b4:	00800074 	movhi	r2,1
    86b8:	10c42035 	stwio	r3,4224(r2)
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    86bc:	11041c35 	stwio	r4,4208(r2)
	pulse_we();
    86c0:	00086140 	call	8614 <pulse_we>
		return 1;
    86c4:	00800044 	movi	r2,1
}
    86c8:	dfc00017 	ldw	ra,0(sp)
    86cc:	dec00104 	addi	sp,sp,4
    86d0:	f800283a 	ret
    86d4:	f800283a 	ret

000086d8 <read_KEY>:
	if (KEY > 7 || KEY < 0 || state > 3 || state < 0){
    86d8:	20c00228 	cmpgeui	r3,r4,8
    86dc:	18000c1e 	bne	r3,zero,8710 <read_KEY+0x38>
    86e0:	28800128 	cmpgeui	r2,r5,4
    86e4:	10000a1e 	bne	r2,zero,8710 <read_KEY+0x38>
int read_KEY(unsigned int KEY, unsigned int state){
    86e8:	defffe04 	addi	sp,sp,-8
    86ec:	dc000015 	stw	r16,0(sp)
    86f0:	dfc00115 	stw	ra,4(sp)
    86f4:	2021883a 	mov	r16,r4
	config_pin_state(KEY, state);
    86f8:	00086280 	call	8628 <config_pin_state>
	return read_pin(KEY);
    86fc:	8009883a 	mov	r4,r16
}
    8700:	dfc00117 	ldw	ra,4(sp)
    8704:	dc000017 	ldw	r16,0(sp)
    8708:	dec00204 	addi	sp,sp,8
	return read_pin(KEY);
    870c:	00086801 	jmpi	8680 <read_pin>
}
    8710:	00bfffc4 	movi	r2,-1
    8714:	f800283a 	ret

00008718 <read_JOYSTICK>:
	if (direction > 11 || direction < 8 || state > 3 || state < 0){
    8718:	20fffe04 	addi	r3,r4,-8
    871c:	18c00128 	cmpgeui	r3,r3,4
    8720:	18000c1e 	bne	r3,zero,8754 <read_JOYSTICK+0x3c>
    8724:	28800128 	cmpgeui	r2,r5,4
    8728:	10000a1e 	bne	r2,zero,8754 <read_JOYSTICK+0x3c>
int read_JOYSTICK(unsigned int direction, unsigned int state){
    872c:	defffe04 	addi	sp,sp,-8
    8730:	dc000015 	stw	r16,0(sp)
    8734:	dfc00115 	stw	ra,4(sp)
    8738:	2021883a 	mov	r16,r4
	config_pin_state(direction, state);
    873c:	00086280 	call	8628 <config_pin_state>
	return read_pin(direction);
    8740:	8009883a 	mov	r4,r16
}
    8744:	dfc00117 	ldw	ra,4(sp)
    8748:	dc000017 	ldw	r16,0(sp)
    874c:	dec00204 	addi	sp,sp,8
	return read_pin(direction);
    8750:	00086801 	jmpi	8680 <read_pin>
}
    8754:	00bfffc4 	movi	r2,-1
    8758:	f800283a 	ret

0000875c <initialize_joystick>:

void initialize_joystick(){
    875c:	defffd04 	addi	sp,sp,-12
    8760:	dfc00215 	stw	ra,8(sp)
    8764:	dc000115 	stw	r16,4(sp)
	IOWR(WE_JOYSTICK_LSB_BASE,0, 0);
    8768:	00800074 	movhi	r2,1
    876c:	10042035 	stwio	zero,4224(r2)
	IOWR(WE_JOYSTICK_MSB_BASE,0, 0);
    8770:	10041c35 	stwio	zero,4208(r2)
	IOWR(WE_JOYSTICK_BASE,0, 0);
    8774:	10041835 	stwio	zero,4192(r2)
	IOWR(IRQ_JOYSTICK_BASE, 2, 1);
    8778:	04000044 	movi	r16,1
    877c:	14041635 	stwio	r16,4184(r2)
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WCTL);
    8780:	00c00204 	movi	r3,8
    8784:	10c42035 	stwio	r3,4224(r2)
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    8788:	10041c35 	stwio	zero,4208(r2)
	pulse_we();
    878c:	00086140 	call	8614 <pulse_we>
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WCTL);
    8790:	00800134 	movhi	r2,4
    8794:	10bffe04 	addi	r2,r2,-8
    8798:	00c00074 	movhi	r3,1
    879c:	18842035 	stwio	r2,4224(r3)
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    87a0:	00800074 	movhi	r2,1
    87a4:	10041c35 	stwio	zero,4208(r2)
	pulse_we();
    87a8:	00086140 	call	8614 <pulse_we>

	we_CTL(0, 0);
	we_CTL(0, 16383);

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(IRQ_JOYSTICK_BASE, 0x01);
    87ac:	00800074 	movhi	r2,1
    87b0:	14041635 	stwio	r16,4184(r2)
	alt_ic_isr_register(0, 1, (void *)interrupt, NULL, 0x0);
    87b4:	01800074 	movhi	r6,1
    87b8:	d8000015 	stw	zero,0(sp)
    87bc:	000f883a 	mov	r7,zero
    87c0:	31a18104 	addi	r6,r6,-31228
    87c4:	01400044 	movi	r5,1
    87c8:	0009883a 	mov	r4,zero
    87cc:	00089a40 	call	89a4 <alt_ic_isr_register>
}
    87d0:	dfc00217 	ldw	ra,8(sp)
    87d4:	dc000117 	ldw	r16,4(sp)
    87d8:	dec00304 	addi	sp,sp,12
    87dc:	f800283a 	ret

000087e0 <close_joystick>:

void close_joystick(){
	IOWR(WE_JOYSTICK_LSB_BASE,0, 0);
    87e0:	00800074 	movhi	r2,1
    87e4:	10042035 	stwio	zero,4224(r2)
	IOWR(WE_JOYSTICK_MSB_BASE,0, 0);
    87e8:	10041c35 	stwio	zero,4208(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(IRQ_JOYSTICK_BASE, 0x00);
    87ec:	10041635 	stwio	zero,4184(r2)
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WCTL);
    87f0:	00c00204 	movi	r3,8
    87f4:	10c42035 	stwio	r3,4224(r2)
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    87f8:	10041c35 	stwio	zero,4208(r2)
	pulse_we();
    87fc:	00086141 	jmpi	8614 <pulse_we>

00008800 <peripheral_enable_callback>:
	IOWR(WE_JOYSTICK_LSB_BASE, 0, RMIRQ);
    8800:	00c00184 	movi	r3,6
    8804:	00800074 	movhi	r2,1
    8808:	10c42035 	stwio	r3,4224(r2)
	*data_LSB = IORD(RD_JOYSTICK_LSB_BASE, 0);
    880c:	11c42837 	ldwio	r7,4256(r2)
	*data_MSB = IORD(RD_JOYSTICK_MSB_BASE, 0);
    8810:	10842437 	ldwio	r2,4240(r2)
	unsigned int data_MSB, data_LSB, mask_lsb, mask_msb;

	re_MIRQ(&data_MSB, &data_LSB);
	mask_lsb = 1 << peripheral | data_LSB;

	mask_msb = data_MSB << 20 | data_LSB >> 12;
    8814:	3806d33a 	srli	r3,r7,12
    8818:	1004953a 	slli	r2,r2,20
	mask_msb = ~(3 << (2 * peripheral)) & mask_msb; //limpar seletor de edge
    881c:	200c907a 	slli	r6,r4,1
	mask_msb = data_MSB << 20 | data_LSB >> 12;
    8820:	10c4b03a 	or	r2,r2,r3
	mask_msb = ~(3 << (2 * peripheral)) & mask_msb; //limpar seletor de edge
    8824:	00c000c4 	movi	r3,3
    8828:	1986983a 	sll	r3,r3,r6
    882c:	00c6303a 	nor	r3,zero,r3
    8830:	1886703a 	and	r3,r3,r2
	mask_lsb = 1 << peripheral | data_LSB;
    8834:	00800044 	movi	r2,1
    8838:	1104983a 	sll	r2,r2,r4
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WMIRQ);
    883c:	01000074 	movhi	r4,1
	mask_lsb = 1 << peripheral | data_LSB;
    8840:	11c4b03a 	or	r2,r2,r7
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WMIRQ);
    8844:	1004913a 	slli	r2,r2,4
    8848:	10800254 	ori	r2,r2,9
    884c:	20842035 	stwio	r2,4224(r4)
	mask_msb = (state << (2 * peripheral)) | mask_msb;
    8850:	298a983a 	sll	r5,r5,r6
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    8854:	00800074 	movhi	r2,1
	mask_msb = (state << (2 * peripheral)) | mask_msb;
    8858:	28cab03a 	or	r5,r5,r3
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    885c:	11441c35 	stwio	r5,4208(r2)
	pulse_we();
    8860:	00086141 	jmpi	8614 <pulse_we>

00008864 <peripheral_disable_callback>:
	IOWR(WE_JOYSTICK_LSB_BASE, 0, RMIRQ);
    8864:	00c00184 	movi	r3,6
    8868:	00800074 	movhi	r2,1
    886c:	10c42035 	stwio	r3,4224(r2)
	*data_LSB = IORD(RD_JOYSTICK_LSB_BASE, 0);
    8870:	11442837 	ldwio	r5,4256(r2)
	*data_MSB = IORD(RD_JOYSTICK_MSB_BASE, 0);
    8874:	10c42437 	ldwio	r3,4240(r2)

void peripheral_disable_callback(unsigned int peripheral){
	unsigned int data_MSB, data_LSB, mask_lsb, mask_msb;

	re_MIRQ(&data_MSB, &data_LSB);
	mask_lsb = ~(1 << peripheral) & data_LSB;
    8878:	00bfff84 	movi	r2,-2
    887c:	1104183a 	rol	r2,r2,r4
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WMIRQ);
    8880:	01800074 	movhi	r6,1
	mask_lsb = ~(1 << peripheral) & data_LSB;
    8884:	1144703a 	and	r2,r2,r5
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WMIRQ);
    8888:	1004913a 	slli	r2,r2,4
    888c:	10800254 	ori	r2,r2,9
    8890:	30842035 	stwio	r2,4224(r6)

	mask_msb = data_MSB << 20 | data_LSB >> 12;
	mask_msb = ~(3 << (2 * peripheral)) & mask_msb; //limpar seletor de edge
    8894:	2008907a 	slli	r4,r4,1
    8898:	008000c4 	movi	r2,3
	mask_msb = data_MSB << 20 | data_LSB >> 12;
    889c:	280ad33a 	srli	r5,r5,12
	mask_msb = ~(3 << (2 * peripheral)) & mask_msb; //limpar seletor de edge
    88a0:	1104983a 	sll	r2,r2,r4
	mask_msb = data_MSB << 20 | data_LSB >> 12;
    88a4:	1806953a 	slli	r3,r3,20
	mask_msb = ~(3 << (2 * peripheral)) & mask_msb; //limpar seletor de edge
    88a8:	0084303a 	nor	r2,zero,r2
	mask_msb = data_MSB << 20 | data_LSB >> 12;
    88ac:	1946b03a 	or	r3,r3,r5
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    88b0:	10c4703a 	and	r2,r2,r3
    88b4:	00c00074 	movhi	r3,1
    88b8:	18841c35 	stwio	r2,4208(r3)
	pulse_we();
    88bc:	00086141 	jmpi	8614 <pulse_we>

000088c0 <set_callback>:

	we_MIRQ(mask_msb, mask_lsb);
}

void set_callback(void (*callback)()){
	callback_button = callback;
    88c0:	d1200c15 	stw	r4,-32720(gp)
}
    88c4:	f800283a 	ret

000088c8 <memcpy>:
    88c8:	2005883a 	mov	r2,r4
    88cc:	0007883a 	mov	r3,zero
    88d0:	30c0011e 	bne	r6,r3,88d8 <memcpy+0x10>
    88d4:	f800283a 	ret
    88d8:	28cf883a 	add	r7,r5,r3
    88dc:	39c00003 	ldbu	r7,0(r7)
    88e0:	10c9883a 	add	r4,r2,r3
    88e4:	18c00044 	addi	r3,r3,1
    88e8:	21c00005 	stb	r7,0(r4)
    88ec:	003ff806 	br	88d0 <memcpy+0x8>

000088f0 <strlen>:
    88f0:	2005883a 	mov	r2,r4
    88f4:	10c00007 	ldb	r3,0(r2)
    88f8:	1800021e 	bne	r3,zero,8904 <strlen+0x14>
    88fc:	1105c83a 	sub	r2,r2,r4
    8900:	f800283a 	ret
    8904:	10800044 	addi	r2,r2,1
    8908:	003ffa06 	br	88f4 <strlen+0x4>

0000890c <strncpy>:
    890c:	2005883a 	mov	r2,r4
    8910:	2007883a 	mov	r3,r4
    8914:	30000926 	beq	r6,zero,893c <strncpy+0x30>
    8918:	29000003 	ldbu	r4,0(r5)
    891c:	29400044 	addi	r5,r5,1
    8920:	18c00044 	addi	r3,r3,1
    8924:	193fffc5 	stb	r4,-1(r3)
    8928:	21003fcc 	andi	r4,r4,255
    892c:	2100201c 	xori	r4,r4,128
    8930:	213fe004 	addi	r4,r4,-128
    8934:	31bfffc4 	addi	r6,r6,-1
    8938:	203ff61e 	bne	r4,zero,8914 <strncpy+0x8>
    893c:	198d883a 	add	r6,r3,r6
    8940:	1980011e 	bne	r3,r6,8948 <strncpy+0x3c>
    8944:	f800283a 	ret
    8948:	18c00044 	addi	r3,r3,1
    894c:	183fffc5 	stb	zero,-1(r3)
    8950:	003ffb06 	br	8940 <strncpy+0x34>

00008954 <strstr>:
    8954:	2005883a 	mov	r2,r4
    8958:	29000007 	ldb	r4,0(r5)
    895c:	20000d1e 	bne	r4,zero,8994 <strstr+0x40>
    8960:	f800283a 	ret
    8964:	20c00a1e 	bne	r4,r3,8990 <strstr+0x3c>
    8968:	00c00044 	movi	r3,1
    896c:	28cd883a 	add	r6,r5,r3
    8970:	31800007 	ldb	r6,0(r6)
    8974:	3000011e 	bne	r6,zero,897c <strstr+0x28>
    8978:	f800283a 	ret
    897c:	10cf883a 	add	r7,r2,r3
    8980:	39c00007 	ldb	r7,0(r7)
    8984:	3980021e 	bne	r7,r6,8990 <strstr+0x3c>
    8988:	18c00044 	addi	r3,r3,1
    898c:	003ff706 	br	896c <strstr+0x18>
    8990:	10800044 	addi	r2,r2,1
    8994:	10c00007 	ldb	r3,0(r2)
    8998:	183ff21e 	bne	r3,zero,8964 <strstr+0x10>
    899c:	0005883a 	mov	r2,zero
    89a0:	f800283a 	ret

000089a4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    89a4:	0008a301 	jmpi	8a30 <alt_iic_isr_register>

000089a8 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
    89a8:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    89ac:	00bfff84 	movi	r2,-2
    89b0:	1884703a 	and	r2,r3,r2
    89b4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    89b8:	00800044 	movi	r2,1
    89bc:	d1200d17 	ldw	r4,-32716(gp)
    89c0:	114a983a 	sll	r5,r2,r5
    89c4:	290ab03a 	or	r5,r5,r4
    89c8:	d1600d15 	stw	r5,-32716(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    89cc:	d0a00d17 	ldw	r2,-32716(gp)
    89d0:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    89d4:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    89d8:	0005883a 	mov	r2,zero
    89dc:	f800283a 	ret

000089e0 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
    89e0:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    89e4:	00bfff84 	movi	r2,-2
    89e8:	1884703a 	and	r2,r3,r2
    89ec:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
    89f0:	00bfff84 	movi	r2,-2
    89f4:	d1200d17 	ldw	r4,-32716(gp)
    89f8:	114a183a 	rol	r5,r2,r5
    89fc:	290a703a 	and	r5,r5,r4
    8a00:	d1600d15 	stw	r5,-32716(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8a04:	d0a00d17 	ldw	r2,-32716(gp)
    8a08:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    8a0c:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    8a10:	0005883a 	mov	r2,zero
    8a14:	f800283a 	ret

00008a18 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    8a18:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    8a1c:	00800044 	movi	r2,1
    8a20:	1144983a 	sll	r2,r2,r5
    8a24:	10c4703a 	and	r2,r2,r3
}
    8a28:	1004c03a 	cmpne	r2,r2,zero
    8a2c:	f800283a 	ret

00008a30 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    8a30:	28800808 	cmpgei	r2,r5,32
    8a34:	1000161e 	bne	r2,zero,8a90 <alt_iic_isr_register+0x60>
{
    8a38:	defffe04 	addi	sp,sp,-8
    8a3c:	dfc00115 	stw	ra,4(sp)
    8a40:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
    8a44:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8a48:	00bfff84 	movi	r2,-2
    8a4c:	8084703a 	and	r2,r16,r2
    8a50:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    8a54:	280690fa 	slli	r3,r5,3
    8a58:	00800074 	movhi	r2,1
    8a5c:	10a37d04 	addi	r2,r2,-29196
    8a60:	10c5883a 	add	r2,r2,r3
    8a64:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    8a68:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    8a6c:	30000626 	beq	r6,zero,8a88 <alt_iic_isr_register+0x58>
    8a70:	00089a80 	call	89a8 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
    8a74:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    8a78:	dfc00117 	ldw	ra,4(sp)
    8a7c:	dc000017 	ldw	r16,0(sp)
    8a80:	dec00204 	addi	sp,sp,8
    8a84:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    8a88:	00089e00 	call	89e0 <alt_ic_irq_disable>
    8a8c:	003ff906 	br	8a74 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
    8a90:	00bffa84 	movi	r2,-22
}
    8a94:	f800283a 	ret

00008a98 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8a98:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8a9c:	01000074 	movhi	r4,1
    8aa0:	01400074 	movhi	r5,1
    8aa4:	dfc00015 	stw	ra,0(sp)
    8aa8:	21233904 	addi	r4,r4,-29468
    8aac:	29633c04 	addi	r5,r5,-29456
    8ab0:	21400426 	beq	r4,r5,8ac4 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    8ab4:	01800074 	movhi	r6,1
    8ab8:	31a33c04 	addi	r6,r6,-29456
    8abc:	310dc83a 	sub	r6,r6,r4
    8ac0:	00088c80 	call	88c8 <memcpy>
  if (to != from)
    8ac4:	01000074 	movhi	r4,1
    8ac8:	01400074 	movhi	r5,1
    8acc:	21200804 	addi	r4,r4,-32736
    8ad0:	29600804 	addi	r5,r5,-32736
    8ad4:	21400426 	beq	r4,r5,8ae8 <alt_load+0x50>
      *to++ = *from++;
    8ad8:	01800074 	movhi	r6,1
    8adc:	31a06004 	addi	r6,r6,-32384
    8ae0:	310dc83a 	sub	r6,r6,r4
    8ae4:	00088c80 	call	88c8 <memcpy>
  if (to != from)
    8ae8:	01000074 	movhi	r4,1
    8aec:	01400074 	movhi	r5,1
    8af0:	21230204 	addi	r4,r4,-29688
    8af4:	29630204 	addi	r5,r5,-29688
    8af8:	21400426 	beq	r4,r5,8b0c <alt_load+0x74>
      *to++ = *from++;
    8afc:	01800074 	movhi	r6,1
    8b00:	31a33904 	addi	r6,r6,-29468
    8b04:	310dc83a 	sub	r6,r6,r4
    8b08:	00088c80 	call	88c8 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8b0c:	0008bd40 	call	8bd4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8b10:	dfc00017 	ldw	ra,0(sp)
    8b14:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    8b18:	0008bd81 	jmpi	8bd8 <alt_icache_flush_all>

00008b1c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8b1c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8b20:	0009883a 	mov	r4,zero
{
    8b24:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    8b28:	0008b800 	call	8b80 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8b2c:	0008ba00 	call	8ba0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8b30:	d1a00e17 	ldw	r6,-32712(gp)
    8b34:	d1600f17 	ldw	r5,-32708(gp)
    8b38:	d1201017 	ldw	r4,-32704(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8b3c:	dfc00017 	ldw	ra,0(sp)
    8b40:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    8b44:	000840c1 	jmpi	840c <main>

00008b48 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8b48:	defffe04 	addi	sp,sp,-8
    8b4c:	dc000015 	stw	r16,0(sp)
    8b50:	dfc00115 	stw	ra,4(sp)
    8b54:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8b58:	00088f00 	call	88f0 <strlen>
    8b5c:	01000074 	movhi	r4,1
    8b60:	000f883a 	mov	r7,zero
    8b64:	100d883a 	mov	r6,r2
    8b68:	800b883a 	mov	r5,r16
    8b6c:	21233b04 	addi	r4,r4,-29460
#else
    return fputs(str, stdout);
#endif
#endif
}
    8b70:	dfc00117 	ldw	ra,4(sp)
    8b74:	dc000017 	ldw	r16,0(sp)
    8b78:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8b7c:	0008ba41 	jmpi	8ba4 <altera_avalon_jtag_uart_write>

00008b80 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8b80:	deffff04 	addi	sp,sp,-4
    8b84:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8b88:	0008c000 	call	8c00 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8b8c:	00800044 	movi	r2,1
    8b90:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8b94:	dfc00017 	ldw	ra,0(sp)
    8b98:	dec00104 	addi	sp,sp,4
    8b9c:	f800283a 	ret

00008ba0 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    8ba0:	f800283a 	ret

00008ba4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8ba4:	20c00017 	ldw	r3,0(r4)
{
    8ba8:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
    8bac:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8bb0:	01bfffd4 	movui	r6,65535
  while (ptr < end)
    8bb4:	29000136 	bltu	r5,r4,8bbc <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    8bb8:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8bbc:	19c00137 	ldwio	r7,4(r3)
    8bc0:	31fffc2e 	bgeu	r6,r7,8bb4 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8bc4:	29c00007 	ldb	r7,0(r5)
    8bc8:	29400044 	addi	r5,r5,1
    8bcc:	19c00035 	stwio	r7,0(r3)
    8bd0:	003ff806 	br	8bb4 <altera_avalon_jtag_uart_write+0x10>

00008bd4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8bd4:	f800283a 	ret

00008bd8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    8bd8:	f800283a 	ret

00008bdc <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    8bdc:	213ffe84 	addi	r4,r4,-6
    8be0:	20800428 	cmpgeui	r2,r4,16
    8be4:	1000041e 	bne	r2,zero,8bf8 <alt_exception_cause_generated_bad_addr+0x1c>
    8be8:	00a2c8d4 	movui	r2,35619
    8bec:	1104d83a 	srl	r2,r2,r4
    8bf0:	1080004c 	andi	r2,r2,1
    8bf4:	f800283a 	ret
    8bf8:	0005883a 	mov	r2,zero
    return 0;

  default:
    return 0;
  }
}
    8bfc:	f800283a 	ret

00008c00 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8c00:	000170fa 	wrctl	ienable,zero
}
    8c04:	f800283a 	ret
