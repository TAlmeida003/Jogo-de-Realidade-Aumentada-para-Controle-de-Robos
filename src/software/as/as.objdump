
as.elf:     file format elf32-littlenios2
as.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000d54 memsz 0x00000d54 flags r-x
    LOAD off    0x00001d74 vaddr 0x00001d74 paddr 0x00001dd4 align 2**12
         filesz 0x00000060 memsz 0x00000060 flags rw-
    LOAD off    0x00000e34 vaddr 0x00001e34 paddr 0x00001e34 align 2**12
         filesz 0x00000000 memsz 0x00000050 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001dd4  2**0
                  CONTENTS
  2 .text         00000ca0  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000b4  00001cc0  00001cc0  00001cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000060  00001d74  00001dd4  00001d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000050  00001e34  00001e34  00001e34  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00001e84  00001e84  00001dd4  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002e0  00000000  00000000  00001e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000033e8  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000148a  00000000  00000000  000054d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00001333  00000000  00000000  0000695a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000508  00000000  00000000  00007c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00000915  00000000  00000000  00008198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000040  00000000  00000000  00008ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000020  00000000  00000000  00008af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00000b37  00000000  00000000  00008b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000894  00000000  00000000  00009647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000000f9  00000000  00000000  00009edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  0000b452  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0000b455  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0000b461  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0000b462  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0000b463  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0000b46e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0000b479  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000c  00000000  00000000  0000b484  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001f  00000000  00000000  0000b490  2**0
                  CONTENTS, READONLY
 28 .jdi          00005309  00000000  00000000  0000b4af  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000519fa  00000000  00000000  000107b8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001cc0 l    d  .rodata	00000000 .rodata
00001d74 l    d  .rwdata	00000000 .rwdata
00001e34 l    d  .bss	00000000 .bss
00001e84 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 KEY.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 impure.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
0000193c g     F .text	0000002c alt_main
00001714 g     F .text	00000080 _puts_r
00001e6c g     O .bss	00000004 edge0
000010c0 g     F .text	0000001c re_CTL
00001dd4 g       *ABS*	00000000 __flash_rwdata_start
00001e68 g     O .bss	00000004 callback_button1
00001e50 g     O .bss	00000004 callback_button4
00001ab4 g     F .text	00000008 altera_nios2_gen2_irq_init
0000106c g     F .text	00000014 we_DEC
00001634 g     F .text	0000000c as5
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001e74 g     O .bss	00000004 errno
00001e7c g     O .bss	00000004 alt_argv
00009dc8 g       *ABS*	00000000 _gp
00001968 g     F .text	00000004 usleep
00001610 g     F .text	0000000c as2
00001abc g     F .text	00000028 memcpy
00001e4c g     O .bss	00000004 edge4
00001794 g     F .text	00000010 puts
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00001bd8 g     F .text	00000064 .hidden __udivsi3
00001e54 g     O .bss	00000004 edge3
00001e5c g     O .bss	00000004 edge2
00001e38 g     O .bss	00000004 callback_button7
000010dc g     F .text	0000001c re_MIRQ
00001e84 g       *ABS*	00000000 __bss_end
00001e44 g     O .bss	00000004 edge5
00001aac g     F .text	00000004 alt_dcache_flush_all
00001604 g     F .text	0000000c as1
00001dd4 g       *ABS*	00000000 __ram_rwdata_end
0000196c g     F .text	0000005c write
00001d74 g       *ABS*	00000000 __ram_rodata_end
00001dcc g     O .rwdata	00000004 jtag_uart_0
00001080 g     F .text	00000014 we_CTL
00001c3c g     F .text	0000005c .hidden __umodsi3
00001e84 g       *ABS*	00000000 end
00001e60 g     O .bss	00000004 callback_button2
0000164c g     F .text	0000000c as7
000010a8 g     F .text	00000018 re_DEC
00002000 g       *ABS*	00000000 __alt_stack_pointer
000019ec g     F .text	00000030 altera_avalon_jtag_uart_write
00001260 g     F .text	00000088 initialize_joystick
00001020 g     F .text	0000003c _start
000019e8 g     F .text	00000004 alt_sys_init
00001e3c g     O .bss	00000004 edge6
00001c98 g     F .text	00000028 .hidden __mulsi3
00001d74 g       *ABS*	00000000 __ram_rwdata_start
00001cc0 g       *ABS*	00000000 __ram_rodata_start
000012e8 g     F .text	00000030 close_joystick
00001a1c g     F .text	00000090 alt_busy_sleep
00001494 g     F .text	00000164 set_KEY_callback
00001640 g     F .text	0000000c as6
00001094 g     F .text	00000014 we_MIRQ
00001e84 g       *ABS*	00000000 __alt_stack_base
00001e48 g     O .bss	00000004 callback_button5
000015f8 g     F .text	0000000c as0
00001e70 g     O .bss	00000004 callback_button0
000017c0 g     F .text	000000a8 __sfvwrite_small_dev
00001e34 g       *ABS*	00000000 __bss_start
00001658 g     F .text	000000bc main
00001e78 g     O .bss	00000004 alt_envp
0000161c g     F .text	0000000c as3
00001dd0 g     O .rwdata	00000004 alt_errno
00001ae4 g     F .text	00000080 .hidden __divsi3
00001cc0 g       *ABS*	00000000 __flash_rodata_start
000013b8 g     F .text	000000dc interrupt_handler
000019c8 g     F .text	00000020 alt_irq_init
00001868 g     F .text	00000050 _write_r
00001e58 g     O .bss	00000004 callback_button3
00001dc8 g     O .rwdata	00000004 _impure_ptr
00001e80 g     O .bss	00000004 alt_argc
00001318 g     F .text	000000a0 state_KEY
00001e64 g     O .bss	00000004 edge1
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001dd4 g       *ABS*	00000000 _edata
00001e84 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00001b64 g     F .text	00000074 .hidden __modsi3
00001d74 g     O .rwdata	00000054 _impure_data
00002000 g       *ABS*	00000000 __alt_data_end
000010f8 g     F .text	00000168 edge_KEY
0000100c g       .entry	00000000 _exit
000017a4 g     F .text	0000001c strlen
0000105c g     F .text	00000010 pulse_we
00001ab0 g     F .text	00000004 alt_icache_flush_all
00001628 g     F .text	0000000c as4
00001e40 g     O .bss	00000004 callback_button6
000018b8 g     F .text	00000084 alt_load
00001e34 g     O .bss	00000004 edge7



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a77214 	ori	gp,gp,40392
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10878d14 	ori	r2,r2,7732

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c7a114 	ori	r3,r3,7812

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00018b80 	call	18b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	000193c0 	call	193c <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <alt_after_alt_main>

0000105c <pulse_we>:
int edge6 = 0;
void (*callback_button7)() = NULL;
int edge7 = 0;

void pulse_we(){
	IOWR(MEMORIA_BASE_WE,0, 1);
    105c:	00800044 	movi	r2,1
    1060:	008c0435 	stwio	r2,12304(zero)
	IOWR(MEMORIA_BASE_WE,0, 0);
    1064:	000c0435 	stwio	zero,12304(zero)
}
    1068:	f800283a 	ret

0000106c <we_DEC>:

void we_DEC(unsigned int data_MSB, unsigned int data_LSB){
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, data_LSB << 3 | WDEC);
    106c:	280a90fa 	slli	r5,r5,3
    1070:	29400114 	ori	r5,r5,4
    1074:	014c0c35 	stwio	r5,12336(zero)
	IOWR(MEMORIA_BASE_WR_DATA_MSB, 0, data_MSB);
    1078:	010c0835 	stwio	r4,12320(zero)

	pulse_we();
    107c:	000105c1 	jmpi	105c <pulse_we>

00001080 <we_CTL>:
}

void we_CTL(unsigned int data_MSB, unsigned int data_LSB){
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, data_LSB << 3 | WCTL);
    1080:	280a90fa 	slli	r5,r5,3
    1084:	29400154 	ori	r5,r5,5
    1088:	014c0c35 	stwio	r5,12336(zero)
	IOWR(MEMORIA_BASE_WR_DATA_MSB, 0, data_MSB);
    108c:	010c0835 	stwio	r4,12320(zero)

	pulse_we();
    1090:	000105c1 	jmpi	105c <pulse_we>

00001094 <we_MIRQ>:
}

void we_MIRQ(unsigned int data_MSB, unsigned int data_LSB){
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, data_LSB << 3 | WMIRQ);
    1094:	280a90fa 	slli	r5,r5,3
    1098:	29400194 	ori	r5,r5,6
    109c:	014c0c35 	stwio	r5,12336(zero)
	IOWR(MEMORIA_BASE_WR_DATA_MSB, 0, data_MSB);
    10a0:	010c0835 	stwio	r4,12320(zero)

	pulse_we();
    10a4:	000105c1 	jmpi	105c <pulse_we>

000010a8 <re_DEC>:
}

void re_DEC(unsigned int* data_MSB,unsigned int* data_LSB){
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, RDEC);
    10a8:	000c0c35 	stwio	zero,12336(zero)
	*data_LSB = IORD(MEMORIA_BASE_RD_DATA_LSB, 0);
    10ac:	008c1437 	ldwio	r2,12368(zero)
    10b0:	28800015 	stw	r2,0(r5)
	*data_MSB = IORD(MEMORIA_BASE_RD_DATA_MSB, 0);
    10b4:	008c1037 	ldwio	r2,12352(zero)
    10b8:	20800015 	stw	r2,0(r4)
}
    10bc:	f800283a 	ret

000010c0 <re_CTL>:

void re_CTL(unsigned int* data_MSB, unsigned int* data_LSB){
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, RCTL);
    10c0:	00800044 	movi	r2,1
    10c4:	008c0c35 	stwio	r2,12336(zero)
	*data_LSB = IORD(MEMORIA_BASE_RD_DATA_LSB, 0);
    10c8:	008c1437 	ldwio	r2,12368(zero)
    10cc:	28800015 	stw	r2,0(r5)
	*data_MSB = IORD(MEMORIA_BASE_RD_DATA_MSB, 0);
    10d0:	008c1037 	ldwio	r2,12352(zero)
    10d4:	20800015 	stw	r2,0(r4)
}
    10d8:	f800283a 	ret

000010dc <re_MIRQ>:

void re_MIRQ(unsigned int* data_MSB, unsigned int* data_LSB){
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, RMIRQ);
    10dc:	00800084 	movi	r2,2
    10e0:	008c0c35 	stwio	r2,12336(zero)
	*data_LSB = IORD(MEMORIA_BASE_RD_DATA_LSB, 0);
    10e4:	008c1437 	ldwio	r2,12368(zero)
    10e8:	28800015 	stw	r2,0(r5)
	*data_MSB = IORD(MEMORIA_BASE_RD_DATA_MSB, 0);
    10ec:	008c1037 	ldwio	r2,12352(zero)
    10f0:	20800015 	stw	r2,0(r4)
}
    10f4:	f800283a 	ret

000010f8 <edge_KEY>:

int edge_KEY(int button, int edge){
    10f8:	defffb04 	addi	sp,sp,-20
    10fc:	dfc00415 	stw	ra,16(sp)
    1100:	dc400315 	stw	r17,12(sp)
    1104:	dc000215 	stw	r16,8(sp)
	if (button < 0 || button > 7) {
    1108:	20800230 	cmpltui	r2,r4,8
    110c:	1000091e 	bne	r2,zero,1134 <edge_KEY+0x3c>
			printf("ExceptionKEY: Botao invalido\n");
    1110:	01000034 	movhi	r4,0
    1114:	21073004 	addi	r4,r4,7360
			}else{
				we_CTL(data_MSB, data);
			}
			break;
		default:
			printf("ExceptionKEY: Edge invalido\n");
    1118:	00017940 	call	1794 <puts>
			return -1;
    111c:	00bfffc4 	movi	r2,-1
	if ((data_LSB & 1 << button) != 0){
		we_DEC(data_MSB, 1 << button);
		return 1;
	}
	return 0;
}
    1120:	dfc00417 	ldw	ra,16(sp)
    1124:	dc400317 	ldw	r17,12(sp)
    1128:	dc000217 	ldw	r16,8(sp)
    112c:	dec00504 	addi	sp,sp,20
    1130:	f800283a 	ret
    1134:	2823883a 	mov	r17,r5
	re_CTL(&data_MSB, &data_LSB);
    1138:	2021883a 	mov	r16,r4
    113c:	d9400104 	addi	r5,sp,4
    1140:	d809883a 	mov	r4,sp
    1144:	00010c00 	call	10c0 <re_CTL>
	switch (edge) {
    1148:	88800060 	cmpeqi	r2,r17,1
    114c:	1000201e 	bne	r2,zero,11d0 <edge_KEY+0xd8>
    1150:	888000a0 	cmpeqi	r2,r17,2
    1154:	10002b1e 	bne	r2,zero,1204 <edge_KEY+0x10c>
    1158:	88003c1e 	bne	r17,zero,124c <edge_KEY+0x154>
			data = 1 << (2 + button) | data_LSB; // Retirar o ruido
    115c:	80c00084 	addi	r3,r16,2
    1160:	00800044 	movi	r2,1
    1164:	10c4983a 	sll	r2,r2,r3
    1168:	d8c00117 	ldw	r3,4(sp)
			data = ~(3 << (14 + 2 * button)) & data; //limpar seletor de edge
    116c:	014000c4 	movi	r5,3
			data = 1 << (2 + button) | data_LSB; // Retirar o ruido
    1170:	10c4b03a 	or	r2,r2,r3
			data = ~(3 << (14 + 2 * button)) & data; //limpar seletor de edge
    1174:	80c001c4 	addi	r3,r16,7
    1178:	1806907a 	slli	r3,r3,1
    117c:	28ca983a 	sll	r5,r5,r3
    1180:	014a303a 	nor	r5,zero,r5
    1184:	288a703a 	and	r5,r5,r2
			if (button == 7){
    1188:	808001d8 	cmpnei	r2,r16,7
				data_msb = ~1 & data_MSB;
    118c:	d9000017 	ldw	r4,0(sp)
			if (button == 7){
    1190:	1000021e 	bne	r2,zero,119c <edge_KEY+0xa4>
				we_CTL(data_msb, data);
    1194:	00bfff84 	movi	r2,-2
    1198:	2088703a 	and	r4,r4,r2
				we_CTL(data_MSB, data);
    119c:	00010800 	call	1080 <we_CTL>
	re_DEC(&data_MSB, &data_LSB);
    11a0:	d9400104 	addi	r5,sp,4
    11a4:	d809883a 	mov	r4,sp
    11a8:	00010a80 	call	10a8 <re_DEC>
	if ((data_LSB & 1 << button) != 0){
    11ac:	01400044 	movi	r5,1
    11b0:	2c0a983a 	sll	r5,r5,r16
    11b4:	d8800117 	ldw	r2,4(sp)
    11b8:	2884703a 	and	r2,r5,r2
    11bc:	10002626 	beq	r2,zero,1258 <edge_KEY+0x160>
		we_DEC(data_MSB, 1 << button);
    11c0:	d9000017 	ldw	r4,0(sp)
    11c4:	000106c0 	call	106c <we_DEC>
		return 1;
    11c8:	00800044 	movi	r2,1
    11cc:	003fd406 	br	1120 <edge_KEY+0x28>
			data = 1 << (2 + button) | data_LSB; // Retirar o ruido
    11d0:	80c00084 	addi	r3,r16,2
    11d4:	d8800117 	ldw	r2,4(sp)
    11d8:	88c6983a 	sll	r3,r17,r3
			data = ~(3 << (14 + 2 * button)) & data; //limpar seletor de edge
    11dc:	814001c4 	addi	r5,r16,7
    11e0:	280a907a 	slli	r5,r5,1
			data = 1 << (2 + button) | data_LSB; // Retirar o ruido
    11e4:	1886b03a 	or	r3,r3,r2
			data = ~(3 << (14 + 2 * button)) & data; //limpar seletor de edge
    11e8:	008000c4 	movi	r2,3
    11ec:	1144983a 	sll	r2,r2,r5
			data = 1 << (14 + 2 * button) | data;
    11f0:	894a983a 	sll	r5,r17,r5
			data = ~(3 << (14 + 2 * button)) & data; //limpar seletor de edge
    11f4:	0084303a 	nor	r2,zero,r2
    11f8:	10c4703a 	and	r2,r2,r3
			data = 1 << (14 + 2 * button) | data;
    11fc:	288ab03a 	or	r5,r5,r2
    1200:	003fe106 	br	1188 <edge_KEY+0x90>
			data = 1 << (2 + button) | data_LSB; // Retirar o ruido
    1204:	80800084 	addi	r2,r16,2
    1208:	00c00044 	movi	r3,1
    120c:	1886983a 	sll	r3,r3,r2
			data = ~(3 << (14 + 2 * button)) & data; //limpar seletor de edge
    1210:	810001c4 	addi	r4,r16,7
			data = 1 << (2 + button) | data_LSB; // Retirar o ruido
    1214:	d8800117 	ldw	r2,4(sp)
			data = ~(3 << (14 + 2 * button)) & data; //limpar seletor de edge
    1218:	2008907a 	slli	r4,r4,1
			data = 1 << (2 + button) | data_LSB; // Retirar o ruido
    121c:	1886b03a 	or	r3,r3,r2
			data = ~(3 << (14 + 2 * button)) & data; //limpar seletor de edge
    1220:	008000c4 	movi	r2,3
    1224:	1104983a 	sll	r2,r2,r4
			data = 2 << (14 + 2 * button) | data;
    1228:	890a983a 	sll	r5,r17,r4
				data_msb = ~1 & data_MSB;
    122c:	d9000017 	ldw	r4,0(sp)
			data = ~(3 << (14 + 2 * button)) & data; //limpar seletor de edge
    1230:	0084303a 	nor	r2,zero,r2
    1234:	10c4703a 	and	r2,r2,r3
			data = 2 << (14 + 2 * button) | data;
    1238:	288ab03a 	or	r5,r5,r2
			if (button == 7){
    123c:	808001d8 	cmpnei	r2,r16,7
    1240:	103fd61e 	bne	r2,zero,119c <edge_KEY+0xa4>
				we_CTL(data_msb, data);
    1244:	21000054 	ori	r4,r4,1
    1248:	003fd406 	br	119c <edge_KEY+0xa4>
			printf("ExceptionKEY: Edge invalido\n");
    124c:	01000034 	movhi	r4,0
    1250:	21073804 	addi	r4,r4,7392
    1254:	003fb006 	br	1118 <edge_KEY+0x20>
	return 0;
    1258:	0005883a 	mov	r2,zero
    125c:	003fb006 	br	1120 <edge_KEY+0x28>

00001260 <initialize_joystick>:


void initialize_joystick(){
    1260:	defffe04 	addi	sp,sp,-8
    1264:	dfc00115 	stw	ra,4(sp)
    1268:	dc000015 	stw	r16,0(sp)
	IOWR(MEMORIA_BASE_WR_DATA_LSB,0, 0);
    126c:	000c0c35 	stwio	zero,12336(zero)
	IOWR(MEMORIA_BASE_WR_DATA_MSB,0, 0);
    1270:	000c0835 	stwio	zero,12320(zero)
	IOWR(MEMORIA_BASE_WE,0, 0);
    1274:	000c0435 	stwio	zero,12304(zero)
	IOWR(MEMORIA_BASE_IRQ, 2, 1);
    1278:	04000044 	movi	r16,1
    127c:	040c0235 	stwio	r16,12296(zero)
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, data_LSB << 3 | WCTL);
    1280:	00800144 	movi	r2,5
    1284:	008c0c35 	stwio	r2,12336(zero)
	IOWR(MEMORIA_BASE_WR_DATA_MSB, 0, data_MSB);
    1288:	000c0835 	stwio	zero,12320(zero)
	pulse_we();
    128c:	000105c0 	call	105c <pulse_we>
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, data_LSB << 3 | WCTL);
    1290:	00800744 	movi	r2,29
    1294:	008c0c35 	stwio	r2,12336(zero)
	IOWR(MEMORIA_BASE_WR_DATA_MSB, 0, data_MSB);
    1298:	000c0835 	stwio	zero,12320(zero)
	pulse_we();
    129c:	000105c0 	call	105c <pulse_we>

	we_CTL(0, 0);
	we_CTL(0, 3);
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(MEMORIA_BASE_IRQ, 0x01);
    12a0:	040c0235 	stwio	r16,12296(zero)

	usleep(100000);
    12a4:	010000b4 	movhi	r4,2
    12a8:	2121a804 	addi	r4,r4,-31072
    12ac:	00019680 	call	1968 <usleep>

	for (int i = 0; i < 8; i++){
    12b0:	0021883a 	mov	r16,zero
		edge_KEY(i,1);
    12b4:	8009883a 	mov	r4,r16
    12b8:	01400044 	movi	r5,1
    12bc:	00010f80 	call	10f8 <edge_KEY>
		edge_KEY(i,2);
    12c0:	8009883a 	mov	r4,r16
    12c4:	01400084 	movi	r5,2
    12c8:	00010f80 	call	10f8 <edge_KEY>
	for (int i = 0; i < 8; i++){
    12cc:	84000044 	addi	r16,r16,1
    12d0:	80800218 	cmpnei	r2,r16,8
    12d4:	103ff71e 	bne	r2,zero,12b4 <initialize_joystick+0x54>
	}

	//alt_ic_isr_register(JOYSTICK_IRQ, JOYSTICK_IRQ, (void *)interrupt_handler, NULL, 0x0);
}
    12d8:	dfc00117 	ldw	ra,4(sp)
    12dc:	dc000017 	ldw	r16,0(sp)
    12e0:	dec00204 	addi	sp,sp,8
    12e4:	f800283a 	ret

000012e8 <close_joystick>:

void close_joystick(){
    12e8:	deffff04 	addi	sp,sp,-4
    12ec:	dfc00015 	stw	ra,0(sp)
	IOWR(MEMORIA_BASE_WR_DATA_LSB,0, 0);
    12f0:	000c0c35 	stwio	zero,12336(zero)
	IOWR(MEMORIA_BASE_WR_DATA_MSB,0, 0);
    12f4:	000c0835 	stwio	zero,12320(zero)
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, data_LSB << 3 | WCTL);
    12f8:	00800144 	movi	r2,5
    12fc:	008c0c35 	stwio	r2,12336(zero)
	IOWR(MEMORIA_BASE_WR_DATA_MSB, 0, data_MSB);
    1300:	000c0835 	stwio	zero,12320(zero)
	pulse_we();
    1304:	000105c0 	call	105c <pulse_we>
	we_CTL(0, 0);
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(MEMORIA_BASE_IRQ, 0x00);
    1308:	000c0235 	stwio	zero,12296(zero)
}
    130c:	dfc00017 	ldw	ra,0(sp)
    1310:	dec00104 	addi	sp,sp,4
    1314:	f800283a 	ret

00001318 <state_KEY>:


int state_KEY(int button){
    1318:	defffb04 	addi	sp,sp,-20
    131c:	dfc00415 	stw	ra,16(sp)
    1320:	dc400315 	stw	r17,12(sp)
    1324:	dc000215 	stw	r16,8(sp)
	if (button < 0 || button > 7) {
    1328:	20800230 	cmpltui	r2,r4,8
    132c:	1000091e 	bne	r2,zero,1354 <state_KEY+0x3c>
		printf("ExceptionKEY: Botao invalido\n");
    1330:	01000034 	movhi	r4,0
    1334:	21073004 	addi	r4,r4,7360
    1338:	00017940 	call	1794 <puts>
		return -1;
    133c:	00bfffc4 	movi	r2,-1
	if ((data_LSB & 1 << button) != 0){
		we_DEC(data_MSB, 1 << button);
		return 1;
	}
	return 0;
}
    1340:	dfc00417 	ldw	ra,16(sp)
    1344:	dc400317 	ldw	r17,12(sp)
    1348:	dc000217 	ldw	r16,8(sp)
    134c:	dec00504 	addi	sp,sp,20
    1350:	f800283a 	ret
    1354:	2023883a 	mov	r17,r4
	re_CTL(&data_MSB, &data_LSB);
    1358:	d9400104 	addi	r5,sp,4
    135c:	d809883a 	mov	r4,sp
    1360:	00010c00 	call	10c0 <re_CTL>
	unsigned int data = data_LSB & ~(1 << (2 + button));
    1364:	04000044 	movi	r16,1
    1368:	88800084 	addi	r2,r17,2
    136c:	8084983a 	sll	r2,r16,r2
	we_DEC(data_MSB, data);
    1370:	d9400117 	ldw	r5,4(sp)
    1374:	d9000017 	ldw	r4,0(sp)
	unsigned int data = data_LSB & ~(1 << (2 + button));
    1378:	0084303a 	nor	r2,zero,r2
	we_DEC(data_MSB, data);
    137c:	114a703a 	and	r5,r2,r5
    1380:	000106c0 	call	106c <we_DEC>
	re_DEC(&data_MSB, &data_LSB);
    1384:	d9400104 	addi	r5,sp,4
    1388:	d809883a 	mov	r4,sp
    138c:	00010a80 	call	10a8 <re_DEC>
	if ((data_LSB & 1 << button) != 0){
    1390:	844a983a 	sll	r5,r16,r17
    1394:	d8800117 	ldw	r2,4(sp)
    1398:	2884703a 	and	r2,r5,r2
    139c:	10000426 	beq	r2,zero,13b0 <state_KEY+0x98>
		we_DEC(data_MSB, 1 << button);
    13a0:	d9000017 	ldw	r4,0(sp)
    13a4:	000106c0 	call	106c <we_DEC>
		return 1;
    13a8:	00800044 	movi	r2,1
    13ac:	003fe406 	br	1340 <state_KEY+0x28>
	return 0;
    13b0:	0005883a 	mov	r2,zero
    13b4:	003fe206 	br	1340 <state_KEY+0x28>

000013b8 <interrupt_handler>:

void interrupt_handler (void* context){

	if (callback_button0 != NULL){
    13b8:	d0a02a17 	ldw	r2,-32600(gp)
void interrupt_handler (void* context){
    13bc:	deffff04 	addi	sp,sp,-4
    13c0:	dfc00015 	stw	ra,0(sp)
	if (callback_button0 != NULL){
    13c4:	10000426 	beq	r2,zero,13d8 <interrupt_handler+0x20>
		callback_button0();
    13c8:	103ee83a 	callr	r2
		edge_KEY(0, edge0);
    13cc:	d1602917 	ldw	r5,-32604(gp)
    13d0:	0009883a 	mov	r4,zero
    13d4:	00010f80 	call	10f8 <edge_KEY>
	}
	if (callback_button1 != NULL){
    13d8:	d0a02817 	ldw	r2,-32608(gp)
    13dc:	10000426 	beq	r2,zero,13f0 <interrupt_handler+0x38>
		callback_button1();
    13e0:	103ee83a 	callr	r2
		edge_KEY(1, edge1);
    13e4:	d1602717 	ldw	r5,-32612(gp)
    13e8:	01000044 	movi	r4,1
    13ec:	00010f80 	call	10f8 <edge_KEY>
	}
	if (callback_button2 != NULL){
    13f0:	d0a02617 	ldw	r2,-32616(gp)
    13f4:	10000426 	beq	r2,zero,1408 <interrupt_handler+0x50>
		callback_button2();
    13f8:	103ee83a 	callr	r2
		edge_KEY(2, edge2);
    13fc:	d1602517 	ldw	r5,-32620(gp)
    1400:	01000084 	movi	r4,2
    1404:	00010f80 	call	10f8 <edge_KEY>
	}
	if (callback_button3 != NULL){
    1408:	d0a02417 	ldw	r2,-32624(gp)
    140c:	10000426 	beq	r2,zero,1420 <interrupt_handler+0x68>
		callback_button3();
    1410:	103ee83a 	callr	r2
		edge_KEY(3, edge3);
    1414:	d1602317 	ldw	r5,-32628(gp)
    1418:	010000c4 	movi	r4,3
    141c:	00010f80 	call	10f8 <edge_KEY>
	}
	if (callback_button4 != NULL){
    1420:	d0a02217 	ldw	r2,-32632(gp)
    1424:	10000426 	beq	r2,zero,1438 <interrupt_handler+0x80>
		callback_button4();
    1428:	103ee83a 	callr	r2
		edge_KEY(4, edge4);
    142c:	d1602117 	ldw	r5,-32636(gp)
    1430:	01000104 	movi	r4,4
    1434:	00010f80 	call	10f8 <edge_KEY>
	}
	if (callback_button5 != NULL){
    1438:	d0a02017 	ldw	r2,-32640(gp)
    143c:	10000426 	beq	r2,zero,1450 <interrupt_handler+0x98>
		callback_button5();
    1440:	103ee83a 	callr	r2
		edge_KEY(5, edge5);
    1444:	d1601f17 	ldw	r5,-32644(gp)
    1448:	01000144 	movi	r4,5
    144c:	00010f80 	call	10f8 <edge_KEY>
	}
	if (callback_button6 != NULL){
    1450:	d0a01e17 	ldw	r2,-32648(gp)
    1454:	10000426 	beq	r2,zero,1468 <interrupt_handler+0xb0>
		callback_button6();
    1458:	103ee83a 	callr	r2
		edge_KEY(6, edge6);
    145c:	d1601d17 	ldw	r5,-32652(gp)
    1460:	01000184 	movi	r4,6
    1464:	00010f80 	call	10f8 <edge_KEY>
	}
	if (callback_button7 != NULL){
    1468:	d0a01c17 	ldw	r2,-32656(gp)
    146c:	10000626 	beq	r2,zero,1488 <interrupt_handler+0xd0>
		callback_button7();
    1470:	103ee83a 	callr	r2
		edge_KEY(7, edge7);
    1474:	d1601b17 	ldw	r5,-32660(gp)
    1478:	010001c4 	movi	r4,7
	}

}
    147c:	dfc00017 	ldw	ra,0(sp)
    1480:	dec00104 	addi	sp,sp,4
		edge_KEY(7, edge7);
    1484:	00010f81 	jmpi	10f8 <edge_KEY>
}
    1488:	dfc00017 	ldw	ra,0(sp)
    148c:	dec00104 	addi	sp,sp,4
    1490:	f800283a 	ret

00001494 <set_KEY_callback>:

void set_KEY_callback(void (*callback)(), int button, int edge){

	if (edge < 0 || edge > 2) {
    1494:	308000f0 	cmpltui	r2,r6,3
    1498:	1000031e 	bne	r2,zero,14a8 <set_KEY_callback+0x14>
		printf("ExceptionKEY: Edge invalido\n");
    149c:	01000034 	movhi	r4,0
    14a0:	21073804 	addi	r4,r4,7392
		we_MIRQ(data_MSB, data);
		callback_button7 = callback;
		edge7 = edge;
		break;
	default:
		printf("ExceptionKEY: Botao invalido\n");
    14a4:	00017941 	jmpi	1794 <puts>
void set_KEY_callback(void (*callback)(), int button, int edge){
    14a8:	defffa04 	addi	sp,sp,-24
    14ac:	dc800415 	stw	r18,16(sp)
    14b0:	dc400315 	stw	r17,12(sp)
    14b4:	2825883a 	mov	r18,r5
    14b8:	2023883a 	mov	r17,r4
	re_MIRQ(&data_MSB, &data_LSB);
    14bc:	d9400104 	addi	r5,sp,4
    14c0:	d809883a 	mov	r4,sp
void set_KEY_callback(void (*callback)(), int button, int edge){
    14c4:	dc000215 	stw	r16,8(sp)
    14c8:	dfc00515 	stw	ra,20(sp)
    14cc:	3021883a 	mov	r16,r6
	re_MIRQ(&data_MSB, &data_LSB);
    14d0:	00010dc0 	call	10dc <re_MIRQ>
	data = 1 << button | data_LSB;
    14d4:	01000044 	movi	r4,1
    14d8:	d8800117 	ldw	r2,4(sp)
    14dc:	2488983a 	sll	r4,r4,r18
	data = ~(3 << (12 + 2 * button)) & data;
    14e0:	00c000c4 	movi	r3,3
	data = 1 << button | data_LSB;
    14e4:	2088b03a 	or	r4,r4,r2
	data = ~(3 << (12 + 2 * button)) & data;
    14e8:	90800184 	addi	r2,r18,6
    14ec:	1004907a 	slli	r2,r2,1
    14f0:	1886983a 	sll	r3,r3,r2
	data = edge << (12 + 2 * button) | data;
    14f4:	8084983a 	sll	r2,r16,r2
	data = ~(3 << (12 + 2 * button)) & data;
    14f8:	00c6303a 	nor	r3,zero,r3
    14fc:	1906703a 	and	r3,r3,r4
	data = edge << (12 + 2 * button) | data;
    1500:	10cab03a 	or	r5,r2,r3
	switch (button){
    1504:	90800228 	cmpgeui	r2,r18,8
    1508:	1000331e 	bne	r2,zero,15d8 <set_KEY_callback+0x144>
    150c:	902490ba 	slli	r18,r18,2
    1510:	00800034 	movhi	r2,0
		we_MIRQ(data_MSB, data);
    1514:	d9000017 	ldw	r4,0(sp)
	switch (button){
    1518:	9085883a 	add	r2,r18,r2
    151c:	10854917 	ldw	r2,5412(r2)
    1520:	1000683a 	jmp	r2
    1524:	00001544 	movi	zero,85
    1528:	00001568 	cmpgeui	zero,zero,85
    152c:	00001578 	rdprs	zero,zero,85
    1530:	00001588 	cmpgei	zero,zero,86
    1534:	00001598 	cmpnei	zero,zero,86
    1538:	000015a8 	cmpgeui	zero,zero,86
    153c:	000015b8 	rdprs	zero,zero,86
    1540:	000015c8 	cmpgei	zero,zero,87
		we_MIRQ(data_MSB, data);
    1544:	00010940 	call	1094 <we_MIRQ>
		callback_button0 = callback;
    1548:	d4602a15 	stw	r17,-32600(gp)
		edge0 = edge;
    154c:	d4202915 	stw	r16,-32604(gp)
		break;
	}

	//alt_ic_isr_register(0, 1, (void *)interrupt_handler, NULL, 0x0);

}
    1550:	dfc00517 	ldw	ra,20(sp)
    1554:	dc800417 	ldw	r18,16(sp)
    1558:	dc400317 	ldw	r17,12(sp)
    155c:	dc000217 	ldw	r16,8(sp)
    1560:	dec00604 	addi	sp,sp,24
    1564:	f800283a 	ret
		we_MIRQ(data_MSB, data);
    1568:	00010940 	call	1094 <we_MIRQ>
		callback_button1 = callback;
    156c:	d4602815 	stw	r17,-32608(gp)
		edge1 = edge;
    1570:	d4202715 	stw	r16,-32612(gp)
		break;
    1574:	003ff606 	br	1550 <set_KEY_callback+0xbc>
		we_MIRQ(data_MSB, data);
    1578:	00010940 	call	1094 <we_MIRQ>
		callback_button2 = callback;
    157c:	d4602615 	stw	r17,-32616(gp)
		edge2 = edge;
    1580:	d4202515 	stw	r16,-32620(gp)
		break;
    1584:	003ff206 	br	1550 <set_KEY_callback+0xbc>
		we_MIRQ(data_MSB, data);
    1588:	00010940 	call	1094 <we_MIRQ>
		callback_button3 = callback;
    158c:	d4602415 	stw	r17,-32624(gp)
		edge3 = edge;
    1590:	d4202315 	stw	r16,-32628(gp)
		break;
    1594:	003fee06 	br	1550 <set_KEY_callback+0xbc>
		we_MIRQ(data_MSB, data);
    1598:	00010940 	call	1094 <we_MIRQ>
		callback_button4 = callback;
    159c:	d4602215 	stw	r17,-32632(gp)
		edge4 = edge;
    15a0:	d4202115 	stw	r16,-32636(gp)
		break;
    15a4:	003fea06 	br	1550 <set_KEY_callback+0xbc>
		we_MIRQ(data_MSB, data);
    15a8:	00010940 	call	1094 <we_MIRQ>
		callback_button5 = callback;
    15ac:	d4602015 	stw	r17,-32640(gp)
		edge5 = edge;
    15b0:	d4201f15 	stw	r16,-32644(gp)
		break;
    15b4:	003fe606 	br	1550 <set_KEY_callback+0xbc>
		we_MIRQ(data_MSB, data);
    15b8:	00010940 	call	1094 <we_MIRQ>
		callback_button6 = callback;
    15bc:	d4601e15 	stw	r17,-32648(gp)
		edge6 = edge;
    15c0:	d4201d15 	stw	r16,-32652(gp)
		break;
    15c4:	003fe206 	br	1550 <set_KEY_callback+0xbc>
		we_MIRQ(data_MSB, data);
    15c8:	00010940 	call	1094 <we_MIRQ>
		callback_button7 = callback;
    15cc:	d4601c15 	stw	r17,-32656(gp)
		edge7 = edge;
    15d0:	d4201b15 	stw	r16,-32660(gp)
		break;
    15d4:	003fde06 	br	1550 <set_KEY_callback+0xbc>
		printf("ExceptionKEY: Botao invalido\n");
    15d8:	01000034 	movhi	r4,0
    15dc:	21073004 	addi	r4,r4,7360
}
    15e0:	dfc00517 	ldw	ra,20(sp)
    15e4:	dc800417 	ldw	r18,16(sp)
    15e8:	dc400317 	ldw	r17,12(sp)
    15ec:	dc000217 	ldw	r16,8(sp)
    15f0:	dec00604 	addi	sp,sp,24
    15f4:	003fab06 	br	14a4 <set_KEY_callback+0x10>

000015f8 <as0>:
#include "KEY.h"
#include "io.h"


void as0() {
	printf("Interrupo 0\n");
    15f8:	01000034 	movhi	r4,0
    15fc:	21073f04 	addi	r4,r4,7420
    1600:	00017941 	jmpi	1794 <puts>

00001604 <as1>:
}
void as1() {
	printf("Interrupo 1\n");
    1604:	01000034 	movhi	r4,0
    1608:	21074204 	addi	r4,r4,7432
    160c:	00017941 	jmpi	1794 <puts>

00001610 <as2>:
}
void as2() {
	printf("Interrupo 2\n");
    1610:	01000034 	movhi	r4,0
    1614:	21074504 	addi	r4,r4,7444
    1618:	00017941 	jmpi	1794 <puts>

0000161c <as3>:
}
void as3() {
	printf("Interrupo 3\n");
    161c:	01000034 	movhi	r4,0
    1620:	21074804 	addi	r4,r4,7456
    1624:	00017941 	jmpi	1794 <puts>

00001628 <as4>:
}
void as4() {
	printf("Interrupo 4\n");
    1628:	01000034 	movhi	r4,0
    162c:	21074b04 	addi	r4,r4,7468
    1630:	00017941 	jmpi	1794 <puts>

00001634 <as5>:
}
void as5() {
	printf("Interrupo 5\n");
    1634:	01000034 	movhi	r4,0
    1638:	21074e04 	addi	r4,r4,7480
    163c:	00017941 	jmpi	1794 <puts>

00001640 <as6>:
}
void as6() {
	printf("Interrupo 6\n");
    1640:	01000034 	movhi	r4,0
    1644:	21075104 	addi	r4,r4,7492
    1648:	00017941 	jmpi	1794 <puts>

0000164c <as7>:
}
void as7() {
	printf("Interrupo 7 \n");
    164c:	01000034 	movhi	r4,0
    1650:	21075404 	addi	r4,r4,7504
    1654:	00017941 	jmpi	1794 <puts>

00001658 <main>:
}

int main() {
	printf("Teste de Boto\n");
    1658:	01000034 	movhi	r4,0
int main() {
    165c:	deffff04 	addi	sp,sp,-4
	printf("Teste de Boto\n");
    1660:	21075804 	addi	r4,r4,7520
int main() {
    1664:	dfc00015 	stw	ra,0(sp)
	printf("Teste de Boto\n");
    1668:	00017940 	call	1794 <puts>
	initialize_joystick();
    166c:	00012600 	call	1260 <initialize_joystick>
	set_KEY_callback((void *)as0, 0,0);
    1670:	01000034 	movhi	r4,0
    1674:	000d883a 	mov	r6,zero
    1678:	000b883a 	mov	r5,zero
    167c:	21057e04 	addi	r4,r4,5624
    1680:	00014940 	call	1494 <set_KEY_callback>
	set_KEY_callback((void *)as1, 1,0);
    1684:	01000034 	movhi	r4,0
    1688:	000d883a 	mov	r6,zero
    168c:	01400044 	movi	r5,1
    1690:	21058104 	addi	r4,r4,5636
    1694:	00014940 	call	1494 <set_KEY_callback>
	set_KEY_callback((void *)as2, 2,0);
    1698:	01000034 	movhi	r4,0
    169c:	000d883a 	mov	r6,zero
    16a0:	01400084 	movi	r5,2
    16a4:	21058404 	addi	r4,r4,5648
    16a8:	00014940 	call	1494 <set_KEY_callback>
	set_KEY_callback((void *)as3, 3,0);
    16ac:	01000034 	movhi	r4,0
    16b0:	000d883a 	mov	r6,zero
    16b4:	014000c4 	movi	r5,3
    16b8:	21058704 	addi	r4,r4,5660
    16bc:	00014940 	call	1494 <set_KEY_callback>
	set_KEY_callback((void *)as4, 4,0);
    16c0:	01000034 	movhi	r4,0
    16c4:	000d883a 	mov	r6,zero
    16c8:	01400104 	movi	r5,4
    16cc:	21058a04 	addi	r4,r4,5672
    16d0:	00014940 	call	1494 <set_KEY_callback>
	set_KEY_callback((void *)as5, 5,0);
    16d4:	01000034 	movhi	r4,0
    16d8:	000d883a 	mov	r6,zero
    16dc:	01400144 	movi	r5,5
    16e0:	21058d04 	addi	r4,r4,5684
    16e4:	00014940 	call	1494 <set_KEY_callback>
	set_KEY_callback((void *)as6, 6,0);
    16e8:	01000034 	movhi	r4,0
    16ec:	000d883a 	mov	r6,zero
    16f0:	01400184 	movi	r5,6
    16f4:	21059004 	addi	r4,r4,5696
    16f8:	00014940 	call	1494 <set_KEY_callback>
	set_KEY_callback((void *)as7, 7,0);
    16fc:	01000034 	movhi	r4,0
    1700:	000d883a 	mov	r6,zero
    1704:	014001c4 	movi	r5,7
    1708:	21059304 	addi	r4,r4,5708
    170c:	00014940 	call	1494 <set_KEY_callback>

	while (1){
    1710:	003fff06 	br	1710 <main+0xb8>

00001714 <_puts_r>:
    1714:	defffd04 	addi	sp,sp,-12
    1718:	dc000015 	stw	r16,0(sp)
    171c:	2021883a 	mov	r16,r4
    1720:	2809883a 	mov	r4,r5
    1724:	dfc00215 	stw	ra,8(sp)
    1728:	dc400115 	stw	r17,4(sp)
    172c:	2823883a 	mov	r17,r5
    1730:	00017a40 	call	17a4 <strlen>
    1734:	81400217 	ldw	r5,8(r16)
    1738:	00c00034 	movhi	r3,0
    173c:	18c5f004 	addi	r3,r3,6080
    1740:	28c00115 	stw	r3,4(r5)
    1744:	100f883a 	mov	r7,r2
    1748:	880d883a 	mov	r6,r17
    174c:	8009883a 	mov	r4,r16
    1750:	00017c00 	call	17c0 <__sfvwrite_small_dev>
    1754:	10ffffe0 	cmpeqi	r3,r2,-1
    1758:	1800091e 	bne	r3,zero,1780 <_puts_r+0x6c>
    175c:	81400217 	ldw	r5,8(r16)
    1760:	01800034 	movhi	r6,0
    1764:	01c00044 	movi	r7,1
    1768:	28800117 	ldw	r2,4(r5)
    176c:	31875c04 	addi	r6,r6,7536
    1770:	8009883a 	mov	r4,r16
    1774:	103ee83a 	callr	r2
    1778:	10bfffe0 	cmpeqi	r2,r2,-1
    177c:	0085c83a 	sub	r2,zero,r2
    1780:	dfc00217 	ldw	ra,8(sp)
    1784:	dc400117 	ldw	r17,4(sp)
    1788:	dc000017 	ldw	r16,0(sp)
    178c:	dec00304 	addi	sp,sp,12
    1790:	f800283a 	ret

00001794 <puts>:
    1794:	00800034 	movhi	r2,0
    1798:	200b883a 	mov	r5,r4
    179c:	11077217 	ldw	r4,7624(r2)
    17a0:	00017141 	jmpi	1714 <_puts_r>

000017a4 <strlen>:
    17a4:	2005883a 	mov	r2,r4
    17a8:	10c00007 	ldb	r3,0(r2)
    17ac:	1800021e 	bne	r3,zero,17b8 <strlen+0x14>
    17b0:	1105c83a 	sub	r2,r2,r4
    17b4:	f800283a 	ret
    17b8:	10800044 	addi	r2,r2,1
    17bc:	003ffa06 	br	17a8 <strlen+0x4>

000017c0 <__sfvwrite_small_dev>:
    17c0:	2880000b 	ldhu	r2,0(r5)
    17c4:	1080020c 	andi	r2,r2,8
    17c8:	10002526 	beq	r2,zero,1860 <__sfvwrite_small_dev+0xa0>
    17cc:	2880008f 	ldh	r2,2(r5)
    17d0:	defffb04 	addi	sp,sp,-20
    17d4:	dcc00315 	stw	r19,12(sp)
    17d8:	dc800215 	stw	r18,8(sp)
    17dc:	dc400115 	stw	r17,4(sp)
    17e0:	dc000015 	stw	r16,0(sp)
    17e4:	dfc00415 	stw	ra,16(sp)
    17e8:	2027883a 	mov	r19,r4
    17ec:	2821883a 	mov	r16,r5
    17f0:	3025883a 	mov	r18,r6
    17f4:	3823883a 	mov	r17,r7
    17f8:	1000100e 	bge	r2,zero,183c <__sfvwrite_small_dev+0x7c>
    17fc:	8080000b 	ldhu	r2,0(r16)
    1800:	10801014 	ori	r2,r2,64
    1804:	8080000d 	sth	r2,0(r16)
    1808:	00bfffc4 	movi	r2,-1
    180c:	00000d06 	br	1844 <__sfvwrite_small_dev+0x84>
    1810:	88810050 	cmplti	r2,r17,1025
    1814:	880f883a 	mov	r7,r17
    1818:	1000011e 	bne	r2,zero,1820 <__sfvwrite_small_dev+0x60>
    181c:	01c10004 	movi	r7,1024
    1820:	8140008f 	ldh	r5,2(r16)
    1824:	900d883a 	mov	r6,r18
    1828:	9809883a 	mov	r4,r19
    182c:	00018680 	call	1868 <_write_r>
    1830:	00bff20e 	bge	zero,r2,17fc <__sfvwrite_small_dev+0x3c>
    1834:	88a3c83a 	sub	r17,r17,r2
    1838:	90a5883a 	add	r18,r18,r2
    183c:	047ff416 	blt	zero,r17,1810 <__sfvwrite_small_dev+0x50>
    1840:	0005883a 	mov	r2,zero
    1844:	dfc00417 	ldw	ra,16(sp)
    1848:	dcc00317 	ldw	r19,12(sp)
    184c:	dc800217 	ldw	r18,8(sp)
    1850:	dc400117 	ldw	r17,4(sp)
    1854:	dc000017 	ldw	r16,0(sp)
    1858:	dec00504 	addi	sp,sp,20
    185c:	f800283a 	ret
    1860:	00bfffc4 	movi	r2,-1
    1864:	f800283a 	ret

00001868 <_write_r>:
    1868:	defffe04 	addi	sp,sp,-8
    186c:	dc000015 	stw	r16,0(sp)
    1870:	00800034 	movhi	r2,0
    1874:	2021883a 	mov	r16,r4
    1878:	2809883a 	mov	r4,r5
    187c:	300b883a 	mov	r5,r6
    1880:	380d883a 	mov	r6,r7
    1884:	dfc00115 	stw	ra,4(sp)
    1888:	10079d15 	stw	zero,7796(r2)
    188c:	000196c0 	call	196c <write>
    1890:	10ffffd8 	cmpnei	r3,r2,-1
    1894:	1800041e 	bne	r3,zero,18a8 <_write_r+0x40>
    1898:	00c00034 	movhi	r3,0
    189c:	18c79d17 	ldw	r3,7796(r3)
    18a0:	18000126 	beq	r3,zero,18a8 <_write_r+0x40>
    18a4:	80c00015 	stw	r3,0(r16)
    18a8:	dfc00117 	ldw	ra,4(sp)
    18ac:	dc000017 	ldw	r16,0(sp)
    18b0:	dec00204 	addi	sp,sp,8
    18b4:	f800283a 	ret

000018b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    18b8:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    18bc:	01000034 	movhi	r4,0
    18c0:	01400034 	movhi	r5,0
    18c4:	dfc00015 	stw	ra,0(sp)
    18c8:	21075d04 	addi	r4,r4,7540
    18cc:	29477504 	addi	r5,r5,7636
    18d0:	21400426 	beq	r4,r5,18e4 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    18d4:	01800034 	movhi	r6,0
    18d8:	31877504 	addi	r6,r6,7636
    18dc:	310dc83a 	sub	r6,r6,r4
    18e0:	0001abc0 	call	1abc <memcpy>
  if (to != from)
    18e4:	01000034 	movhi	r4,0
    18e8:	01400034 	movhi	r5,0
    18ec:	21040804 	addi	r4,r4,4128
    18f0:	29440804 	addi	r5,r5,4128
    18f4:	21400426 	beq	r4,r5,1908 <alt_load+0x50>
      *to++ = *from++;
    18f8:	01800034 	movhi	r6,0
    18fc:	31840804 	addi	r6,r6,4128
    1900:	310dc83a 	sub	r6,r6,r4
    1904:	0001abc0 	call	1abc <memcpy>
  if (to != from)
    1908:	01000034 	movhi	r4,0
    190c:	01400034 	movhi	r5,0
    1910:	21073004 	addi	r4,r4,7360
    1914:	29473004 	addi	r5,r5,7360
    1918:	21400426 	beq	r4,r5,192c <alt_load+0x74>
      *to++ = *from++;
    191c:	01800034 	movhi	r6,0
    1920:	31875d04 	addi	r6,r6,7540
    1924:	310dc83a 	sub	r6,r6,r4
    1928:	0001abc0 	call	1abc <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    192c:	0001aac0 	call	1aac <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1930:	dfc00017 	ldw	ra,0(sp)
    1934:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    1938:	0001ab01 	jmpi	1ab0 <alt_icache_flush_all>

0000193c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    193c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1940:	0009883a 	mov	r4,zero
{
    1944:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    1948:	00019c80 	call	19c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    194c:	00019e80 	call	19e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1950:	d1a02c17 	ldw	r6,-32592(gp)
    1954:	d1602d17 	ldw	r5,-32588(gp)
    1958:	d1202e17 	ldw	r4,-32584(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    195c:	dfc00017 	ldw	ra,0(sp)
    1960:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    1964:	00016581 	jmpi	1658 <main>

00001968 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    1968:	0001a1c1 	jmpi	1a1c <alt_busy_sleep>

0000196c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    196c:	213fffc4 	addi	r4,r4,-1
    1970:	210000a8 	cmpgeui	r4,r4,2
    1974:	2000041e 	bne	r4,zero,1988 <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    1978:	01000034 	movhi	r4,0
    197c:	000f883a 	mov	r7,zero
    1980:	21077304 	addi	r4,r4,7628
    1984:	00019ec1 	jmpi	19ec <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1988:	d0a00217 	ldw	r2,-32760(gp)
    198c:	10000926 	beq	r2,zero,19b4 <write+0x48>
{
    1990:	deffff04 	addi	sp,sp,-4
    1994:	dfc00015 	stw	ra,0(sp)
    1998:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    199c:	00c01444 	movi	r3,81
    19a0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    19a4:	00bfffc4 	movi	r2,-1
    19a8:	dfc00017 	ldw	ra,0(sp)
    19ac:	dec00104 	addi	sp,sp,4
    19b0:	f800283a 	ret
    19b4:	d0a02b04 	addi	r2,gp,-32596
        ALT_ERRNO = EBADFD;
    19b8:	00c01444 	movi	r3,81
    19bc:	10c00015 	stw	r3,0(r2)
}
    19c0:	00bfffc4 	movi	r2,-1
    19c4:	f800283a 	ret

000019c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    19c8:	deffff04 	addi	sp,sp,-4
    19cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    19d0:	0001ab40 	call	1ab4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    19d4:	00800044 	movi	r2,1
    19d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    19dc:	dfc00017 	ldw	ra,0(sp)
    19e0:	dec00104 	addi	sp,sp,4
    19e4:	f800283a 	ret

000019e8 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    19e8:	f800283a 	ret

000019ec <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    19ec:	20c00017 	ldw	r3,0(r4)
{
    19f0:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
    19f4:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    19f8:	01bfffd4 	movui	r6,65535
  while (ptr < end)
    19fc:	29000136 	bltu	r5,r4,1a04 <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    1a00:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1a04:	19c00137 	ldwio	r7,4(r3)
    1a08:	31fffc2e 	bgeu	r6,r7,19fc <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1a0c:	29c00007 	ldb	r7,0(r5)
    1a10:	29400044 	addi	r5,r5,1
    1a14:	19c00035 	stwio	r7,0(r3)
    1a18:	003ff806 	br	19fc <altera_avalon_jtag_uart_write+0x10>

00001a1c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1a1c:	defffe04 	addi	sp,sp,-8
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1a20:	008666b4 	movhi	r2,6554
{
    1a24:	dc000015 	stw	r16,0(sp)
    1a28:	dfc00115 	stw	ra,4(sp)
  if (big_loops)
    1a2c:	10a66604 	addi	r2,r2,-26216
{
    1a30:	2021883a 	mov	r16,r4
  if (big_loops)
    1a34:	1100182e 	bgeu	r2,r4,1a98 <alt_busy_sleep+0x7c>
  big_loops = us / (INT_MAX/
    1a38:	014666b4 	movhi	r5,6554
    1a3c:	29666644 	addi	r5,r5,-26215
    1a40:	0001bd80 	call	1bd8 <__udivsi3>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1a44:	00e00034 	movhi	r3,32768
  big_loops = us / (INT_MAX/
    1a48:	1009883a 	mov	r4,r2
      __asm__ volatile (
    1a4c:	18ffffc4 	addi	r3,r3,-1
    for(i=0;i<big_loops;i++)
    1a50:	0005883a 	mov	r2,zero
      __asm__ volatile (
    1a54:	18ffffc4 	addi	r3,r3,-1
    1a58:	183ffe1e 	bne	r3,zero,1a54 <alt_busy_sleep+0x38>
    for(i=0;i<big_loops;i++)
    1a5c:	10800044 	addi	r2,r2,1
    1a60:	113ffc16 	blt	r2,r4,1a54 <alt_busy_sleep+0x38>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1a64:	017999b4 	movhi	r5,58982
    1a68:	295999c4 	addi	r5,r5,26215
    1a6c:	0001c980 	call	1c98 <__mulsi3>
    1a70:	1405883a 	add	r2,r2,r16
    1a74:	100690ba 	slli	r3,r2,2
    1a78:	1885883a 	add	r2,r3,r2
    __asm__ volatile (
    1a7c:	10bfffc4 	addi	r2,r2,-1
    1a80:	103ffe1e 	bne	r2,zero,1a7c <alt_busy_sleep+0x60>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    1a84:	0005883a 	mov	r2,zero
    1a88:	dfc00117 	ldw	ra,4(sp)
    1a8c:	dc000017 	ldw	r16,0(sp)
    1a90:	dec00204 	addi	sp,sp,8
    1a94:	f800283a 	ret
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1a98:	200490ba 	slli	r2,r4,2
    1a9c:	1105883a 	add	r2,r2,r4
    __asm__ volatile (
    1aa0:	10bfffc4 	addi	r2,r2,-1
    1aa4:	00bffe16 	blt	zero,r2,1aa0 <alt_busy_sleep+0x84>
    1aa8:	003ff606 	br	1a84 <alt_busy_sleep+0x68>

00001aac <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1aac:	f800283a 	ret

00001ab0 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    1ab0:	f800283a 	ret

00001ab4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1ab4:	000170fa 	wrctl	ienable,zero
}
    1ab8:	f800283a 	ret

00001abc <memcpy>:
    1abc:	2005883a 	mov	r2,r4
    1ac0:	0007883a 	mov	r3,zero
    1ac4:	30c0011e 	bne	r6,r3,1acc <memcpy+0x10>
    1ac8:	f800283a 	ret
    1acc:	28cf883a 	add	r7,r5,r3
    1ad0:	39c00003 	ldbu	r7,0(r7)
    1ad4:	10c9883a 	add	r4,r2,r3
    1ad8:	18c00044 	addi	r3,r3,1
    1adc:	21c00005 	stb	r7,0(r4)
    1ae0:	003ff806 	br	1ac4 <memcpy+0x8>

00001ae4 <__divsi3>:
    1ae4:	20001a16 	blt	r4,zero,1b50 <__divsi3+0x6c>
    1ae8:	000f883a 	mov	r7,zero
    1aec:	2800020e 	bge	r5,zero,1af8 <__divsi3+0x14>
    1af0:	014bc83a 	sub	r5,zero,r5
    1af4:	39c0005c 	xori	r7,r7,1
    1af8:	200d883a 	mov	r6,r4
    1afc:	00c00044 	movi	r3,1
    1b00:	2900092e 	bgeu	r5,r4,1b28 <__divsi3+0x44>
    1b04:	00800804 	movi	r2,32
    1b08:	00c00044 	movi	r3,1
    1b0c:	00000106 	br	1b14 <__divsi3+0x30>
    1b10:	10001226 	beq	r2,zero,1b5c <__divsi3+0x78>
    1b14:	294b883a 	add	r5,r5,r5
    1b18:	10bfffc4 	addi	r2,r2,-1
    1b1c:	18c7883a 	add	r3,r3,r3
    1b20:	293ffb36 	bltu	r5,r4,1b10 <__divsi3+0x2c>
    1b24:	18000d26 	beq	r3,zero,1b5c <__divsi3+0x78>
    1b28:	0005883a 	mov	r2,zero
    1b2c:	31400236 	bltu	r6,r5,1b38 <__divsi3+0x54>
    1b30:	314dc83a 	sub	r6,r6,r5
    1b34:	10c4b03a 	or	r2,r2,r3
    1b38:	1806d07a 	srli	r3,r3,1
    1b3c:	280ad07a 	srli	r5,r5,1
    1b40:	183ffa1e 	bne	r3,zero,1b2c <__divsi3+0x48>
    1b44:	38000126 	beq	r7,zero,1b4c <__divsi3+0x68>
    1b48:	0085c83a 	sub	r2,zero,r2
    1b4c:	f800283a 	ret
    1b50:	0109c83a 	sub	r4,zero,r4
    1b54:	01c00044 	movi	r7,1
    1b58:	003fe406 	br	1aec <__divsi3+0x8>
    1b5c:	0005883a 	mov	r2,zero
    1b60:	003ff806 	br	1b44 <__divsi3+0x60>

00001b64 <__modsi3>:
    1b64:	20001716 	blt	r4,zero,1bc4 <__modsi3+0x60>
    1b68:	000f883a 	mov	r7,zero
    1b6c:	2005883a 	mov	r2,r4
    1b70:	2800010e 	bge	r5,zero,1b78 <__modsi3+0x14>
    1b74:	014bc83a 	sub	r5,zero,r5
    1b78:	00c00044 	movi	r3,1
    1b7c:	2900092e 	bgeu	r5,r4,1ba4 <__modsi3+0x40>
    1b80:	01800804 	movi	r6,32
    1b84:	00c00044 	movi	r3,1
    1b88:	00000106 	br	1b90 <__modsi3+0x2c>
    1b8c:	30001026 	beq	r6,zero,1bd0 <__modsi3+0x6c>
    1b90:	294b883a 	add	r5,r5,r5
    1b94:	31bfffc4 	addi	r6,r6,-1
    1b98:	18c7883a 	add	r3,r3,r3
    1b9c:	293ffb36 	bltu	r5,r4,1b8c <__modsi3+0x28>
    1ba0:	18000b26 	beq	r3,zero,1bd0 <__modsi3+0x6c>
    1ba4:	1806d07a 	srli	r3,r3,1
    1ba8:	11400136 	bltu	r2,r5,1bb0 <__modsi3+0x4c>
    1bac:	1145c83a 	sub	r2,r2,r5
    1bb0:	280ad07a 	srli	r5,r5,1
    1bb4:	183ffb1e 	bne	r3,zero,1ba4 <__modsi3+0x40>
    1bb8:	38000126 	beq	r7,zero,1bc0 <__modsi3+0x5c>
    1bbc:	0085c83a 	sub	r2,zero,r2
    1bc0:	f800283a 	ret
    1bc4:	0109c83a 	sub	r4,zero,r4
    1bc8:	01c00044 	movi	r7,1
    1bcc:	003fe706 	br	1b6c <__modsi3+0x8>
    1bd0:	2005883a 	mov	r2,r4
    1bd4:	003ff806 	br	1bb8 <__modsi3+0x54>

00001bd8 <__udivsi3>:
    1bd8:	200d883a 	mov	r6,r4
    1bdc:	2900152e 	bgeu	r5,r4,1c34 <__udivsi3+0x5c>
    1be0:	28001416 	blt	r5,zero,1c34 <__udivsi3+0x5c>
    1be4:	00800804 	movi	r2,32
    1be8:	00c00044 	movi	r3,1
    1bec:	00000206 	br	1bf8 <__udivsi3+0x20>
    1bf0:	10000e26 	beq	r2,zero,1c2c <__udivsi3+0x54>
    1bf4:	28000416 	blt	r5,zero,1c08 <__udivsi3+0x30>
    1bf8:	294b883a 	add	r5,r5,r5
    1bfc:	10bfffc4 	addi	r2,r2,-1
    1c00:	18c7883a 	add	r3,r3,r3
    1c04:	293ffa36 	bltu	r5,r4,1bf0 <__udivsi3+0x18>
    1c08:	18000826 	beq	r3,zero,1c2c <__udivsi3+0x54>
    1c0c:	0005883a 	mov	r2,zero
    1c10:	31400236 	bltu	r6,r5,1c1c <__udivsi3+0x44>
    1c14:	314dc83a 	sub	r6,r6,r5
    1c18:	10c4b03a 	or	r2,r2,r3
    1c1c:	1806d07a 	srli	r3,r3,1
    1c20:	280ad07a 	srli	r5,r5,1
    1c24:	183ffa1e 	bne	r3,zero,1c10 <__udivsi3+0x38>
    1c28:	f800283a 	ret
    1c2c:	0005883a 	mov	r2,zero
    1c30:	f800283a 	ret
    1c34:	00c00044 	movi	r3,1
    1c38:	003ff406 	br	1c0c <__udivsi3+0x34>

00001c3c <__umodsi3>:
    1c3c:	2005883a 	mov	r2,r4
    1c40:	2900132e 	bgeu	r5,r4,1c90 <__umodsi3+0x54>
    1c44:	28001216 	blt	r5,zero,1c90 <__umodsi3+0x54>
    1c48:	01800804 	movi	r6,32
    1c4c:	00c00044 	movi	r3,1
    1c50:	00000206 	br	1c5c <__umodsi3+0x20>
    1c54:	30000c26 	beq	r6,zero,1c88 <__umodsi3+0x4c>
    1c58:	28000416 	blt	r5,zero,1c6c <__umodsi3+0x30>
    1c5c:	294b883a 	add	r5,r5,r5
    1c60:	31bfffc4 	addi	r6,r6,-1
    1c64:	18c7883a 	add	r3,r3,r3
    1c68:	293ffa36 	bltu	r5,r4,1c54 <__umodsi3+0x18>
    1c6c:	18000626 	beq	r3,zero,1c88 <__umodsi3+0x4c>
    1c70:	1806d07a 	srli	r3,r3,1
    1c74:	11400136 	bltu	r2,r5,1c7c <__umodsi3+0x40>
    1c78:	1145c83a 	sub	r2,r2,r5
    1c7c:	280ad07a 	srli	r5,r5,1
    1c80:	183ffb1e 	bne	r3,zero,1c70 <__umodsi3+0x34>
    1c84:	f800283a 	ret
    1c88:	2005883a 	mov	r2,r4
    1c8c:	f800283a 	ret
    1c90:	00c00044 	movi	r3,1
    1c94:	003ff606 	br	1c70 <__umodsi3+0x34>

00001c98 <__mulsi3>:
    1c98:	0005883a 	mov	r2,zero
    1c9c:	20000726 	beq	r4,zero,1cbc <__mulsi3+0x24>
    1ca0:	20c0004c 	andi	r3,r4,1
    1ca4:	2008d07a 	srli	r4,r4,1
    1ca8:	18000126 	beq	r3,zero,1cb0 <__mulsi3+0x18>
    1cac:	1145883a 	add	r2,r2,r5
    1cb0:	294b883a 	add	r5,r5,r5
    1cb4:	203ffa1e 	bne	r4,zero,1ca0 <__mulsi3+0x8>
    1cb8:	f800283a 	ret
    1cbc:	f800283a 	ret
