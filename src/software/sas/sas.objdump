
sas.elf:     file format elf32-littlenios2
sas.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008180

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000010c8 memsz 0x000010c8 flags r-x
    LOAD off    0x000020e8 vaddr 0x000090e8 paddr 0x000090f4 align 2**12
         filesz 0x0000000c memsz 0x0000000c flags rw-
    LOAD off    0x00000100 vaddr 0x00009100 paddr 0x00009100 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000f68  00008180  00008180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  000090e8  00009100  000020f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       0000000c  000090e8  000090f4  000020e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00009100  00009100  00002100  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00009228  00009228  000020f4  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002f8  00000000  00000000  00002128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00002f59  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000159a  00000000  00000000  00005379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00001928  00000000  00000000  00006913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000510  00000000  00000000  0000823c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001038  00000000  00000000  0000874c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  00009784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00009798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000012b0  00000000  00000000  00009808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001b9  00000000  00000000  0000aab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000868  00000000  00000000  0000ac71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  0000ca2a  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0000ca2d  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0000ca39  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0000ca3a  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0000ca3b  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0000ca3f  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0000ca43  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  0000ca47  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000b  00000000  00000000  0000ca52  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000b  00000000  00000000  0000ca5d  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000b  00000000  00000000  0000ca68  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 00000039  00000000  00000000  0000ca73  2**0
                  CONTENTS, READONLY
 31 .jdi          00005498  00000000  00000000  0000caac  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     0007de7d  00000000  00000000  00011f44  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008180 l    d  .text	00000000 .text
000090e8 l    d  .rodata	00000000 .rodata
000090e8 l    d  .rwdata	00000000 .rwdata
00009100 l    d  .bss	00000000 .bss
00009228 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
000081b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 joystick_io.c
000081bc l     F .text	00000010 interrupt
00009100 l     O .bss	00000004 callback_button
000081cc l     F .text	00000014 pulse_we
000081e0 l     F .text	00000058 config_pin_state
00008238 l     F .text	00000058 read_pin
00000000 l    df *ABS*	00000000 graphic_processor.c
00008480 l     F .text	00000038 sendInstruction
00000000 l    df *ABS*	00000000 new_asteroids_game.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 rand.c
0000910c l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00009124 g     O .bss	00000004 alt_instruction_exception_handler
0000903c g     F .text	0000002c alt_main
00009128 g     O .bss	00000100 alt_irq
000090f4 g       *ABS*	00000000 __flash_rwdata_start
00008728 g     F .text	0000004c collision
00009108 g     O .bss	00000004 points
000090b8 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
000083b8 g     F .text	00000064 peripheral_enable_callback
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000911c g     O .bss	00000004 alt_argv
000110e8 g       *ABS*	00000000 _gp
000090c0 g     F .text	00000028 memcpy
00008774 g     F .text	00000078 initialize_sprite_random
00009094 g     F .text	00000024 alt_exception_cause_generated_bad_addr
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008c64 g     F .text	00000064 .hidden __udivsi3
00009104 g     O .bss	00000004 state_placar
00009228 g       *ABS*	00000000 __bss_end
00008f50 g     F .text	00000068 alt_iic_isr_register
00008f38 g     F .text	00000018 alt_ic_irq_enabled
00009114 g     O .bss	00000004 alt_irq_active
000084f4 g     F .text	00000030 set_background_block
000080fc g     F .exceptions	00000060 alt_irq_handler
0000908c g     F .text	00000004 alt_dcache_flush_all
000090f4 g       *ABS*	00000000 __ram_rwdata_end
000090e8 g       *ABS*	00000000 __ram_rodata_end
000090f0 g     O .rwdata	00000004 jtag_uart_0
0000841c g     F .text	0000005c peripheral_disable_callback
00008cc8 g     F .text	0000005c .hidden __umodsi3
00009228 g       *ABS*	00000000 end
000090e8 g     O .rwdata	00000004 number_of_asteroids
0000815c g     F .exceptions	00000024 alt_instruction_exception_entry
0000f530 g       *ABS*	00000000 __alt_stack_pointer
00008314 g     F .text	00000084 initialize_joystick
00008180 g     F .text	0000003c _start
00008d38 g     F .text	00000060 rand
00009088 g     F .text	00000004 alt_sys_init
00008e9c g     F .text	00000028 .hidden __mulsi3
000090e8 g       *ABS*	00000000 __ram_rwdata_start
000090e8 g       *ABS*	00000000 __ram_rodata_start
00008398 g     F .text	00000020 close_joystick
00008290 g     F .text	00000040 read_KEY
00009228 g       *ABS*	00000000 __alt_stack_base
00009100 g       *ABS*	00000000 __bss_start
00008afc g     F .text	00000074 main
00009118 g     O .bss	00000004 alt_envp
00008984 g     F .text	00000178 atirar_sp
00008d24 g     F .text	00000014 srand
00008b70 g     F .text	00000080 .hidden __divsi3
000090e8 g       *ABS*	00000000 __flash_rodata_start
000084b8 g     F .text	00000024 set_sprite
00009068 g     F .text	00000020 alt_irq_init
0000887c g     F .text	00000108 collision_between_tiro_and_ast
00009120 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
00008478 g     F .text	00000008 set_callback
000084dc g     F .text	00000018 set_background_color
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008ec4 g     F .text	00000004 alt_ic_isr_register
000090f4 g       *ABS*	00000000 _edata
00009228 g       *ABS*	00000000 _end
00008180 g       *ABS*	00000000 __ram_exceptions_end
00008f00 g     F .text	00000038 alt_ic_irq_disable
000082d0 g     F .text	00000044 read_JOYSTICK
00008bf0 g     F .text	00000074 .hidden __modsi3
0000f530 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
00008524 g     F .text	00000204 increase_coordinate
0000800c g       .entry	00000000 _exit
00008d98 g     F .text	00000104 .hidden __muldi3
00009090 g     F .text	00000004 alt_icache_flush_all
000090ec g     O .rwdata	00000004 alt_priority_mask
00008ec8 g     F .text	00000038 alt_ic_irq_enable
000087ec g     F .text	00000090 increase_points
00008fb8 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08606014 	ori	at,at,33152
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
    8094:	e93fff04 	addi	r4,ea,-4
    8098:	000815c0 	call	815c <alt_instruction_exception_entry>
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>
    80a0:	ebffff04 	addi	r15,ea,-4
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defffe04 	addi	sp,sp,-8
    8100:	dfc00115 	stw	ra,4(sp)
    8104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    810c:	04000074 	movhi	r16,1
    8110:	84244a04 	addi	r16,r16,-28376
    i = 0;
    8114:	0005883a 	mov	r2,zero
    mask = 1;
    8118:	00c00044 	movi	r3,1
      if (active & mask)
    811c:	20ca703a 	and	r5,r4,r3
    8120:	28000b26 	beq	r5,zero,8150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
    8124:	100490fa 	slli	r2,r2,3
    8128:	8085883a 	add	r2,r16,r2
    812c:	10c00017 	ldw	r3,0(r2)
    8130:	11000117 	ldw	r4,4(r2)
    8134:	183ee83a 	callr	r3
    8138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    813c:	203ff51e 	bne	r4,zero,8114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    8140:	dfc00117 	ldw	ra,4(sp)
    8144:	dc000017 	ldw	r16,0(sp)
    8148:	dec00204 	addi	sp,sp,8
    814c:	f800283a 	ret
      mask <<= 1;
    8150:	1806907a 	slli	r3,r3,1
      i++;
    8154:	10800044 	addi	r2,r2,1
      if (active & mask)
    8158:	003ff006 	br	811c <alt_irq_handler+0x20>

0000815c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    815c:	d0a00f17 	ldw	r2,-32708(gp)
{
    8160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
    8164:	10000326 	beq	r2,zero,8174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    8168:	000d883a 	mov	r6,zero
    816c:	013fffc4 	movi	r4,-1
    8170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    8178:	0005883a 	mov	r2,zero
    817c:	f800283a 	ret

Disassembly of section .text:

00008180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8184:	defd4c14 	ori	sp,sp,62768
    movhi gp, %hi(_gp)
    8188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    818c:	d6843a14 	ori	gp,gp,4328
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8194:	10a44014 	ori	r2,r2,37120

    movhi r3, %hi(__bss_end)
    8198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    819c:	18e48a14 	ori	r3,r3,37416

    beq r2, r3, 1f
    81a0:	10c00326 	beq	r2,r3,81b0 <_start+0x30>

0:
    stw zero, (r2)
    81a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81ac:	10fffd36 	bltu	r2,r3,81a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81b0:	0008fb80 	call	8fb8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81b4:	000903c0 	call	903c <alt_main>

000081b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81b8:	003fff06 	br	81b8 <alt_after_alt_main>

000081bc <interrupt>:
	config_pin_state(direction, state);
	return read_pin(direction);
}

static void interrupt (void* context){
	if (callback_button != NULL){
    81bc:	d0a00617 	ldw	r2,-32744(gp)
    81c0:	10000126 	beq	r2,zero,81c8 <interrupt+0xc>
		callback_button();
    81c4:	1000683a 	jmp	r2
	}
}
    81c8:	f800283a 	ret

000081cc <pulse_we>:
	IOWR(WE_JOYSTICK_BASE,0, 1);
    81cc:	00c00044 	movi	r3,1
    81d0:	00800074 	movhi	r2,1
    81d4:	10c41835 	stwio	r3,4192(r2)
	IOWR(WE_JOYSTICK_BASE,0, 0);
    81d8:	10041835 	stwio	zero,4192(r2)
}
    81dc:	f800283a 	ret

000081e0 <config_pin_state>:
	IOWR(WE_JOYSTICK_LSB_BASE, 0, RCTL);
    81e0:	00c00144 	movi	r3,5
    81e4:	00800074 	movhi	r2,1
    81e8:	10c42035 	stwio	r3,4224(r2)
	*data_LSB = IORD(RD_JOYSTICK_LSB_BASE, 0);
    81ec:	10c42837 	ldwio	r3,4256(r2)
	*data_MSB = IORD(RD_JOYSTICK_MSB_BASE, 0);
    81f0:	11842437 	ldwio	r6,4240(r2)
	mask = data_MSB << 18 | data_LSB >> 14; // Pegar os bits de sele��o
    81f4:	1804d3ba 	srli	r2,r3,14
    81f8:	300c94ba 	slli	r6,r6,18
	mask = ~(3 << (2 * peripheral)) & mask; //limpar seletor de edge
    81fc:	2008907a 	slli	r4,r4,1
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WCTL);
    8200:	1806913a 	slli	r3,r3,4
	mask = data_MSB << 18 | data_LSB >> 14; // Pegar os bits de sele��o
    8204:	308cb03a 	or	r6,r6,r2
	mask = ~(3 << (2 * peripheral)) & mask; //limpar seletor de edge
    8208:	008000c4 	movi	r2,3
    820c:	1104983a 	sll	r2,r2,r4
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WCTL);
    8210:	18c00214 	ori	r3,r3,8
	mask = ~(3 << (2 * peripheral)) & mask; //limpar seletor de edge
    8214:	0084303a 	nor	r2,zero,r2
    8218:	1184703a 	and	r2,r2,r6
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WCTL);
    821c:	01800074 	movhi	r6,1
    8220:	30c42035 	stwio	r3,4224(r6)
	mask = (state << (2 * peripheral)) | mask;
    8224:	290a983a 	sll	r5,r5,r4
    8228:	288ab03a 	or	r5,r5,r2
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    822c:	00800074 	movhi	r2,1
    8230:	11441c35 	stwio	r5,4208(r2)
	pulse_we();
    8234:	00081cc1 	jmpi	81cc <pulse_we>

00008238 <read_pin>:
	IOWR(WE_JOYSTICK_LSB_BASE, 0, RDEC);
    8238:	00c00104 	movi	r3,4
    823c:	00800074 	movhi	r2,1
    8240:	10c42035 	stwio	r3,4224(r2)
	*data_LSB = IORD(RD_JOYSTICK_LSB_BASE, 0);
    8244:	10c42837 	ldwio	r3,4256(r2)
	*data_MSB = IORD(RD_JOYSTICK_MSB_BASE, 0);
    8248:	10842437 	ldwio	r2,4240(r2)
	if ((data_LSB & 1 << peripheral) != 0){
    824c:	00800044 	movi	r2,1
    8250:	1108983a 	sll	r4,r2,r4
    8254:	20c4703a 	and	r2,r4,r3
    8258:	10000c26 	beq	r2,zero,828c <read_pin+0x54>
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4  | WDEC);
    825c:	1806913a 	slli	r3,r3,4
static int read_pin(unsigned int peripheral){
    8260:	deffff04 	addi	sp,sp,-4
    8264:	dfc00015 	stw	ra,0(sp)
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4  | WDEC);
    8268:	18c001d4 	ori	r3,r3,7
    826c:	00800074 	movhi	r2,1
    8270:	10c42035 	stwio	r3,4224(r2)
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    8274:	11041c35 	stwio	r4,4208(r2)
	pulse_we();
    8278:	00081cc0 	call	81cc <pulse_we>
		return 1;
    827c:	00800044 	movi	r2,1
}
    8280:	dfc00017 	ldw	ra,0(sp)
    8284:	dec00104 	addi	sp,sp,4
    8288:	f800283a 	ret
    828c:	f800283a 	ret

00008290 <read_KEY>:
	if (KEY > 7 || KEY < 0 || state > 3 || state < 0){
    8290:	20c00228 	cmpgeui	r3,r4,8
    8294:	18000c1e 	bne	r3,zero,82c8 <read_KEY+0x38>
    8298:	28800128 	cmpgeui	r2,r5,4
    829c:	10000a1e 	bne	r2,zero,82c8 <read_KEY+0x38>
int read_KEY(unsigned int KEY, unsigned int state){
    82a0:	defffe04 	addi	sp,sp,-8
    82a4:	dc000015 	stw	r16,0(sp)
    82a8:	dfc00115 	stw	ra,4(sp)
    82ac:	2021883a 	mov	r16,r4
	config_pin_state(KEY, state);
    82b0:	00081e00 	call	81e0 <config_pin_state>
	return read_pin(KEY);
    82b4:	8009883a 	mov	r4,r16
}
    82b8:	dfc00117 	ldw	ra,4(sp)
    82bc:	dc000017 	ldw	r16,0(sp)
    82c0:	dec00204 	addi	sp,sp,8
	return read_pin(KEY);
    82c4:	00082381 	jmpi	8238 <read_pin>
}
    82c8:	00bfffc4 	movi	r2,-1
    82cc:	f800283a 	ret

000082d0 <read_JOYSTICK>:
	if (direction > 11 || direction < 8 || state > 3 || state < 0){
    82d0:	20fffe04 	addi	r3,r4,-8
    82d4:	18c00128 	cmpgeui	r3,r3,4
    82d8:	18000c1e 	bne	r3,zero,830c <read_JOYSTICK+0x3c>
    82dc:	28800128 	cmpgeui	r2,r5,4
    82e0:	10000a1e 	bne	r2,zero,830c <read_JOYSTICK+0x3c>
int read_JOYSTICK(unsigned int direction, unsigned int state){
    82e4:	defffe04 	addi	sp,sp,-8
    82e8:	dc000015 	stw	r16,0(sp)
    82ec:	dfc00115 	stw	ra,4(sp)
    82f0:	2021883a 	mov	r16,r4
	config_pin_state(direction, state);
    82f4:	00081e00 	call	81e0 <config_pin_state>
	return read_pin(direction);
    82f8:	8009883a 	mov	r4,r16
}
    82fc:	dfc00117 	ldw	ra,4(sp)
    8300:	dc000017 	ldw	r16,0(sp)
    8304:	dec00204 	addi	sp,sp,8
	return read_pin(direction);
    8308:	00082381 	jmpi	8238 <read_pin>
}
    830c:	00bfffc4 	movi	r2,-1
    8310:	f800283a 	ret

00008314 <initialize_joystick>:

void initialize_joystick(){
    8314:	defffd04 	addi	sp,sp,-12
    8318:	dfc00215 	stw	ra,8(sp)
    831c:	dc000115 	stw	r16,4(sp)
	IOWR(WE_JOYSTICK_LSB_BASE,0, 0);
    8320:	00800074 	movhi	r2,1
    8324:	10042035 	stwio	zero,4224(r2)
	IOWR(WE_JOYSTICK_MSB_BASE,0, 0);
    8328:	10041c35 	stwio	zero,4208(r2)
	IOWR(WE_JOYSTICK_BASE,0, 0);
    832c:	10041835 	stwio	zero,4192(r2)
	IOWR(IRQ_JOYSTICK_BASE, 2, 1);
    8330:	04000044 	movi	r16,1
    8334:	14041635 	stwio	r16,4184(r2)
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WCTL);
    8338:	00c00204 	movi	r3,8
    833c:	10c42035 	stwio	r3,4224(r2)
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    8340:	10041c35 	stwio	zero,4208(r2)
	pulse_we();
    8344:	00081cc0 	call	81cc <pulse_we>
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WCTL);
    8348:	00800134 	movhi	r2,4
    834c:	10bffe04 	addi	r2,r2,-8
    8350:	00c00074 	movhi	r3,1
    8354:	18842035 	stwio	r2,4224(r3)
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    8358:	00800074 	movhi	r2,1
    835c:	10041c35 	stwio	zero,4208(r2)
	pulse_we();
    8360:	00081cc0 	call	81cc <pulse_we>

	we_CTL(0, 0);
	we_CTL(0, 16383);

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(IRQ_JOYSTICK_BASE, 0x01);
    8364:	00800074 	movhi	r2,1
    8368:	14041635 	stwio	r16,4184(r2)
	alt_ic_isr_register(IRQ_JOYSTICK_IRQ_INTERRUPT_CONTROLLER_ID, IRQ_JOYSTICK_IRQ, (void *)interrupt, NULL, 0x0);
    836c:	01800074 	movhi	r6,1
    8370:	d8000015 	stw	zero,0(sp)
    8374:	000f883a 	mov	r7,zero
    8378:	31a06f04 	addi	r6,r6,-32324
    837c:	000b883a 	mov	r5,zero
    8380:	0009883a 	mov	r4,zero
    8384:	0008ec40 	call	8ec4 <alt_ic_isr_register>
}
    8388:	dfc00217 	ldw	ra,8(sp)
    838c:	dc000117 	ldw	r16,4(sp)
    8390:	dec00304 	addi	sp,sp,12
    8394:	f800283a 	ret

00008398 <close_joystick>:

void close_joystick(){
	IOWR(WE_JOYSTICK_LSB_BASE,0, 0);
    8398:	00800074 	movhi	r2,1
    839c:	10042035 	stwio	zero,4224(r2)
	IOWR(WE_JOYSTICK_MSB_BASE,0, 0);
    83a0:	10041c35 	stwio	zero,4208(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(IRQ_JOYSTICK_BASE, 0x00);
    83a4:	10041635 	stwio	zero,4184(r2)
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WCTL);
    83a8:	00c00204 	movi	r3,8
    83ac:	10c42035 	stwio	r3,4224(r2)
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    83b0:	10041c35 	stwio	zero,4208(r2)
	pulse_we();
    83b4:	00081cc1 	jmpi	81cc <pulse_we>

000083b8 <peripheral_enable_callback>:
	IOWR(WE_JOYSTICK_LSB_BASE, 0, RMIRQ);
    83b8:	00c00184 	movi	r3,6
    83bc:	00800074 	movhi	r2,1
    83c0:	10c42035 	stwio	r3,4224(r2)
	*data_LSB = IORD(RD_JOYSTICK_LSB_BASE, 0);
    83c4:	11c42837 	ldwio	r7,4256(r2)
	*data_MSB = IORD(RD_JOYSTICK_MSB_BASE, 0);
    83c8:	10842437 	ldwio	r2,4240(r2)
	unsigned int data_MSB, data_LSB, mask_lsb, mask_msb;

	re_MIRQ(&data_MSB, &data_LSB);
	mask_lsb = 1 << peripheral | data_LSB;

	mask_msb = data_MSB << 20 | data_LSB >> 12;
    83cc:	3806d33a 	srli	r3,r7,12
    83d0:	1004953a 	slli	r2,r2,20
	mask_msb = ~(3 << (2 * peripheral)) & mask_msb; //limpar seletor de edge
    83d4:	200c907a 	slli	r6,r4,1
	mask_msb = data_MSB << 20 | data_LSB >> 12;
    83d8:	10c4b03a 	or	r2,r2,r3
	mask_msb = ~(3 << (2 * peripheral)) & mask_msb; //limpar seletor de edge
    83dc:	00c000c4 	movi	r3,3
    83e0:	1986983a 	sll	r3,r3,r6
    83e4:	00c6303a 	nor	r3,zero,r3
    83e8:	1886703a 	and	r3,r3,r2
	mask_lsb = 1 << peripheral | data_LSB;
    83ec:	00800044 	movi	r2,1
    83f0:	1104983a 	sll	r2,r2,r4
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WMIRQ);
    83f4:	01000074 	movhi	r4,1
	mask_lsb = 1 << peripheral | data_LSB;
    83f8:	11c4b03a 	or	r2,r2,r7
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WMIRQ);
    83fc:	1004913a 	slli	r2,r2,4
    8400:	10800254 	ori	r2,r2,9
    8404:	20842035 	stwio	r2,4224(r4)
	mask_msb = (state << (2 * peripheral)) | mask_msb;
    8408:	298a983a 	sll	r5,r5,r6
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    840c:	00800074 	movhi	r2,1
	mask_msb = (state << (2 * peripheral)) | mask_msb;
    8410:	28cab03a 	or	r5,r5,r3
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    8414:	11441c35 	stwio	r5,4208(r2)
	pulse_we();
    8418:	00081cc1 	jmpi	81cc <pulse_we>

0000841c <peripheral_disable_callback>:
	IOWR(WE_JOYSTICK_LSB_BASE, 0, RMIRQ);
    841c:	00c00184 	movi	r3,6
    8420:	00800074 	movhi	r2,1
    8424:	10c42035 	stwio	r3,4224(r2)
	*data_LSB = IORD(RD_JOYSTICK_LSB_BASE, 0);
    8428:	11442837 	ldwio	r5,4256(r2)
	*data_MSB = IORD(RD_JOYSTICK_MSB_BASE, 0);
    842c:	10c42437 	ldwio	r3,4240(r2)

void peripheral_disable_callback(unsigned int peripheral){
	unsigned int data_MSB, data_LSB, mask_lsb, mask_msb;

	re_MIRQ(&data_MSB, &data_LSB);
	mask_lsb = ~(1 << peripheral) & data_LSB;
    8430:	00bfff84 	movi	r2,-2
    8434:	1104183a 	rol	r2,r2,r4
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WMIRQ);
    8438:	01800074 	movhi	r6,1
	mask_lsb = ~(1 << peripheral) & data_LSB;
    843c:	1144703a 	and	r2,r2,r5
	IOWR(WE_JOYSTICK_LSB_BASE, 0, data_LSB << 4 | WMIRQ);
    8440:	1004913a 	slli	r2,r2,4
    8444:	10800254 	ori	r2,r2,9
    8448:	30842035 	stwio	r2,4224(r6)

	mask_msb = data_MSB << 20 | data_LSB >> 12;
	mask_msb = ~(3 << (2 * peripheral)) & mask_msb; //limpar seletor de edge
    844c:	2008907a 	slli	r4,r4,1
    8450:	008000c4 	movi	r2,3
	mask_msb = data_MSB << 20 | data_LSB >> 12;
    8454:	280ad33a 	srli	r5,r5,12
	mask_msb = ~(3 << (2 * peripheral)) & mask_msb; //limpar seletor de edge
    8458:	1104983a 	sll	r2,r2,r4
	mask_msb = data_MSB << 20 | data_LSB >> 12;
    845c:	1806953a 	slli	r3,r3,20
	mask_msb = ~(3 << (2 * peripheral)) & mask_msb; //limpar seletor de edge
    8460:	0084303a 	nor	r2,zero,r2
	mask_msb = data_MSB << 20 | data_LSB >> 12;
    8464:	1946b03a 	or	r3,r3,r5
	IOWR(WE_JOYSTICK_MSB_BASE, 0, data_MSB);
    8468:	10c4703a 	and	r2,r2,r3
    846c:	00c00074 	movhi	r3,1
    8470:	18841c35 	stwio	r2,4208(r3)
	pulse_we();
    8474:	00081cc1 	jmpi	81cc <pulse_we>

00008478 <set_callback>:

	we_MIRQ(mask_msb, mask_lsb);
}

void set_callback(void (*callback)()){
	callback_button = callback;
    8478:	d1200615 	stw	r4,-32744(gp)
}
    847c:	f800283a 	ret

00008480 <sendInstruction>:

/* ================================================================================
Funcao usava para envio de instrucoes para o processador grafico.
===================================================================================*/
static int sendInstruction(unsigned long dataA, unsigned long dataB){
	if(IORD(WRFULL_BASE,0) == 0){                        //FIFO nao esta cheia
    8480:	00800074 	movhi	r2,1
    8484:	10842c37 	ldwio	r2,4272(r2)
    8488:	1000091e 	bne	r2,zero,84b0 <sendInstruction+0x30>
		IOWR_ALTERA_AVALON_PIO_DATA(WRREG_BASE,0);       //Desabilita o sinal de escrita
    848c:	00800074 	movhi	r2,1
    8490:	10043035 	stwio	zero,4288(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE,dataA);  //Envia o dataA
    8494:	11043c35 	stwio	r4,4336(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE,dataB);  //Envia o dataB
    8498:	11443835 	stwio	r5,4320(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(WRREG_BASE,1);
    849c:	00c00044 	movi	r3,1
    84a0:	10c43035 	stwio	r3,4288(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(WRREG_BASE,0);
    84a4:	10043035 	stwio	zero,4288(r2)
    84a8:	00800044 	movi	r2,1
    84ac:	f800283a 	ret
		return 1;
	}else{
		return 0;
    84b0:	0005883a 	mov	r2,zero
	}
}
    84b4:	f800283a 	ret

000084b8 <set_sprite>:
Funcao que define o barramento dataB da instrucao de modificar os dados de um sprite.
===================================================================================*/
static unsigned long dataB_builder(int x, int y, int offset, int ativacao){
	unsigned long data = 0; 
	data = data | ativacao; //coloca o bit de ativacao do sprite.
    data = data << 10;    	//desloca o bit de ativacao em 10 posicoes a esquerda.
    84b8:	d8800017 	ldw	r2,0(sp)
}

int set_sprite(int registrador, int x, int y, int offset, int activation_bit){
	unsigned long dataA = dataA_builder(0,registrador,0);
	unsigned long dataB = dataB_builder(x, y, offset, activation_bit);
	return sendInstruction(dataA, dataB);
    84bc:	2008913a 	slli	r4,r4,4
    data = data << 10;    	//desloca o bit de ativacao em 10 posicoes a esquerda.
    84c0:	100492ba 	slli	r2,r2,10
    data = data | x;      	//operacao OR com a variavel data. (insere x no barramento de bits)
    84c4:	2884b03a 	or	r2,r5,r2
    data = data << 10;    	//desloca os bits em 10 posicoes a esquerda.
    84c8:	100492ba 	slli	r2,r2,10
    data = data | y;      	//operacao OR com a variavel data. (insere y no barramento de bits)
    84cc:	308cb03a 	or	r6,r6,r2
    data = data << 9;     	//desloca os bits em 9 posicoes a esquerda.
    84d0:	300c927a 	slli	r6,r6,9
	return sendInstruction(dataA, dataB);
    84d4:	398ab03a 	or	r5,r7,r6
    84d8:	00084801 	jmpi	8480 <sendInstruction>

000084dc <set_background_color>:


int set_background_color(int R, int G, int B){
	unsigned long dataA = dataA_builder(0,0,0);
	unsigned long color = B;
	color = color << 3;
    84dc:	300c90fa 	slli	r6,r6,3
	color = color | G;
    84e0:	298ab03a 	or	r5,r5,r6
	color = color << 3;
    84e4:	280a90fa 	slli	r5,r5,3
	color = color | R;
	return sendInstruction(dataA, color);
    84e8:	214ab03a 	or	r5,r4,r5
    84ec:	0009883a 	mov	r4,zero
    84f0:	00084801 	jmpi	8480 <sendInstruction>

000084f4 <set_background_block>:
}

int set_background_block(int column, int line, int R, int G, int B){
	int address = (line * 80) + column;
    84f4:	280490ba 	slli	r2,r5,2
    84f8:	1145883a 	add	r2,r2,r5
    84fc:	1004913a 	slli	r2,r2,4
    8500:	1109883a 	add	r4,r2,r4
	unsigned long dataA = dataA_builder(2, 0, address);
	unsigned long color = B;
	color = color << 3;
    8504:	d8800017 	ldw	r2,0(sp)
			data = data << 4;					//deslocamento a esquerda em 4 posicoes.
    8508:	2008913a 	slli	r4,r4,4
	color = color << 3;
    850c:	100490fa 	slli	r2,r2,3
	color = color | G;
	color = color << 3;
	color = color | R;
	return sendInstruction(dataA, color);
    8510:	21000094 	ori	r4,r4,2
	color = color | G;
    8514:	388eb03a 	or	r7,r7,r2
	color = color << 3;
    8518:	380e90fa 	slli	r7,r7,3
	return sendInstruction(dataA, color);
    851c:	31cab03a 	or	r5,r6,r7
    8520:	00084801 	jmpi	8480 <sendInstruction>

00008524 <increase_coordinate>:
}

void increase_coordinate(Sprite *sp, int mirror){
	switch((*sp).direction){
    8524:	20800217 	ldw	r2,8(r4)
    8528:	10c00228 	cmpgeui	r3,r2,8
    852c:	1800341e 	bne	r3,zero,8600 <increase_coordinate+0xdc>
    8530:	100490ba 	slli	r2,r2,2
    8534:	00c00074 	movhi	r3,1
    8538:	29400058 	cmpnei	r5,r5,1
    853c:	10c7883a 	add	r3,r2,r3
    8540:	18a15217 	ldw	r2,-31416(r3)
    8544:	1000683a 	jmp	r2
    8548:	00008568 	cmpgeui	zero,zero,533
    854c:	0000858c 	andi	zero,zero,534
    8550:	000085e8 	cmpgeui	zero,zero,535
    8554:	0000860c 	andi	zero,zero,536
    8558:	00008648 	cmpgei	zero,zero,537
    855c:	00008678 	rdprs	zero,zero,537
    8560:	000086b8 	rdprs	zero,zero,538
    8564:	000086e0 	cmpeqi	zero,zero,539
		case LEFT:                   							//0 graus   (esquerda)
			(*sp).coord_x -= (*sp).step_x; 						//Atualiza a coordenada X.
    8568:	20800017 	ldw	r2,0(r4)
    856c:	20c00517 	ldw	r3,20(r4)
    8570:	10c5c83a 	sub	r2,r2,r3
    8574:	20800015 	stw	r2,0(r4)
			if(mirror == 1){
    8578:	2800301e 	bne	r5,zero,863c <increase_coordinate+0x118>
				if((*sp).coord_x < 1){                          //Realiza a troca de posicao do sprite ao chegar no limite esquerdo da tela.
    857c:	00802016 	blt	zero,r2,8600 <increase_coordinate+0xdc>
					(*sp).coord_x = 640;
    8580:	0080a004 	movi	r2,640
				}
			}else {
				if((*sp).coord_x < 1){
					(*sp).coord_x = 1;
    8584:	20800015 	stw	r2,0(r4)
    8588:	f800283a 	ret
				}
			}
			break;
		case UPPER_RIGHT:                                       //45 graus  (diagonal superior direita)
			(*sp).coord_x += (*sp).step_x; 						//Atualiza a coordenada X.
    858c:	20800017 	ldw	r2,0(r4)
    8590:	20c00517 	ldw	r3,20(r4)
			(*sp).coord_y -= (*sp).step_y; 						//Atualiza a coordenada Y.
    8594:	21800617 	ldw	r6,24(r4)
			(*sp).coord_x += (*sp).step_x; 						//Atualiza a coordenada X.
    8598:	10c5883a 	add	r2,r2,r3
			(*sp).coord_y -= (*sp).step_y; 						//Atualiza a coordenada Y.
    859c:	20c00117 	ldw	r3,4(r4)
			(*sp).coord_x += (*sp).step_x; 						//Atualiza a coordenada X.
    85a0:	20800015 	stw	r2,0(r4)
			(*sp).coord_y -= (*sp).step_y; 						//Atualiza a coordenada Y.
    85a4:	1987c83a 	sub	r3,r3,r6
    85a8:	20c00115 	stw	r3,4(r4)
			if(mirror == 1){
    85ac:	2800081e 	bne	r5,zero,85d0 <increase_coordinate+0xac>
				if((*sp).coord_y < 0){                          //Realiza a troca de posicao do sprite ao chegar no limite superior da tela.
    85b0:	1800030e 	bge	r3,zero,85c0 <increase_coordinate+0x9c>
					(*sp).coord_y = 480;
    85b4:	00807804 	movi	r2,480
    85b8:	20800115 	stw	r2,4(r4)
    85bc:	f800283a 	ret
				}else if((*sp).coord_x > 640){                  //Realiza a troca de posicao do sprite ao chegar no limite direito da tela.
    85c0:	1080a050 	cmplti	r2,r2,641
    85c4:	10000e1e 	bne	r2,zero,8600 <increase_coordinate+0xdc>
					(*sp).coord_x = 0;	
    85c8:	20000015 	stw	zero,0(r4)
    85cc:	f800283a 	ret
				}
			}else{
				if((*sp).coord_y < 0){
    85d0:	1800020e 	bge	r3,zero,85dc <increase_coordinate+0xb8>
					(*sp).coord_y = 0;
    85d4:	20000115 	stw	zero,4(r4)
    85d8:	f800283a 	ret
				}else if((*sp).coord_x > 640){
    85dc:	1080a048 	cmpgei	r2,r2,641
    85e0:	103fe71e 	bne	r2,zero,8580 <increase_coordinate+0x5c>
    85e4:	f800283a 	ret
					(*sp).coord_x = 640;
				}
			}
			break;
		case UP:                                                //90 graus  (pra cima)
			(*sp).coord_y -= (*sp).step_y; 						//Atualiza a coordenada Y.
    85e8:	20800117 	ldw	r2,4(r4)
    85ec:	20c00617 	ldw	r3,24(r4)
    85f0:	10c5c83a 	sub	r2,r2,r3
    85f4:	20800115 	stw	r2,4(r4)
			if(mirror == 1){
    85f8:	2800021e 	bne	r5,zero,8604 <increase_coordinate+0xe0>
				if((*sp).coord_y < 0){                          //Realiza a troca de posicao do sprite ao chegar no limite superior da tela.
    85fc:	103fed16 	blt	r2,zero,85b4 <increase_coordinate+0x90>
					(*sp).coord_x = 640;
				}
			}
			break;
	}
}
    8600:	f800283a 	ret
				if((*sp).coord_y < 0){
    8604:	103ffe0e 	bge	r2,zero,8600 <increase_coordinate+0xdc>
    8608:	003ff206 	br	85d4 <increase_coordinate+0xb0>
			(*sp).coord_x -= (*sp).step_x; 						//Atualiza a coordenada X.
    860c:	20800017 	ldw	r2,0(r4)
    8610:	20c00517 	ldw	r3,20(r4)
			(*sp).coord_y -= (*sp).step_y; 						//Atualiza a coordenada Y.
    8614:	21800617 	ldw	r6,24(r4)
			(*sp).coord_x -= (*sp).step_x; 						//Atualiza a coordenada X.
    8618:	10c5c83a 	sub	r2,r2,r3
			(*sp).coord_y -= (*sp).step_y; 						//Atualiza a coordenada Y.
    861c:	20c00117 	ldw	r3,4(r4)
			(*sp).coord_x -= (*sp).step_x; 						//Atualiza a coordenada X.
    8620:	20800015 	stw	r2,0(r4)
			(*sp).coord_y -= (*sp).step_y; 						//Atualiza a coordenada Y.
    8624:	1987c83a 	sub	r3,r3,r6
    8628:	20c00115 	stw	r3,4(r4)
			if(mirror == 1){
    862c:	2800021e 	bne	r5,zero,8638 <increase_coordinate+0x114>
				if((*sp).coord_y < 0){                          //Realiza a troca de posicao do sprite ao chegar no limite superior da tela.
    8630:	183fd20e 	bge	r3,zero,857c <increase_coordinate+0x58>
    8634:	003fdf06 	br	85b4 <increase_coordinate+0x90>
				if((*sp).coord_y < 0){
    8638:	183fe616 	blt	r3,zero,85d4 <increase_coordinate+0xb0>
				if((*sp).coord_x < 1){
    863c:	00bff016 	blt	zero,r2,8600 <increase_coordinate+0xdc>
					(*sp).coord_x = 1;
    8640:	00800044 	movi	r2,1
    8644:	003fcf06 	br	8584 <increase_coordinate+0x60>
			(*sp).coord_x += (*sp).step_x; 						//Atualiza a coordenada X.
    8648:	20800017 	ldw	r2,0(r4)
    864c:	20c00517 	ldw	r3,20(r4)
    8650:	10c5883a 	add	r2,r2,r3
    8654:	20800015 	stw	r2,0(r4)
			if(mirror == 1){
    8658:	2800031e 	bne	r5,zero,8668 <increase_coordinate+0x144>
				if((*sp).coord_x > 640){                        //Realiza a troca de posicao do sprite ao chegar no limite direito da tela.
    865c:	1080a048 	cmpgei	r2,r2,641
    8660:	103fd91e 	bne	r2,zero,85c8 <increase_coordinate+0xa4>
    8664:	f800283a 	ret
				if((*sp).coord_x > 620){
    8668:	10809b50 	cmplti	r2,r2,621
    866c:	103fe41e 	bne	r2,zero,8600 <increase_coordinate+0xdc>
					(*sp).coord_x = 620;
    8670:	00809b04 	movi	r2,620
    8674:	003fc306 	br	8584 <increase_coordinate+0x60>
			(*sp).coord_x -= (*sp).step_x; 						//Atualiza a coordenada X.
    8678:	20c00017 	ldw	r3,0(r4)
    867c:	20800517 	ldw	r2,20(r4)
			(*sp).coord_y += (*sp).step_y; 						//Atualiza a coordenada Y.
    8680:	21800617 	ldw	r6,24(r4)
			(*sp).coord_x -= (*sp).step_x; 						//Atualiza a coordenada X.
    8684:	1887c83a 	sub	r3,r3,r2
			(*sp).coord_y += (*sp).step_y; 						//Atualiza a coordenada Y.
    8688:	20800117 	ldw	r2,4(r4)
			(*sp).coord_x -= (*sp).step_x; 						//Atualiza a coordenada X.
    868c:	20c00015 	stw	r3,0(r4)
			(*sp).coord_y += (*sp).step_y; 						//Atualiza a coordenada Y.
    8690:	1185883a 	add	r2,r2,r6
    8694:	20800115 	stw	r2,4(r4)
			if(mirror == 1){
    8698:	10807848 	cmpgei	r2,r2,481
    869c:	2800031e 	bne	r5,zero,86ac <increase_coordinate+0x188>
				if((*sp).coord_y > 480){                        //Realiza a troca de posicao do sprite ao chegar no limite inferior da tela.
    86a0:	103fcc1e 	bne	r2,zero,85d4 <increase_coordinate+0xb0>
				}else if((*sp).coord_x < 1){                    //Realiza a troca de posicao do sprite ao chegar no limite esquerdo da tela.
    86a4:	00ffd616 	blt	zero,r3,8600 <increase_coordinate+0xdc>
    86a8:	003fb506 	br	8580 <increase_coordinate+0x5c>
				if((*sp).coord_y > 480){
    86ac:	103fc11e 	bne	r2,zero,85b4 <increase_coordinate+0x90>
				}else if((*sp).coord_x < 1){
    86b0:	00ffd316 	blt	zero,r3,8600 <increase_coordinate+0xdc>
    86b4:	003fe206 	br	8640 <increase_coordinate+0x11c>
			(*sp).coord_y += (*sp).step_y; 						//Atualiza a coordenada Y.
    86b8:	20800117 	ldw	r2,4(r4)
    86bc:	20c00617 	ldw	r3,24(r4)
    86c0:	10c5883a 	add	r2,r2,r3
    86c4:	20800115 	stw	r2,4(r4)
			if(mirror == 1){
    86c8:	10807848 	cmpgei	r2,r2,481
    86cc:	2800021e 	bne	r5,zero,86d8 <increase_coordinate+0x1b4>
				if((*sp).coord_y > 480){                        //Realiza a troca de posicao do sprite ao chegar no limite inferior da tela.
    86d0:	103fc01e 	bne	r2,zero,85d4 <increase_coordinate+0xb0>
    86d4:	f800283a 	ret
				if((*sp).coord_y > 480){
    86d8:	103fb61e 	bne	r2,zero,85b4 <increase_coordinate+0x90>
    86dc:	f800283a 	ret
			(*sp).coord_x += (*sp).step_x; 						//Atualiza a coordenada X.
    86e0:	20800017 	ldw	r2,0(r4)
    86e4:	20c00517 	ldw	r3,20(r4)
			(*sp).coord_y += (*sp).step_y; 						//Atualiza a coordenada Y.
    86e8:	21800617 	ldw	r6,24(r4)
			(*sp).coord_x += (*sp).step_x; 						//Atualiza a coordenada X.
    86ec:	10c5883a 	add	r2,r2,r3
			(*sp).coord_y += (*sp).step_y; 						//Atualiza a coordenada Y.
    86f0:	20c00117 	ldw	r3,4(r4)
			(*sp).coord_x += (*sp).step_x; 						//Atualiza a coordenada X.
    86f4:	20800015 	stw	r2,0(r4)
			(*sp).coord_y += (*sp).step_y; 						//Atualiza a coordenada Y.
    86f8:	1987883a 	add	r3,r3,r6
    86fc:	20c00115 	stw	r3,4(r4)
			if(mirror == 1){
    8700:	18c07848 	cmpgei	r3,r3,481
    8704:	2800041e 	bne	r5,zero,8718 <increase_coordinate+0x1f4>
				if((*sp).coord_y > 480){                        //Realiza a troca de posicao do sprite ao chegar no limite inferior da tela.
    8708:	183fb21e 	bne	r3,zero,85d4 <increase_coordinate+0xb0>
				}else if((*sp).coord_x > 640){                  //Realiza a troca de posicao do sprite ao chegar no limite direito da tela.
    870c:	1080a048 	cmpgei	r2,r2,641
    8710:	103fad1e 	bne	r2,zero,85c8 <increase_coordinate+0xa4>
    8714:	f800283a 	ret
				if((*sp).coord_y > 480){
    8718:	183fa61e 	bne	r3,zero,85b4 <increase_coordinate+0x90>
				}else if((*sp).coord_x > 640){
    871c:	1080a048 	cmpgei	r2,r2,641
    8720:	103f971e 	bne	r2,zero,8580 <increase_coordinate+0x5c>
    8724:	003fb606 	br	8600 <increase_coordinate+0xdc>

00008728 <collision>:


int collision(Sprite *sp1, Sprite *sp2){
	int h = 15;
	int y_face_1 = (*sp1).coord_y + h;
    8728:	20c00117 	ldw	r3,4(r4)
	int y_face_2 = (*sp2).coord_y + h;
    872c:	28800117 	ldw	r2,4(r5)
	int y_face_1 = (*sp1).coord_y + h;
    8730:	198003c4 	addi	r6,r3,15
	int x_face_1 = (*sp1).coord_x + h;
	int x_face_2 = (*sp2).coord_x + h;
	/*-------------------------------------*/   
	if( (y_face_1 > (*sp2).coord_y ) && ((*sp1).coord_y < y_face_2) ){
    8734:	11800d0e 	bge	r2,r6,876c <collision+0x44>
	int y_face_2 = (*sp2).coord_y + h;
    8738:	108003c4 	addi	r2,r2,15
	if( (y_face_1 > (*sp2).coord_y ) && ((*sp1).coord_y < y_face_2) ){
    873c:	18800b0e 	bge	r3,r2,876c <collision+0x44>
	int x_face_1 = (*sp1).coord_x + h;
    8740:	20800017 	ldw	r2,0(r4)
	int x_face_2 = (*sp2).coord_x + h;
    8744:	28c00017 	ldw	r3,0(r5)
	int x_face_1 = (*sp1).coord_x + h;
    8748:	110003c4 	addi	r4,r2,15
		//Colisoes a esquerda --------------------------------------------
		if( ( x_face_1 > (*sp2).coord_x ) && (x_face_1 < x_face_2) ){
    874c:	1900070e 	bge	r3,r4,876c <collision+0x44>
    8750:	10c00416 	blt	r2,r3,8764 <collision+0x3c>
		}else if ( (x_face_1 < x_face_2) && (x_face_1 > (*sp2).coord_x) ){
			return 1;
		}
		/*--------------------------------------------------------------*/
		//Colisoes a direita --------------------------------------------
		if( ( x_face_1 > x_face_2) && (x_face_2 > (*sp1).coord_x) ){
    8754:	1880050e 	bge	r3,r2,876c <collision+0x44>
	int x_face_2 = (*sp2).coord_x + h;
    8758:	18c003c4 	addi	r3,r3,15
		if( ( x_face_1 > x_face_2) && (x_face_2 > (*sp1).coord_x) ){
    875c:	10c4803a 	cmplt	r2,r2,r3
    8760:	f800283a 	ret
			return 1;
    8764:	00800044 	movi	r2,1
    8768:	f800283a 	ret
    876c:	0005883a 	mov	r2,zero
			return 1;
		}
		/*--------------------------------------------------------------*/
	}
	return 0;
}
    8770:	f800283a 	ret

00008774 <initialize_sprite_random>:
		}
	return 0;
}
/*----------FIM DA FUNCAO PRINCIPAL--------------------------*/

void initialize_sprite_random(int offset, Sprite *sp){
    8774:	defffd04 	addi	sp,sp,-12
    8778:	dfc00215 	stw	ra,8(sp)
    877c:	dc400115 	stw	r17,4(sp)
    8780:	dc000015 	stw	r16,0(sp)
	(*sp).collision = 0;
    8784:	28000815 	stw	zero,32(r5)
void initialize_sprite_random(int offset, Sprite *sp){
    8788:	2821883a 	mov	r16,r5
    878c:	2023883a 	mov	r17,r4
	(*sp).coord_x   = 1 + rand() % 639;     //sorteio da posicao x.
    8790:	0008d380 	call	8d38 <rand>
    8794:	01409fc4 	movi	r5,639
    8798:	1009883a 	mov	r4,r2
    879c:	0008bf00 	call	8bf0 <__modsi3>
    87a0:	10800044 	addi	r2,r2,1
    87a4:	80800015 	stw	r2,0(r16)
	(*sp).coord_y   = 1 + rand() % 439;     //sorteio da posicao y.
    87a8:	0008d380 	call	8d38 <rand>
    87ac:	01406dc4 	movi	r5,439
    87b0:	1009883a 	mov	r4,r2
    87b4:	0008bf00 	call	8bf0 <__modsi3>
    87b8:	10800044 	addi	r2,r2,1
    87bc:	80800115 	stw	r2,4(r16)
	(*sp).offset    = offset;               //definicao do offset de memoria.
    87c0:	84400315 	stw	r17,12(r16)
	(*sp).direction = rand() % 7;           //sorteio do anngulo inicial de movimento do sprite.
    87c4:	0008d380 	call	8d38 <rand>
    87c8:	014001c4 	movi	r5,7
    87cc:	1009883a 	mov	r4,r2
    87d0:	0008bf00 	call	8bf0 <__modsi3>
    87d4:	80800215 	stw	r2,8(r16)
}
    87d8:	dfc00217 	ldw	ra,8(sp)
    87dc:	dc400117 	ldw	r17,4(sp)
    87e0:	dc000017 	ldw	r16,0(sp)
    87e4:	dec00304 	addi	sp,sp,12
    87e8:	f800283a 	ret

000087ec <increase_points>:
	}
}

void increase_points(Sprite_Fixed *dg_1, Sprite_Fixed *dg_2, Sprite_Fixed *dg_3){
	int incresed = 0;
	while(incresed == 0 && state_placar != 3){
    87ec:	d0a00717 	ldw	r2,-32740(gp)
    87f0:	10c000d8 	cmpnei	r3,r2,3
    87f4:	18002026 	beq	r3,zero,8878 <increase_points+0x8c>
			}else {
				(*dg_1).offset += 1;
				state_placar    = 0;
				incresed        = 1;
			}		
		}else if(state_placar == 1){  // controla o segundo digito
    87f8:	10c00060 	cmpeqi	r3,r2,1
			}else {
				(*dg_2).offset += 1;
				state_placar    = 0;
				incresed        = 1;
			}	
		}else if(state_placar == 2){ // controla o terceiro digito
    87fc:	11c00098 	cmpnei	r7,r2,2
		if(state_placar == 0){ // controla o primeiro digito
    8800:	10000326 	beq	r2,zero,8810 <increase_points+0x24>
		}else if(state_placar == 1){  // controla o segundo digito
    8804:	1800071e 	bne	r3,zero,8824 <increase_points+0x38>
		}else if(state_placar == 2){ // controla o terceiro digito
    8808:	383ffd1e 	bne	r7,zero,8800 <increase_points+0x14>
    880c:	00000a06 	br	8838 <increase_points+0x4c>
			if((*dg_1).offset == 24){
    8810:	20800217 	ldw	r2,8(r4)
    8814:	10c00618 	cmpnei	r3,r2,24
    8818:	18000d1e 	bne	r3,zero,8850 <increase_points+0x64>
				(*dg_1).offset = 15; // numero 0
    881c:	008003c4 	movi	r2,15
    8820:	20800215 	stw	r2,8(r4)
			if((*dg_2).offset == 24){
    8824:	28800217 	ldw	r2,8(r5)
    8828:	10c00618 	cmpnei	r3,r2,24
    882c:	18000c1e 	bne	r3,zero,8860 <increase_points+0x74>
				(*dg_2).offset = 15; // numero 0
    8830:	008003c4 	movi	r2,15
    8834:	28800215 	stw	r2,8(r5)
			if((*dg_3).offset == 24){
    8838:	30800217 	ldw	r2,8(r6)
    883c:	10c00618 	cmpnei	r3,r2,24
    8840:	18000a1e 	bne	r3,zero,886c <increase_points+0x80>
				state_placar = 3; // vai para um estado inexistente. Nao conta mais. Chegou na pontuacao limite (900).
    8844:	008000c4 	movi	r2,3
    8848:	d0a00715 	stw	r2,-32740(gp)
	while(incresed == 0 && state_placar != 3){
    884c:	f800283a 	ret
				(*dg_1).offset += 1;
    8850:	10800044 	addi	r2,r2,1
    8854:	20800215 	stw	r2,8(r4)
				state_placar    = 0;
    8858:	d0200715 	stw	zero,-32740(gp)
	while(incresed == 0 && state_placar != 3){
    885c:	f800283a 	ret
				(*dg_2).offset += 1;
    8860:	10800044 	addi	r2,r2,1
    8864:	28800215 	stw	r2,8(r5)
    8868:	003ffb06 	br	8858 <increase_points+0x6c>
				incresed     = 1;
			}else{
				(*dg_3).offset += 1;
    886c:	10800044 	addi	r2,r2,1
    8870:	30800215 	stw	r2,8(r6)
				state_placar    = 0;
    8874:	003ff806 	br	8858 <increase_points+0x6c>
				incresed        = 1;
			}	
		}
	}
}
    8878:	f800283a 	ret

0000887c <collision_between_tiro_and_ast>:
void collision_between_tiro_and_ast(Sprite *tiro, Sprite* asteroids[], Sprite_Fixed* placar[]){
    887c:	defff904 	addi	sp,sp,-28
    8880:	dd400515 	stw	r21,20(sp)
    8884:	dcc00315 	stw	r19,12(sp)
    8888:	dc800215 	stw	r18,8(sp)
    888c:	dc400115 	stw	r17,4(sp)
    8890:	dfc00615 	stw	ra,24(sp)
    8894:	dd000415 	stw	r20,16(sp)
    8898:	dc000015 	stw	r16,0(sp)
    889c:	2027883a 	mov	r19,r4
    88a0:	282b883a 	mov	r21,r5
    88a4:	3023883a 	mov	r17,r6
	for (int i = 0; i < number_of_asteroids; i++){
    88a8:	0025883a 	mov	r18,zero
    88ac:	d0a00017 	ldw	r2,-32768(gp)
    88b0:	90800916 	blt	r18,r2,88d8 <collision_between_tiro_and_ast+0x5c>
}
    88b4:	dfc00617 	ldw	ra,24(sp)
    88b8:	dd400517 	ldw	r21,20(sp)
    88bc:	dd000417 	ldw	r20,16(sp)
    88c0:	dcc00317 	ldw	r19,12(sp)
    88c4:	dc800217 	ldw	r18,8(sp)
    88c8:	dc400117 	ldw	r17,4(sp)
    88cc:	dc000017 	ldw	r16,0(sp)
    88d0:	dec00704 	addi	sp,sp,28
    88d4:	f800283a 	ret
		Sprite *ast = asteroids[i];
    88d8:	900490ba 	slli	r2,r18,2
    88dc:	a885883a 	add	r2,r21,r2
    88e0:	14000017 	ldw	r16,0(r2)
		if((*ast).ativo == 1){
    88e4:	80800717 	ldw	r2,28(r16)
    88e8:	10800060 	cmpeqi	r2,r2,1
    88ec:	10001026 	beq	r2,zero,8930 <collision_between_tiro_and_ast+0xb4>
			if(collision(tiro, ast) == 1){
    88f0:	800b883a 	mov	r5,r16
    88f4:	9809883a 	mov	r4,r19
    88f8:	00087280 	call	8728 <collision>
    88fc:	1029883a 	mov	r20,r2
    8900:	10800058 	cmpnei	r2,r2,1
    8904:	10000a1e 	bne	r2,zero,8930 <collision_between_tiro_and_ast+0xb4>
				increase_points(placar[0], placar[1], placar[2]);
    8908:	89800217 	ldw	r6,8(r17)
    890c:	89400117 	ldw	r5,4(r17)
    8910:	89000017 	ldw	r4,0(r17)
    8914:	00087ec0 	call	87ec <increase_points>
				(*ast).offset += 1;
    8918:	80800317 	ldw	r2,12(r16)
				(*tiro).collision = 1;
    891c:	9d000815 	stw	r20,32(r19)
				(*ast).offset += 1;
    8920:	10c00044 	addi	r3,r2,1
				if((*ast).offset == 2){
    8924:	10800060 	cmpeqi	r2,r2,1
    8928:	1000031e 	bne	r2,zero,8938 <collision_between_tiro_and_ast+0xbc>
				(*ast).offset += 1;
    892c:	80c00315 	stw	r3,12(r16)
	for (int i = 0; i < number_of_asteroids; i++){
    8930:	94800044 	addi	r18,r18,1
    8934:	003fdd06 	br	88ac <collision_between_tiro_and_ast+0x30>
					(*ast).offset    = 0;
    8938:	80000315 	stw	zero,12(r16)
					(*ast).coord_x   = 1 + rand() % 639;     //sorteio de uma nova posicaoo x.
    893c:	0008d380 	call	8d38 <rand>
    8940:	01409fc4 	movi	r5,639
    8944:	1009883a 	mov	r4,r2
    8948:	0008bf00 	call	8bf0 <__modsi3>
    894c:	10800044 	addi	r2,r2,1
    8950:	80800015 	stw	r2,0(r16)
					(*ast).coord_y   = 1 + rand() % 439;     //sorteio de uma nova posicaoo y.
    8954:	0008d380 	call	8d38 <rand>
    8958:	01406dc4 	movi	r5,439
    895c:	1009883a 	mov	r4,r2
    8960:	0008bf00 	call	8bf0 <__modsi3>
    8964:	10800044 	addi	r2,r2,1
    8968:	80800115 	stw	r2,4(r16)
					(*ast).direction = rand() % 7;           //sorteio de um novo angulo inicial de movimento do sprite.
    896c:	0008d380 	call	8d38 <rand>
    8970:	014001c4 	movi	r5,7
    8974:	1009883a 	mov	r4,r2
    8978:	0008bf00 	call	8bf0 <__modsi3>
    897c:	80800215 	stw	r2,8(r16)
    8980:	003feb06 	br	8930 <collision_between_tiro_and_ast+0xb4>

00008984 <atirar_sp>:


void atirar_sp(Sprite *nave, Sprite *tiro){
	switch((*nave).offset){
    8984:	20800317 	ldw	r2,12(r4)
    8988:	10bfff44 	addi	r2,r2,-3
    898c:	10c00228 	cmpgeui	r3,r2,8
    8990:	1800201e 	bne	r3,zero,8a14 <atirar_sp+0x90>
    8994:	100490ba 	slli	r2,r2,2
    8998:	00c00074 	movhi	r3,1
    899c:	10c7883a 	add	r3,r2,r3
    89a0:	18a26a17 	ldw	r2,-30296(r3)
    89a4:	1000683a 	jmp	r2
    89a8:	00008a18 	cmpnei	zero,zero,552
    89ac:	000089ec 	andhi	zero,zero,551
    89b0:	00008a64 	muli	zero,zero,553
    89b4:	00008ad4 	movui	zero,555
    89b8:	00008ab0 	cmpltui	zero,zero,554
    89bc:	00008a88 	cmpgei	zero,zero,554
    89c0:	000089c8 	cmpgei	zero,zero,551
    89c4:	00008a3c 	xorhi	zero,zero,552
		case 9: //esquerda
			(*tiro).coord_x   = (*nave).coord_x - 20;
    89c8:	20800017 	ldw	r2,0(r4)
    89cc:	10bffb04 	addi	r2,r2,-20
    89d0:	28800015 	stw	r2,0(r5)
			(*tiro).coord_y   = (*nave).coord_y;
    89d4:	20800117 	ldw	r2,4(r4)
			(*tiro).offset    = 13;
			(*tiro).direction = LEFT;
    89d8:	28000215 	stw	zero,8(r5)
			(*tiro).coord_y   = (*nave).coord_y;
    89dc:	28800115 	stw	r2,4(r5)
			(*tiro).offset    = 13;
    89e0:	00800344 	movi	r2,13
    89e4:	28800315 	stw	r2,12(r5)
			break;
    89e8:	f800283a 	ret
		case 4: //direita diagonal superior
			(*tiro).coord_x   = (*nave).coord_x + 20;
    89ec:	20800017 	ldw	r2,0(r4)
    89f0:	10800504 	addi	r2,r2,20
    89f4:	28800015 	stw	r2,0(r5)
			(*tiro).coord_y   = (*nave).coord_y - 20;
    89f8:	20800117 	ldw	r2,4(r4)
    89fc:	10bffb04 	addi	r2,r2,-20
    8a00:	28800115 	stw	r2,4(r5)
			(*tiro).offset    = 12;
    8a04:	00800304 	movi	r2,12
    8a08:	28800315 	stw	r2,12(r5)
			(*tiro).direction = UPPER_RIGHT;
    8a0c:	00800044 	movi	r2,1
			break;
		case 6: //diagonal direita inferior
			(*tiro).coord_x   = (*nave).coord_x + 20;
			(*tiro).coord_y   = (*nave).coord_y + 20;
			(*tiro).offset    = 14;
			(*tiro).direction = BOTTOM_RIGHT;
    8a10:	28800215 	stw	r2,8(r5)
			break;
	}
}
    8a14:	f800283a 	ret
			(*tiro).coord_x   = (*nave).coord_x;
    8a18:	20800017 	ldw	r2,0(r4)
    8a1c:	28800015 	stw	r2,0(r5)
			(*tiro).coord_y   = (*nave).coord_y - 20;
    8a20:	20800117 	ldw	r2,4(r4)
    8a24:	10bffb04 	addi	r2,r2,-20
    8a28:	28800115 	stw	r2,4(r5)
			(*tiro).offset    = 11;
    8a2c:	008002c4 	movi	r2,11
    8a30:	28800315 	stw	r2,12(r5)
			(*tiro).direction = UP;
    8a34:	00800084 	movi	r2,2
    8a38:	003ff506 	br	8a10 <atirar_sp+0x8c>
			(*tiro).coord_x   = (*nave).coord_x - 20;
    8a3c:	20800017 	ldw	r2,0(r4)
    8a40:	10bffb04 	addi	r2,r2,-20
    8a44:	28800015 	stw	r2,0(r5)
			(*tiro).coord_y   = (*nave).coord_y - 20;
    8a48:	20800117 	ldw	r2,4(r4)
    8a4c:	10bffb04 	addi	r2,r2,-20
    8a50:	28800115 	stw	r2,4(r5)
			(*tiro).offset    = 14;
    8a54:	00800384 	movi	r2,14
    8a58:	28800315 	stw	r2,12(r5)
			(*tiro).direction = UPPER_LEFT;
    8a5c:	008000c4 	movi	r2,3
    8a60:	003feb06 	br	8a10 <atirar_sp+0x8c>
			(*tiro).coord_x   = (*nave).coord_x + 20;
    8a64:	20800017 	ldw	r2,0(r4)
    8a68:	10800504 	addi	r2,r2,20
    8a6c:	28800015 	stw	r2,0(r5)
			(*tiro).coord_y   = (*nave).coord_y;	
    8a70:	20800117 	ldw	r2,4(r4)
    8a74:	28800115 	stw	r2,4(r5)
			(*tiro).offset    = 13;
    8a78:	00800344 	movi	r2,13
    8a7c:	28800315 	stw	r2,12(r5)
			(*tiro).direction = RIGHT;
    8a80:	00800104 	movi	r2,4
    8a84:	003fe206 	br	8a10 <atirar_sp+0x8c>
			(*tiro).coord_x   = (*nave).coord_x - 20;
    8a88:	20800017 	ldw	r2,0(r4)
    8a8c:	10bffb04 	addi	r2,r2,-20
    8a90:	28800015 	stw	r2,0(r5)
			(*tiro).coord_y   = (*nave).coord_y + 20;
    8a94:	20800117 	ldw	r2,4(r4)
    8a98:	10800504 	addi	r2,r2,20
    8a9c:	28800115 	stw	r2,4(r5)
			(*tiro).offset    = 12;
    8aa0:	00800304 	movi	r2,12
    8aa4:	28800315 	stw	r2,12(r5)
			(*tiro).direction = BOTTOM_LEFT;
    8aa8:	00800144 	movi	r2,5
    8aac:	003fd806 	br	8a10 <atirar_sp+0x8c>
			(*tiro).coord_x   = (*nave).coord_x;
    8ab0:	20800017 	ldw	r2,0(r4)
    8ab4:	28800015 	stw	r2,0(r5)
			(*tiro).coord_y   = (*nave).coord_y + 20;
    8ab8:	20800117 	ldw	r2,4(r4)
    8abc:	10800504 	addi	r2,r2,20
    8ac0:	28800115 	stw	r2,4(r5)
			(*tiro).offset    = 11;
    8ac4:	008002c4 	movi	r2,11
    8ac8:	28800315 	stw	r2,12(r5)
			(*tiro).direction = DOWN;
    8acc:	00800184 	movi	r2,6
    8ad0:	003fcf06 	br	8a10 <atirar_sp+0x8c>
			(*tiro).coord_x   = (*nave).coord_x + 20;
    8ad4:	20800017 	ldw	r2,0(r4)
    8ad8:	10800504 	addi	r2,r2,20
    8adc:	28800015 	stw	r2,0(r5)
			(*tiro).coord_y   = (*nave).coord_y + 20;
    8ae0:	20800117 	ldw	r2,4(r4)
    8ae4:	10800504 	addi	r2,r2,20
    8ae8:	28800115 	stw	r2,4(r5)
			(*tiro).offset    = 14;
    8aec:	00800384 	movi	r2,14
    8af0:	28800315 	stw	r2,12(r5)
			(*tiro).direction = BOTTOM_RIGHT;
    8af4:	008001c4 	movi	r2,7
    8af8:	003fc506 	br	8a10 <atirar_sp+0x8c>

00008afc <main>:
int main(){
    8afc:	defffb04 	addi	sp,sp,-20
	set_background_color(0,0,0);
    8b00:	000d883a 	mov	r6,zero
    8b04:	000b883a 	mov	r5,zero
    8b08:	0009883a 	mov	r4,zero
int main(){
    8b0c:	dc800315 	stw	r18,12(sp)
    8b10:	dc400215 	stw	r17,8(sp)
    8b14:	dc000115 	stw	r16,4(sp)
    8b18:	dfc00415 	stw	ra,16(sp)
	int conty = 0;
    8b1c:	0023883a 	mov	r17,zero
	set_background_color(0,0,0);
    8b20:	00084dc0 	call	84dc <set_background_color>
	int contx = 20;
    8b24:	04000504 	movi	r16,20
		if (set_background_block(contx, conty, 3 ,2, 3)){
    8b28:	048000c4 	movi	r18,3
    8b2c:	dc800015 	stw	r18,0(sp)
    8b30:	01c00084 	movi	r7,2
    8b34:	018000c4 	movi	r6,3
    8b38:	880b883a 	mov	r5,r17
    8b3c:	8009883a 	mov	r4,r16
    8b40:	00084f40 	call	84f4 <set_background_block>
    8b44:	103ff926 	beq	r2,zero,8b2c <main+0x30>
			if (conty == 60){
    8b48:	88800f18 	cmpnei	r2,r17,60
    8b4c:	1000011e 	bne	r2,zero,8b54 <main+0x58>
				conty = 0;
    8b50:	0023883a 	mov	r17,zero
				if (contx == 60){
    8b54:	80800f18 	cmpnei	r2,r16,60
    8b58:	1000031e 	bne	r2,zero,8b68 <main+0x6c>
					conty +=1;
    8b5c:	8c400044 	addi	r17,r17,1
					contx = 20;
    8b60:	04000504 	movi	r16,20
    8b64:	003ff106 	br	8b2c <main+0x30>
					contx +=1;
    8b68:	84000044 	addi	r16,r16,1
    8b6c:	003fef06 	br	8b2c <main+0x30>

00008b70 <__divsi3>:
    8b70:	20001a16 	blt	r4,zero,8bdc <__divsi3+0x6c>
    8b74:	000f883a 	mov	r7,zero
    8b78:	2800020e 	bge	r5,zero,8b84 <__divsi3+0x14>
    8b7c:	014bc83a 	sub	r5,zero,r5
    8b80:	39c0005c 	xori	r7,r7,1
    8b84:	200d883a 	mov	r6,r4
    8b88:	00c00044 	movi	r3,1
    8b8c:	2900092e 	bgeu	r5,r4,8bb4 <__divsi3+0x44>
    8b90:	00800804 	movi	r2,32
    8b94:	00c00044 	movi	r3,1
    8b98:	00000106 	br	8ba0 <__divsi3+0x30>
    8b9c:	10001226 	beq	r2,zero,8be8 <__divsi3+0x78>
    8ba0:	294b883a 	add	r5,r5,r5
    8ba4:	10bfffc4 	addi	r2,r2,-1
    8ba8:	18c7883a 	add	r3,r3,r3
    8bac:	293ffb36 	bltu	r5,r4,8b9c <__divsi3+0x2c>
    8bb0:	18000d26 	beq	r3,zero,8be8 <__divsi3+0x78>
    8bb4:	0005883a 	mov	r2,zero
    8bb8:	31400236 	bltu	r6,r5,8bc4 <__divsi3+0x54>
    8bbc:	314dc83a 	sub	r6,r6,r5
    8bc0:	10c4b03a 	or	r2,r2,r3
    8bc4:	1806d07a 	srli	r3,r3,1
    8bc8:	280ad07a 	srli	r5,r5,1
    8bcc:	183ffa1e 	bne	r3,zero,8bb8 <__divsi3+0x48>
    8bd0:	38000126 	beq	r7,zero,8bd8 <__divsi3+0x68>
    8bd4:	0085c83a 	sub	r2,zero,r2
    8bd8:	f800283a 	ret
    8bdc:	0109c83a 	sub	r4,zero,r4
    8be0:	01c00044 	movi	r7,1
    8be4:	003fe406 	br	8b78 <__divsi3+0x8>
    8be8:	0005883a 	mov	r2,zero
    8bec:	003ff806 	br	8bd0 <__divsi3+0x60>

00008bf0 <__modsi3>:
    8bf0:	20001716 	blt	r4,zero,8c50 <__modsi3+0x60>
    8bf4:	000f883a 	mov	r7,zero
    8bf8:	2005883a 	mov	r2,r4
    8bfc:	2800010e 	bge	r5,zero,8c04 <__modsi3+0x14>
    8c00:	014bc83a 	sub	r5,zero,r5
    8c04:	00c00044 	movi	r3,1
    8c08:	2900092e 	bgeu	r5,r4,8c30 <__modsi3+0x40>
    8c0c:	01800804 	movi	r6,32
    8c10:	00c00044 	movi	r3,1
    8c14:	00000106 	br	8c1c <__modsi3+0x2c>
    8c18:	30001026 	beq	r6,zero,8c5c <__modsi3+0x6c>
    8c1c:	294b883a 	add	r5,r5,r5
    8c20:	31bfffc4 	addi	r6,r6,-1
    8c24:	18c7883a 	add	r3,r3,r3
    8c28:	293ffb36 	bltu	r5,r4,8c18 <__modsi3+0x28>
    8c2c:	18000b26 	beq	r3,zero,8c5c <__modsi3+0x6c>
    8c30:	1806d07a 	srli	r3,r3,1
    8c34:	11400136 	bltu	r2,r5,8c3c <__modsi3+0x4c>
    8c38:	1145c83a 	sub	r2,r2,r5
    8c3c:	280ad07a 	srli	r5,r5,1
    8c40:	183ffb1e 	bne	r3,zero,8c30 <__modsi3+0x40>
    8c44:	38000126 	beq	r7,zero,8c4c <__modsi3+0x5c>
    8c48:	0085c83a 	sub	r2,zero,r2
    8c4c:	f800283a 	ret
    8c50:	0109c83a 	sub	r4,zero,r4
    8c54:	01c00044 	movi	r7,1
    8c58:	003fe706 	br	8bf8 <__modsi3+0x8>
    8c5c:	2005883a 	mov	r2,r4
    8c60:	003ff806 	br	8c44 <__modsi3+0x54>

00008c64 <__udivsi3>:
    8c64:	200d883a 	mov	r6,r4
    8c68:	2900152e 	bgeu	r5,r4,8cc0 <__udivsi3+0x5c>
    8c6c:	28001416 	blt	r5,zero,8cc0 <__udivsi3+0x5c>
    8c70:	00800804 	movi	r2,32
    8c74:	00c00044 	movi	r3,1
    8c78:	00000206 	br	8c84 <__udivsi3+0x20>
    8c7c:	10000e26 	beq	r2,zero,8cb8 <__udivsi3+0x54>
    8c80:	28000416 	blt	r5,zero,8c94 <__udivsi3+0x30>
    8c84:	294b883a 	add	r5,r5,r5
    8c88:	10bfffc4 	addi	r2,r2,-1
    8c8c:	18c7883a 	add	r3,r3,r3
    8c90:	293ffa36 	bltu	r5,r4,8c7c <__udivsi3+0x18>
    8c94:	18000826 	beq	r3,zero,8cb8 <__udivsi3+0x54>
    8c98:	0005883a 	mov	r2,zero
    8c9c:	31400236 	bltu	r6,r5,8ca8 <__udivsi3+0x44>
    8ca0:	314dc83a 	sub	r6,r6,r5
    8ca4:	10c4b03a 	or	r2,r2,r3
    8ca8:	1806d07a 	srli	r3,r3,1
    8cac:	280ad07a 	srli	r5,r5,1
    8cb0:	183ffa1e 	bne	r3,zero,8c9c <__udivsi3+0x38>
    8cb4:	f800283a 	ret
    8cb8:	0005883a 	mov	r2,zero
    8cbc:	f800283a 	ret
    8cc0:	00c00044 	movi	r3,1
    8cc4:	003ff406 	br	8c98 <__udivsi3+0x34>

00008cc8 <__umodsi3>:
    8cc8:	2005883a 	mov	r2,r4
    8ccc:	2900132e 	bgeu	r5,r4,8d1c <__umodsi3+0x54>
    8cd0:	28001216 	blt	r5,zero,8d1c <__umodsi3+0x54>
    8cd4:	01800804 	movi	r6,32
    8cd8:	00c00044 	movi	r3,1
    8cdc:	00000206 	br	8ce8 <__umodsi3+0x20>
    8ce0:	30000c26 	beq	r6,zero,8d14 <__umodsi3+0x4c>
    8ce4:	28000416 	blt	r5,zero,8cf8 <__umodsi3+0x30>
    8ce8:	294b883a 	add	r5,r5,r5
    8cec:	31bfffc4 	addi	r6,r6,-1
    8cf0:	18c7883a 	add	r3,r3,r3
    8cf4:	293ffa36 	bltu	r5,r4,8ce0 <__umodsi3+0x18>
    8cf8:	18000626 	beq	r3,zero,8d14 <__umodsi3+0x4c>
    8cfc:	1806d07a 	srli	r3,r3,1
    8d00:	11400136 	bltu	r2,r5,8d08 <__umodsi3+0x40>
    8d04:	1145c83a 	sub	r2,r2,r5
    8d08:	280ad07a 	srli	r5,r5,1
    8d0c:	183ffb1e 	bne	r3,zero,8cfc <__umodsi3+0x34>
    8d10:	f800283a 	ret
    8d14:	2005883a 	mov	r2,r4
    8d18:	f800283a 	ret
    8d1c:	00c00044 	movi	r3,1
    8d20:	003ff606 	br	8cfc <__umodsi3+0x34>

00008d24 <srand>:
    8d24:	00800074 	movhi	r2,1
    8d28:	11244315 	stw	r4,-28404(r2)
    8d2c:	00800074 	movhi	r2,1
    8d30:	10244415 	stw	zero,-28400(r2)
    8d34:	f800283a 	ret

00008d38 <rand>:
    8d38:	00800074 	movhi	r2,1
    8d3c:	11244317 	ldw	r4,-28404(r2)
    8d40:	00800074 	movhi	r2,1
    8d44:	11644417 	ldw	r5,-28400(r2)
    8d48:	01932574 	movhi	r6,19605
    8d4c:	01d614b4 	movhi	r7,22610
    8d50:	deffff04 	addi	sp,sp,-4
    8d54:	319fcb44 	addi	r6,r6,32557
    8d58:	39fd0b44 	addi	r7,r7,-3027
    8d5c:	dfc00015 	stw	ra,0(sp)
    8d60:	0008d980 	call	8d98 <__muldi3>
    8d64:	11000044 	addi	r4,r2,1
    8d68:	2085803a 	cmpltu	r2,r4,r2
    8d6c:	10c5883a 	add	r2,r2,r3
    8d70:	00c00074 	movhi	r3,1
    8d74:	19244315 	stw	r4,-28404(r3)
    8d78:	00c00074 	movhi	r3,1
    8d7c:	18a44415 	stw	r2,-28400(r3)
    8d80:	00e00034 	movhi	r3,32768
    8d84:	18ffffc4 	addi	r3,r3,-1
    8d88:	10c4703a 	and	r2,r2,r3
    8d8c:	dfc00017 	ldw	ra,0(sp)
    8d90:	dec00104 	addi	sp,sp,4
    8d94:	f800283a 	ret

00008d98 <__muldi3>:
    8d98:	defff704 	addi	sp,sp,-36
    8d9c:	ddc00715 	stw	r23,28(sp)
    8da0:	dd800615 	stw	r22,24(sp)
    8da4:	dc000015 	stw	r16,0(sp)
    8da8:	202cd43a 	srli	r22,r4,16
    8dac:	343fffcc 	andi	r16,r6,65535
    8db0:	25ffffcc 	andi	r23,r4,65535
    8db4:	dcc00315 	stw	r19,12(sp)
    8db8:	dc400115 	stw	r17,4(sp)
    8dbc:	2827883a 	mov	r19,r5
    8dc0:	2023883a 	mov	r17,r4
    8dc4:	800b883a 	mov	r5,r16
    8dc8:	b809883a 	mov	r4,r23
    8dcc:	dfc00815 	stw	ra,32(sp)
    8dd0:	dd400515 	stw	r21,20(sp)
    8dd4:	dd000415 	stw	r20,16(sp)
    8dd8:	302ad43a 	srli	r21,r6,16
    8ddc:	3829883a 	mov	r20,r7
    8de0:	dc800215 	stw	r18,8(sp)
    8de4:	3025883a 	mov	r18,r6
    8de8:	0008e9c0 	call	8e9c <__mulsi3>
    8dec:	800b883a 	mov	r5,r16
    8df0:	b009883a 	mov	r4,r22
    8df4:	1021883a 	mov	r16,r2
    8df8:	0008e9c0 	call	8e9c <__mulsi3>
    8dfc:	a80b883a 	mov	r5,r21
    8e00:	b009883a 	mov	r4,r22
    8e04:	102d883a 	mov	r22,r2
    8e08:	0008e9c0 	call	8e9c <__mulsi3>
    8e0c:	a80b883a 	mov	r5,r21
    8e10:	b809883a 	mov	r4,r23
    8e14:	102b883a 	mov	r21,r2
    8e18:	0008e9c0 	call	8e9c <__mulsi3>
    8e1c:	8010d43a 	srli	r8,r16,16
    8e20:	1585883a 	add	r2,r2,r22
    8e24:	4091883a 	add	r8,r8,r2
    8e28:	4580022e 	bgeu	r8,r22,8e34 <__muldi3+0x9c>
    8e2c:	00800074 	movhi	r2,1
    8e30:	a8ab883a 	add	r21,r21,r2
    8e34:	4006d43a 	srli	r3,r8,16
    8e38:	4010943a 	slli	r8,r8,16
    8e3c:	a00b883a 	mov	r5,r20
    8e40:	8809883a 	mov	r4,r17
    8e44:	843fffcc 	andi	r16,r16,65535
    8e48:	1d6b883a 	add	r21,r3,r21
    8e4c:	4421883a 	add	r16,r8,r16
    8e50:	0008e9c0 	call	8e9c <__mulsi3>
    8e54:	980b883a 	mov	r5,r19
    8e58:	9009883a 	mov	r4,r18
    8e5c:	1023883a 	mov	r17,r2
    8e60:	0008e9c0 	call	8e9c <__mulsi3>
    8e64:	88a3883a 	add	r17,r17,r2
    8e68:	8d47883a 	add	r3,r17,r21
    8e6c:	8005883a 	mov	r2,r16
    8e70:	dfc00817 	ldw	ra,32(sp)
    8e74:	ddc00717 	ldw	r23,28(sp)
    8e78:	dd800617 	ldw	r22,24(sp)
    8e7c:	dd400517 	ldw	r21,20(sp)
    8e80:	dd000417 	ldw	r20,16(sp)
    8e84:	dcc00317 	ldw	r19,12(sp)
    8e88:	dc800217 	ldw	r18,8(sp)
    8e8c:	dc400117 	ldw	r17,4(sp)
    8e90:	dc000017 	ldw	r16,0(sp)
    8e94:	dec00904 	addi	sp,sp,36
    8e98:	f800283a 	ret

00008e9c <__mulsi3>:
    8e9c:	0005883a 	mov	r2,zero
    8ea0:	20000726 	beq	r4,zero,8ec0 <__mulsi3+0x24>
    8ea4:	20c0004c 	andi	r3,r4,1
    8ea8:	2008d07a 	srli	r4,r4,1
    8eac:	18000126 	beq	r3,zero,8eb4 <__mulsi3+0x18>
    8eb0:	1145883a 	add	r2,r2,r5
    8eb4:	294b883a 	add	r5,r5,r5
    8eb8:	203ffa1e 	bne	r4,zero,8ea4 <__mulsi3+0x8>
    8ebc:	f800283a 	ret
    8ec0:	f800283a 	ret

00008ec4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    8ec4:	0008f501 	jmpi	8f50 <alt_iic_isr_register>

00008ec8 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
    8ec8:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8ecc:	00bfff84 	movi	r2,-2
    8ed0:	1884703a 	and	r2,r3,r2
    8ed4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    8ed8:	00800044 	movi	r2,1
    8edc:	d1200b17 	ldw	r4,-32724(gp)
    8ee0:	114a983a 	sll	r5,r2,r5
    8ee4:	290ab03a 	or	r5,r5,r4
    8ee8:	d1600b15 	stw	r5,-32724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8eec:	d0a00b17 	ldw	r2,-32724(gp)
    8ef0:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    8ef4:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    8ef8:	0005883a 	mov	r2,zero
    8efc:	f800283a 	ret

00008f00 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
    8f00:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8f04:	00bfff84 	movi	r2,-2
    8f08:	1884703a 	and	r2,r3,r2
    8f0c:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
    8f10:	00bfff84 	movi	r2,-2
    8f14:	d1200b17 	ldw	r4,-32724(gp)
    8f18:	114a183a 	rol	r5,r2,r5
    8f1c:	290a703a 	and	r5,r5,r4
    8f20:	d1600b15 	stw	r5,-32724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8f24:	d0a00b17 	ldw	r2,-32724(gp)
    8f28:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    8f2c:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    8f30:	0005883a 	mov	r2,zero
    8f34:	f800283a 	ret

00008f38 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    8f38:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    8f3c:	00800044 	movi	r2,1
    8f40:	1144983a 	sll	r2,r2,r5
    8f44:	10c4703a 	and	r2,r2,r3
}
    8f48:	1004c03a 	cmpne	r2,r2,zero
    8f4c:	f800283a 	ret

00008f50 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    8f50:	28800808 	cmpgei	r2,r5,32
    8f54:	1000161e 	bne	r2,zero,8fb0 <alt_iic_isr_register+0x60>
{
    8f58:	defffe04 	addi	sp,sp,-8
    8f5c:	dfc00115 	stw	ra,4(sp)
    8f60:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
    8f64:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8f68:	00bfff84 	movi	r2,-2
    8f6c:	8084703a 	and	r2,r16,r2
    8f70:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    8f74:	280690fa 	slli	r3,r5,3
    8f78:	00800074 	movhi	r2,1
    8f7c:	10a44a04 	addi	r2,r2,-28376
    8f80:	10c5883a 	add	r2,r2,r3
    8f84:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    8f88:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    8f8c:	30000626 	beq	r6,zero,8fa8 <alt_iic_isr_register+0x58>
    8f90:	0008ec80 	call	8ec8 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
    8f94:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    8f98:	dfc00117 	ldw	ra,4(sp)
    8f9c:	dc000017 	ldw	r16,0(sp)
    8fa0:	dec00204 	addi	sp,sp,8
    8fa4:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    8fa8:	0008f000 	call	8f00 <alt_ic_irq_disable>
    8fac:	003ff906 	br	8f94 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
    8fb0:	00bffa84 	movi	r2,-22
}
    8fb4:	f800283a 	ret

00008fb8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8fb8:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8fbc:	01000074 	movhi	r4,1
    8fc0:	01400074 	movhi	r5,1
    8fc4:	dfc00015 	stw	ra,0(sp)
    8fc8:	21243a04 	addi	r4,r4,-28440
    8fcc:	29643d04 	addi	r5,r5,-28428
    8fd0:	21400426 	beq	r4,r5,8fe4 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    8fd4:	01800074 	movhi	r6,1
    8fd8:	31a43d04 	addi	r6,r6,-28428
    8fdc:	310dc83a 	sub	r6,r6,r4
    8fe0:	00090c00 	call	90c0 <memcpy>
  if (to != from)
    8fe4:	01000074 	movhi	r4,1
    8fe8:	01400074 	movhi	r5,1
    8fec:	21200804 	addi	r4,r4,-32736
    8ff0:	29600804 	addi	r5,r5,-32736
    8ff4:	21400426 	beq	r4,r5,9008 <alt_load+0x50>
      *to++ = *from++;
    8ff8:	01800074 	movhi	r6,1
    8ffc:	31a06004 	addi	r6,r6,-32384
    9000:	310dc83a 	sub	r6,r6,r4
    9004:	00090c00 	call	90c0 <memcpy>
  if (to != from)
    9008:	01000074 	movhi	r4,1
    900c:	01400074 	movhi	r5,1
    9010:	21243a04 	addi	r4,r4,-28440
    9014:	29643a04 	addi	r5,r5,-28440
    9018:	21400426 	beq	r4,r5,902c <alt_load+0x74>
      *to++ = *from++;
    901c:	01800074 	movhi	r6,1
    9020:	31a43a04 	addi	r6,r6,-28440
    9024:	310dc83a 	sub	r6,r6,r4
    9028:	00090c00 	call	90c0 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    902c:	000908c0 	call	908c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    9030:	dfc00017 	ldw	ra,0(sp)
    9034:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    9038:	00090901 	jmpi	9090 <alt_icache_flush_all>

0000903c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    903c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9040:	0009883a 	mov	r4,zero
{
    9044:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    9048:	00090680 	call	9068 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    904c:	00090880 	call	9088 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    9050:	d1a00c17 	ldw	r6,-32720(gp)
    9054:	d1600d17 	ldw	r5,-32716(gp)
    9058:	d1200e17 	ldw	r4,-32712(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    905c:	dfc00017 	ldw	ra,0(sp)
    9060:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    9064:	0008afc1 	jmpi	8afc <main>

00009068 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9068:	deffff04 	addi	sp,sp,-4
    906c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    9070:	00090b80 	call	90b8 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9074:	00800044 	movi	r2,1
    9078:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    907c:	dfc00017 	ldw	ra,0(sp)
    9080:	dec00104 	addi	sp,sp,4
    9084:	f800283a 	ret

00009088 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    9088:	f800283a 	ret

0000908c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    908c:	f800283a 	ret

00009090 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9090:	f800283a 	ret

00009094 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    9094:	213ffe84 	addi	r4,r4,-6
    9098:	20800428 	cmpgeui	r2,r4,16
    909c:	1000041e 	bne	r2,zero,90b0 <alt_exception_cause_generated_bad_addr+0x1c>
    90a0:	00a2c8d4 	movui	r2,35619
    90a4:	1104d83a 	srl	r2,r2,r4
    90a8:	1080004c 	andi	r2,r2,1
    90ac:	f800283a 	ret
    90b0:	0005883a 	mov	r2,zero
    return 0;

  default:
    return 0;
  }
}
    90b4:	f800283a 	ret

000090b8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    90b8:	000170fa 	wrctl	ienable,zero
}
    90bc:	f800283a 	ret

000090c0 <memcpy>:
    90c0:	2005883a 	mov	r2,r4
    90c4:	0007883a 	mov	r3,zero
    90c8:	30c0011e 	bne	r6,r3,90d0 <memcpy+0x10>
    90cc:	f800283a 	ret
    90d0:	28cf883a 	add	r7,r5,r3
    90d4:	39c00003 	ldbu	r7,0(r7)
    90d8:	10c9883a 	add	r4,r2,r3
    90dc:	18c00044 	addi	r3,r3,1
    90e0:	21c00005 	stb	r7,0(r4)
    90e4:	003ff806 	br	90c8 <memcpy+0x8>
