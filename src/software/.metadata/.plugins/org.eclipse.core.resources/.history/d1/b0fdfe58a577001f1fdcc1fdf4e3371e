#include <stdio.h>
#include "system.h"
#include <alt_types.h>
#include "sys/alt_irq.h"
#include "lib_KEY/KEY.h"


static void interrupt_handler(void* context, alt_u32 id);


int main() {
	printf("init\n");
	initialize_joystick();
	for (int i = 0; i < 8; i++){
	 				if (is_KEY_pressed(i)){
						printf("Botão %d foi solto\n",i);
					}
    // Ponteiro de contexto de interrupção (não usado neste exemplo)
    void* context = (void*) 0;

    alt_ic_isr_register(IO_AVALON_INTERFACE_0_IRQ_INTERRUPT_CONTROLLER_ID, IO_AVALON_INTERFACE_0_IRQ, (void *)interrupt_handler, NULL, 0x0);

    // Habilitar interrupções globais


	while (1){
		/*
			for (int i = 0; i < 8; i++){
 				if (is_KEY_released(i)){
					printf("Botão %d foi solto\n",i);
				}
				if (is_KEY_pressed(i)){
					printf("Botão %d foi precionado\n",i);
				}
			}
			*/
	}
	 return 0;
}

static void interrupt_handler(void* context, alt_u32 id) {
	printf("Botão X foi precionado\n");
	is_KEY_pressed(X);
}

