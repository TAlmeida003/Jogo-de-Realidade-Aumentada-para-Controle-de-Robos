#define MEMORIA_BASE_JOYSTICK 0x03000

#define REG_DATA_OFFSET 0
#define REG_CONTROLE_OFFSET 1
#define REG_INTERRUPT_MASK_OFFSET 2

#define JOYSTICK_IRQ 1

#define RDEC  0
#define RCTL  1
#define RMIRQ 2
#define WDEC  4
#define WCTL  5
#define WMIRQ 6

#define MEMORIA_BASE_RD_DATA_LSB 0X3050
#define MEMORIA_BASE_RD_DATA_MSB 0X3040

#define MEMORIA_BASE_WR_DATA_LSB 0X3030
#define MEMORIA_BASE_WR_DATA_MSB 0X3020

#define MEMORIA_BASE_WE 0x3010
#define MEMORIA_BASE_IRQ 0x3000

#include "io.h"
#include <stdio.h>
#include <unistd.h>
#include "sys/alt_irq.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "alt_types.h"


void (*callback_button0)() = NULL;
unsigned int edge0 = 0;
void (*callback_button1)() = NULL;
unsigned int edge1 = 0;
void (*callback_button2)() = NULL;
unsigned int edge2 = 0;
void (*callback_button3)() = NULL;
unsigned int edge3 = 0;
void (*callback_button4)() = NULL;
unsigned int edge4 = 0;
void (*callback_button5)() = NULL;
unsigned int edge5 = 0;
void (*callback_button6)() = NULL;
unsigned int edge6 = 0;
void (*callback_button7)() = NULL;
unsigned int edge7 = 0;

void pulse_we(){
	IOWR(MEMORIA_BASE_WE,0, 1);
	IOWR(MEMORIA_BASE_WE,0, 0);
}

void we_DEC(unsigned int data_MSB, unsigned int data_LSB){
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, data_LSB << 3 | WDEC);
	IOWR(MEMORIA_BASE_WR_DATA_MSB, 0, data_MSB);

	pulse_we();
}

void we_CTL(unsigned int data_MSB, unsigned int data_LSB){
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, data_LSB << 3 | WCTL);
	IOWR(MEMORIA_BASE_WR_DATA_MSB, 0, data_MSB);

	pulse_we();
}

void we_MIRQ(unsigned int data_MSB, unsigned int data_LSB){
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, data_LSB << 3 | WMIRQ);
	IOWR(MEMORIA_BASE_WR_DATA_MSB, 0, data_MSB);

	pulse_we();
}

void re_DEC(unsigned int* data_MSB,unsigned int* data_LSB){
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, RDEC);
	*data_LSB = IORD(MEMORIA_BASE_RD_DATA_LSB, 0);
	*data_MSB = IORD(MEMORIA_BASE_RD_DATA_MSB, 0);
}

void re_CTL(unsigned int* data_MSB, unsigned int* data_LSB){
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, RCTL);
	*data_LSB = IORD(MEMORIA_BASE_RD_DATA_LSB, 0);
	*data_MSB = IORD(MEMORIA_BASE_RD_DATA_MSB, 0);
}

void re_MIRQ(unsigned int* data_MSB, unsigned int* data_LSB){
	IOWR(MEMORIA_BASE_WR_DATA_LSB, 0, RMIRQ);
	*data_LSB = IORD(MEMORIA_BASE_RD_DATA_LSB, 0);
	*data_MSB = IORD(MEMORIA_BASE_RD_DATA_MSB, 0);
}

int edge_KEY(unsigned int button, unsigned int edge){
	if (button < 0 || button > 7) {
		return -1;
	}

	unsigned int data_MSB, data_LSB;
	re_CTL(&data_MSB, &data_LSB);
	unsigned int data, data_msb;

	switch (edge) {
		case 0:
			data = 1 << (2 + button) | data_LSB; // Retirar o ruido
			data = ~(3 << (14 + 2 * button)) & data; //limpar seletor de edge
			if (button == 7){
				data_msb = ~1 & data_MSB;
				we_CTL(data_msb, data);
			} else{
				we_CTL(data_MSB, data);
			}
			break;
		case 1:
			data = 1 << (2 + button) | data_LSB; // Retirar o ruido
			data = ~(3 << (14 + 2 * button)) & data; //limpar seletor de edge
			data = 1 << (14 + 2 * button) | data;
			if (button == 7){
				data_msb = ~1 & data_MSB;
				we_CTL(data_msb, data);
			} else{
				we_CTL(data_MSB, data);
			}
			break;
		case 2:
			data = 1 << (2 + button) | data_LSB; // Retirar o ruido
			data = ~(3 << (14 + 2 * button)) & data; //limpar seletor de edge

			data = 2 << (14 + 2 * button) | data;
			if (button == 7){
				data_msb = 1 | data_MSB;
				we_CTL(data_msb, data);
			}else{
				we_CTL(data_MSB, data);
			}
			break;
		default:
			return -1;
			break;
	}

	re_DEC(&data_MSB, &data_LSB);
	if ((data_LSB & 1 << button) != 0){
		we_DEC(data_MSB, 1 << button);
		return 1;
	}
	return 0;
}

void interrupt (void* context){
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(MEMORIA_BASE_IRQ, 0x00);
	if (callback_button0 != NULL){
		callback_button0();
		edge_KEY(0, edge0);
	} else if (callback_button1 != NULL){
		callback_button1();
		edge_KEY(1, edge1);
	} else if (callback_button2 != NULL){
		callback_button2();
		edge_KEY(2, edge2);
	} else if (callback_button3 != NULL){
		callback_button3();
		edge_KEY(3, edge3);
	} else if (callback_button4 != NULL){
		callback_button4();
		edge_KEY(4, edge4);
	}else if (callback_button5 != NULL){
		callback_button5();
		edge_KEY(5, edge5);
	} else if (callback_button6 != NULL){
		callback_button6();
		edge_KEY(6, edge6);
	}else if (callback_button7 != NULL){
		callback_button7();
		edge_KEY(7, edge7);
	}
}

void initialize_joystick(){
	IOWR(MEMORIA_BASE_WR_DATA_LSB,0, 0);
	IOWR(MEMORIA_BASE_WR_DATA_MSB,0, 0);
	IOWR(MEMORIA_BASE_WE,0, 0);
	IOWR(MEMORIA_BASE_IRQ, 2, 1);
	we_CTL(0, 0);
	we_CTL(0, 3);
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(MEMORIA_BASE_IRQ, 0x01);

	alt_ic_isr_register(0, 1, (void *)interrupt, NULL, 0x0);

	usleep(100000);

	for (int i = 0; i < 8; i++){
		edge_KEY(i,1);
		edge_KEY(i,2);
	}

}

void close_joystick(){
	IOWR(MEMORIA_BASE_WR_DATA_LSB,0, 0);
	IOWR(MEMORIA_BASE_WR_DATA_MSB,0, 0);
	we_CTL(0, 0);
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(MEMORIA_BASE_IRQ, 0x00);
}


int state_KEY(unsigned int button){
	if (button < 0 || button > 7) {
		printf("ExceptionKEY: Botao invalido\n");
		return -1;
	}

	unsigned int data_MSB, data_LSB;
	re_CTL(&data_MSB, &data_LSB);

	unsigned int data = data_LSB & ~(1 << (2 + button));
	we_DEC(data_MSB, data);

	re_DEC(&data_MSB, &data_LSB);

	if ((data_LSB & 1 << button) != 0){
		we_DEC(data_MSB, 1 << button);
		return 1;
	}
	return 0;
}

