// Arquitetura_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 711

`timescale 1 ps / 1 ps
module Arquitetura_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                  //                                clk_0_clk.clk
		input  wire        nios2_gen2_0_reset_reset_bridge_in_reset_reset, // nios2_gen2_0_reset_reset_bridge_in_reset.reset
		input  wire [16:0] nios2_gen2_0_data_master_address,               //                 nios2_gen2_0_data_master.address
		output wire        nios2_gen2_0_data_master_waitrequest,           //                                         .waitrequest
		input  wire [3:0]  nios2_gen2_0_data_master_byteenable,            //                                         .byteenable
		input  wire        nios2_gen2_0_data_master_read,                  //                                         .read
		output wire [31:0] nios2_gen2_0_data_master_readdata,              //                                         .readdata
		input  wire        nios2_gen2_0_data_master_write,                 //                                         .write
		input  wire [31:0] nios2_gen2_0_data_master_writedata,             //                                         .writedata
		input  wire        nios2_gen2_0_data_master_debugaccess,           //                                         .debugaccess
		input  wire [16:0] nios2_gen2_0_instruction_master_address,        //          nios2_gen2_0_instruction_master.address
		output wire        nios2_gen2_0_instruction_master_waitrequest,    //                                         .waitrequest
		input  wire        nios2_gen2_0_instruction_master_read,           //                                         .read
		output wire [31:0] nios2_gen2_0_instruction_master_readdata,       //                                         .readdata
		output wire [1:0]  A_s1_address,                                   //                                     A_s1.address
		input  wire [31:0] A_s1_readdata,                                  //                                         .readdata
		output wire [1:0]  B_s1_address,                                   //                                     B_s1.address
		input  wire [31:0] B_s1_readdata,                                  //                                         .readdata
		output wire [1:0]  data_A_s1_address,                              //                                data_A_s1.address
		output wire        data_A_s1_write,                                //                                         .write
		input  wire [31:0] data_A_s1_readdata,                             //                                         .readdata
		output wire [31:0] data_A_s1_writedata,                            //                                         .writedata
		output wire        data_A_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  data_B_s1_address,                              //                                data_B_s1.address
		output wire        data_B_s1_write,                                //                                         .write
		input  wire [31:0] data_B_s1_readdata,                             //                                         .readdata
		output wire [31:0] data_B_s1_writedata,                            //                                         .writedata
		output wire        data_B_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  Direction_Analogic_s1_address,                  //                    Direction_Analogic_s1.address
		input  wire [31:0] Direction_Analogic_s1_readdata,                 //                                         .readdata
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,          //            jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,            //                                         .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,             //                                         .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,         //                                         .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,        //                                         .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,      //                                         .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,       //                                         .chipselect
		output wire [8:0]  nios2_gen2_0_debug_mem_slave_address,           //             nios2_gen2_0_debug_mem_slave.address
		output wire        nios2_gen2_0_debug_mem_slave_write,             //                                         .write
		output wire        nios2_gen2_0_debug_mem_slave_read,              //                                         .read
		input  wire [31:0] nios2_gen2_0_debug_mem_slave_readdata,          //                                         .readdata
		output wire [31:0] nios2_gen2_0_debug_mem_slave_writedata,         //                                         .writedata
		output wire [3:0]  nios2_gen2_0_debug_mem_slave_byteenable,        //                                         .byteenable
		input  wire        nios2_gen2_0_debug_mem_slave_waitrequest,       //                                         .waitrequest
		output wire        nios2_gen2_0_debug_mem_slave_debugaccess,       //                                         .debugaccess
		output wire [12:0] onchip_memory2_0_s1_address,                    //                      onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                      //                                         .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                   //                                         .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                  //                                         .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                 //                                         .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                 //                                         .chipselect
		output wire        onchip_memory2_0_s1_clken,                      //                                         .clken
		output wire [1:0]  reset_pulseCounter_s1_address,                  //                    reset_pulseCounter_s1.address
		output wire        reset_pulseCounter_s1_write,                    //                                         .write
		input  wire [31:0] reset_pulseCounter_s1_readdata,                 //                                         .readdata
		output wire [31:0] reset_pulseCounter_s1_writedata,                //                                         .writedata
		output wire        reset_pulseCounter_s1_chipselect,               //                                         .chipselect
		output wire [1:0]  screen_s1_address,                              //                                screen_s1.address
		input  wire [31:0] screen_s1_readdata,                             //                                         .readdata
		output wire [1:0]  select_button_s1_address,                       //                         select_button_s1.address
		input  wire [31:0] select_button_s1_readdata,                      //                                         .readdata
		output wire [1:0]  start_s1_address,                               //                                 start_s1.address
		input  wire [31:0] start_s1_readdata,                              //                                         .readdata
		output wire [0:0]  sysid_qsys_0_control_slave_address,             //               sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata,            //                                         .readdata
		output wire [1:0]  TL_s1_address,                                  //                                    TL_s1.address
		input  wire [31:0] TL_s1_readdata,                                 //                                         .readdata
		output wire [1:0]  TR_s1_address,                                  //                                    TR_s1.address
		input  wire [31:0] TR_s1_readdata,                                 //                                         .readdata
		output wire [1:0]  wrfull_s1_address,                              //                                wrfull_s1.address
		input  wire [31:0] wrfull_s1_readdata,                             //                                         .readdata
		output wire [1:0]  wrreg_s1_address,                               //                                 wrreg_s1.address
		output wire        wrreg_s1_write,                                 //                                         .write
		input  wire [31:0] wrreg_s1_readdata,                              //                                         .readdata
		output wire [31:0] wrreg_s1_writedata,                             //                                         .writedata
		output wire        wrreg_s1_chipselect,                            //                                         .chipselect
		output wire [1:0]  X_s1_address,                                   //                                     X_s1.address
		input  wire [31:0] X_s1_readdata,                                  //                                         .readdata
		output wire [1:0]  y_s1_address,                                   //                                     y_s1.address
		input  wire [31:0] y_s1_readdata                                   //                                         .readdata
	);

	wire         nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_0_data_master_agent:av_waitrequest -> nios2_gen2_0_data_master_translator:uav_waitrequest
	wire  [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_0_data_master_agent:av_readdata -> nios2_gen2_0_data_master_translator:uav_readdata
	wire         nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_0_data_master_translator:uav_debugaccess -> nios2_gen2_0_data_master_agent:av_debugaccess
	wire  [16:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_0_data_master_translator:uav_address -> nios2_gen2_0_data_master_agent:av_address
	wire         nios2_gen2_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_0_data_master_translator:uav_read -> nios2_gen2_0_data_master_agent:av_read
	wire   [3:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_0_data_master_translator:uav_byteenable -> nios2_gen2_0_data_master_agent:av_byteenable
	wire         nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_0_data_master_agent:av_readdatavalid -> nios2_gen2_0_data_master_translator:uav_readdatavalid
	wire         nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_0_data_master_translator:uav_lock -> nios2_gen2_0_data_master_agent:av_lock
	wire         nios2_gen2_0_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_0_data_master_translator:uav_write -> nios2_gen2_0_data_master_agent:av_write
	wire  [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_0_data_master_translator:uav_writedata -> nios2_gen2_0_data_master_agent:av_writedata
	wire   [2:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_0_data_master_translator:uav_burstcount -> nios2_gen2_0_data_master_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_gen2_0_data_master_agent:rp_valid
	wire  [96:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_gen2_0_data_master_agent:rp_data
	wire         rsp_mux_src_ready;                                                                  // nios2_gen2_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire  [18:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_gen2_0_data_master_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_gen2_0_data_master_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_gen2_0_data_master_agent:rp_endofpacket
	wire         nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_0_instruction_master_agent:av_waitrequest -> nios2_gen2_0_instruction_master_translator:uav_waitrequest
	wire  [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_0_instruction_master_agent:av_readdata -> nios2_gen2_0_instruction_master_translator:uav_readdata
	wire         nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_0_instruction_master_translator:uav_debugaccess -> nios2_gen2_0_instruction_master_agent:av_debugaccess
	wire  [16:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_0_instruction_master_translator:uav_address -> nios2_gen2_0_instruction_master_agent:av_address
	wire         nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_0_instruction_master_translator:uav_read -> nios2_gen2_0_instruction_master_agent:av_read
	wire   [3:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_0_instruction_master_translator:uav_byteenable -> nios2_gen2_0_instruction_master_agent:av_byteenable
	wire         nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_0_instruction_master_agent:av_readdatavalid -> nios2_gen2_0_instruction_master_translator:uav_readdatavalid
	wire         nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_0_instruction_master_translator:uav_lock -> nios2_gen2_0_instruction_master_agent:av_lock
	wire         nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_0_instruction_master_translator:uav_write -> nios2_gen2_0_instruction_master_agent:av_write
	wire  [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_0_instruction_master_translator:uav_writedata -> nios2_gen2_0_instruction_master_agent:av_writedata
	wire   [2:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_0_instruction_master_translator:uav_burstcount -> nios2_gen2_0_instruction_master_agent:av_burstcount
	wire         rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> nios2_gen2_0_instruction_master_agent:rp_valid
	wire  [96:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> nios2_gen2_0_instruction_master_agent:rp_data
	wire         rsp_mux_001_src_ready;                                                              // nios2_gen2_0_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire  [18:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> nios2_gen2_0_instruction_master_agent:rp_channel
	wire         rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> nios2_gen2_0_instruction_master_agent:rp_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> nios2_gen2_0_instruction_master_agent:rp_endofpacket
	wire  [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire  [16:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire   [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire  [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire   [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [97:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [97:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [96:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                                  // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire  [18:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire  [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                                       // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire         sysid_qsys_0_control_slave_agent_m0_waitrequest;                                    // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire         sysid_qsys_0_control_slave_agent_m0_debugaccess;                                    // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire  [16:0] sysid_qsys_0_control_slave_agent_m0_address;                                        // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire   [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                                     // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire         sysid_qsys_0_control_slave_agent_m0_read;                                           // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire         sysid_qsys_0_control_slave_agent_m0_readdatavalid;                                  // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire         sysid_qsys_0_control_slave_agent_m0_lock;                                           // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire  [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                                      // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire         sysid_qsys_0_control_slave_agent_m0_write;                                          // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire   [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                                     // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire         sysid_qsys_0_control_slave_agent_rf_source_valid;                                   // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [97:0] sysid_qsys_0_control_slave_agent_rf_source_data;                                    // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire         sysid_qsys_0_control_slave_agent_rf_source_ready;                                   // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire         sysid_qsys_0_control_slave_agent_rf_source_startofpacket;                           // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire         sysid_qsys_0_control_slave_agent_rf_source_endofpacket;                             // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire         sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                                // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [97:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                                 // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire         sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                                // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire         sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;                        // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire         sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;                          // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire  [96:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                              // sysid_qsys_0_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire  [18:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire  [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_readdata;                                     // nios2_gen2_0_debug_mem_slave_translator:uav_readdata -> nios2_gen2_0_debug_mem_slave_agent:m0_readdata
	wire         nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_gen2_0_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_0_debug_mem_slave_agent:m0_waitrequest
	wire         nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_gen2_0_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_0_debug_mem_slave_translator:uav_debugaccess
	wire  [16:0] nios2_gen2_0_debug_mem_slave_agent_m0_address;                                      // nios2_gen2_0_debug_mem_slave_agent:m0_address -> nios2_gen2_0_debug_mem_slave_translator:uav_address
	wire   [3:0] nios2_gen2_0_debug_mem_slave_agent_m0_byteenable;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_0_debug_mem_slave_translator:uav_byteenable
	wire         nios2_gen2_0_debug_mem_slave_agent_m0_read;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_read -> nios2_gen2_0_debug_mem_slave_translator:uav_read
	wire         nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_gen2_0_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_0_debug_mem_slave_agent:m0_readdatavalid
	wire         nios2_gen2_0_debug_mem_slave_agent_m0_lock;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_lock -> nios2_gen2_0_debug_mem_slave_translator:uav_lock
	wire  [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_writedata;                                    // nios2_gen2_0_debug_mem_slave_agent:m0_writedata -> nios2_gen2_0_debug_mem_slave_translator:uav_writedata
	wire         nios2_gen2_0_debug_mem_slave_agent_m0_write;                                        // nios2_gen2_0_debug_mem_slave_agent:m0_write -> nios2_gen2_0_debug_mem_slave_translator:uav_write
	wire   [2:0] nios2_gen2_0_debug_mem_slave_agent_m0_burstcount;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_0_debug_mem_slave_translator:uav_burstcount
	wire         nios2_gen2_0_debug_mem_slave_agent_rf_source_valid;                                 // nios2_gen2_0_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [97:0] nios2_gen2_0_debug_mem_slave_agent_rf_source_data;                                  // nios2_gen2_0_debug_mem_slave_agent:rf_source_data -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire         nios2_gen2_0_debug_mem_slave_agent_rf_source_ready;                                 // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_0_debug_mem_slave_agent:rf_source_ready
	wire         nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_gen2_0_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire         nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_gen2_0_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire         nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_valid
	wire  [97:0] nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_data
	wire         nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_gen2_0_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire         nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire         nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> nios2_gen2_0_debug_mem_slave_agent:cp_valid
	wire  [96:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> nios2_gen2_0_debug_mem_slave_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                              // nios2_gen2_0_debug_mem_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire  [18:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> nios2_gen2_0_debug_mem_slave_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_endofpacket
	wire  [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                              // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire         onchip_memory2_0_s1_agent_m0_waitrequest;                                           // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire         onchip_memory2_0_s1_agent_m0_debugaccess;                                           // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire  [16:0] onchip_memory2_0_s1_agent_m0_address;                                               // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire   [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                                            // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire         onchip_memory2_0_s1_agent_m0_read;                                                  // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire         onchip_memory2_0_s1_agent_m0_readdatavalid;                                         // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire         onchip_memory2_0_s1_agent_m0_lock;                                                  // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire  [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                             // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire         onchip_memory2_0_s1_agent_m0_write;                                                 // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire   [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                                            // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire         onchip_memory2_0_s1_agent_rf_source_valid;                                          // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [97:0] onchip_memory2_0_s1_agent_rf_source_data;                                           // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire         onchip_memory2_0_s1_agent_rf_source_ready;                                          // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire         onchip_memory2_0_s1_agent_rf_source_startofpacket;                                  // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire         onchip_memory2_0_s1_agent_rf_source_endofpacket;                                    // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                       // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [97:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                        // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                       // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [96:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> onchip_memory2_0_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                              // onchip_memory2_0_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire  [18:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire  [31:0] data_a_s1_agent_m0_readdata;                                                        // data_A_s1_translator:uav_readdata -> data_A_s1_agent:m0_readdata
	wire         data_a_s1_agent_m0_waitrequest;                                                     // data_A_s1_translator:uav_waitrequest -> data_A_s1_agent:m0_waitrequest
	wire         data_a_s1_agent_m0_debugaccess;                                                     // data_A_s1_agent:m0_debugaccess -> data_A_s1_translator:uav_debugaccess
	wire  [16:0] data_a_s1_agent_m0_address;                                                         // data_A_s1_agent:m0_address -> data_A_s1_translator:uav_address
	wire   [3:0] data_a_s1_agent_m0_byteenable;                                                      // data_A_s1_agent:m0_byteenable -> data_A_s1_translator:uav_byteenable
	wire         data_a_s1_agent_m0_read;                                                            // data_A_s1_agent:m0_read -> data_A_s1_translator:uav_read
	wire         data_a_s1_agent_m0_readdatavalid;                                                   // data_A_s1_translator:uav_readdatavalid -> data_A_s1_agent:m0_readdatavalid
	wire         data_a_s1_agent_m0_lock;                                                            // data_A_s1_agent:m0_lock -> data_A_s1_translator:uav_lock
	wire  [31:0] data_a_s1_agent_m0_writedata;                                                       // data_A_s1_agent:m0_writedata -> data_A_s1_translator:uav_writedata
	wire         data_a_s1_agent_m0_write;                                                           // data_A_s1_agent:m0_write -> data_A_s1_translator:uav_write
	wire   [2:0] data_a_s1_agent_m0_burstcount;                                                      // data_A_s1_agent:m0_burstcount -> data_A_s1_translator:uav_burstcount
	wire         data_a_s1_agent_rf_source_valid;                                                    // data_A_s1_agent:rf_source_valid -> data_A_s1_agent_rsp_fifo:in_valid
	wire  [97:0] data_a_s1_agent_rf_source_data;                                                     // data_A_s1_agent:rf_source_data -> data_A_s1_agent_rsp_fifo:in_data
	wire         data_a_s1_agent_rf_source_ready;                                                    // data_A_s1_agent_rsp_fifo:in_ready -> data_A_s1_agent:rf_source_ready
	wire         data_a_s1_agent_rf_source_startofpacket;                                            // data_A_s1_agent:rf_source_startofpacket -> data_A_s1_agent_rsp_fifo:in_startofpacket
	wire         data_a_s1_agent_rf_source_endofpacket;                                              // data_A_s1_agent:rf_source_endofpacket -> data_A_s1_agent_rsp_fifo:in_endofpacket
	wire         data_a_s1_agent_rsp_fifo_out_valid;                                                 // data_A_s1_agent_rsp_fifo:out_valid -> data_A_s1_agent:rf_sink_valid
	wire  [97:0] data_a_s1_agent_rsp_fifo_out_data;                                                  // data_A_s1_agent_rsp_fifo:out_data -> data_A_s1_agent:rf_sink_data
	wire         data_a_s1_agent_rsp_fifo_out_ready;                                                 // data_A_s1_agent:rf_sink_ready -> data_A_s1_agent_rsp_fifo:out_ready
	wire         data_a_s1_agent_rsp_fifo_out_startofpacket;                                         // data_A_s1_agent_rsp_fifo:out_startofpacket -> data_A_s1_agent:rf_sink_startofpacket
	wire         data_a_s1_agent_rsp_fifo_out_endofpacket;                                           // data_A_s1_agent_rsp_fifo:out_endofpacket -> data_A_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> data_A_s1_agent:cp_valid
	wire  [96:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> data_A_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                              // data_A_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire  [18:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> data_A_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> data_A_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> data_A_s1_agent:cp_endofpacket
	wire  [31:0] data_b_s1_agent_m0_readdata;                                                        // data_B_s1_translator:uav_readdata -> data_B_s1_agent:m0_readdata
	wire         data_b_s1_agent_m0_waitrequest;                                                     // data_B_s1_translator:uav_waitrequest -> data_B_s1_agent:m0_waitrequest
	wire         data_b_s1_agent_m0_debugaccess;                                                     // data_B_s1_agent:m0_debugaccess -> data_B_s1_translator:uav_debugaccess
	wire  [16:0] data_b_s1_agent_m0_address;                                                         // data_B_s1_agent:m0_address -> data_B_s1_translator:uav_address
	wire   [3:0] data_b_s1_agent_m0_byteenable;                                                      // data_B_s1_agent:m0_byteenable -> data_B_s1_translator:uav_byteenable
	wire         data_b_s1_agent_m0_read;                                                            // data_B_s1_agent:m0_read -> data_B_s1_translator:uav_read
	wire         data_b_s1_agent_m0_readdatavalid;                                                   // data_B_s1_translator:uav_readdatavalid -> data_B_s1_agent:m0_readdatavalid
	wire         data_b_s1_agent_m0_lock;                                                            // data_B_s1_agent:m0_lock -> data_B_s1_translator:uav_lock
	wire  [31:0] data_b_s1_agent_m0_writedata;                                                       // data_B_s1_agent:m0_writedata -> data_B_s1_translator:uav_writedata
	wire         data_b_s1_agent_m0_write;                                                           // data_B_s1_agent:m0_write -> data_B_s1_translator:uav_write
	wire   [2:0] data_b_s1_agent_m0_burstcount;                                                      // data_B_s1_agent:m0_burstcount -> data_B_s1_translator:uav_burstcount
	wire         data_b_s1_agent_rf_source_valid;                                                    // data_B_s1_agent:rf_source_valid -> data_B_s1_agent_rsp_fifo:in_valid
	wire  [97:0] data_b_s1_agent_rf_source_data;                                                     // data_B_s1_agent:rf_source_data -> data_B_s1_agent_rsp_fifo:in_data
	wire         data_b_s1_agent_rf_source_ready;                                                    // data_B_s1_agent_rsp_fifo:in_ready -> data_B_s1_agent:rf_source_ready
	wire         data_b_s1_agent_rf_source_startofpacket;                                            // data_B_s1_agent:rf_source_startofpacket -> data_B_s1_agent_rsp_fifo:in_startofpacket
	wire         data_b_s1_agent_rf_source_endofpacket;                                              // data_B_s1_agent:rf_source_endofpacket -> data_B_s1_agent_rsp_fifo:in_endofpacket
	wire         data_b_s1_agent_rsp_fifo_out_valid;                                                 // data_B_s1_agent_rsp_fifo:out_valid -> data_B_s1_agent:rf_sink_valid
	wire  [97:0] data_b_s1_agent_rsp_fifo_out_data;                                                  // data_B_s1_agent_rsp_fifo:out_data -> data_B_s1_agent:rf_sink_data
	wire         data_b_s1_agent_rsp_fifo_out_ready;                                                 // data_B_s1_agent:rf_sink_ready -> data_B_s1_agent_rsp_fifo:out_ready
	wire         data_b_s1_agent_rsp_fifo_out_startofpacket;                                         // data_B_s1_agent_rsp_fifo:out_startofpacket -> data_B_s1_agent:rf_sink_startofpacket
	wire         data_b_s1_agent_rsp_fifo_out_endofpacket;                                           // data_B_s1_agent_rsp_fifo:out_endofpacket -> data_B_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> data_B_s1_agent:cp_valid
	wire  [96:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> data_B_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                              // data_B_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire  [18:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> data_B_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> data_B_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> data_B_s1_agent:cp_endofpacket
	wire  [31:0] reset_pulsecounter_s1_agent_m0_readdata;                                            // reset_pulseCounter_s1_translator:uav_readdata -> reset_pulseCounter_s1_agent:m0_readdata
	wire         reset_pulsecounter_s1_agent_m0_waitrequest;                                         // reset_pulseCounter_s1_translator:uav_waitrequest -> reset_pulseCounter_s1_agent:m0_waitrequest
	wire         reset_pulsecounter_s1_agent_m0_debugaccess;                                         // reset_pulseCounter_s1_agent:m0_debugaccess -> reset_pulseCounter_s1_translator:uav_debugaccess
	wire  [16:0] reset_pulsecounter_s1_agent_m0_address;                                             // reset_pulseCounter_s1_agent:m0_address -> reset_pulseCounter_s1_translator:uav_address
	wire   [3:0] reset_pulsecounter_s1_agent_m0_byteenable;                                          // reset_pulseCounter_s1_agent:m0_byteenable -> reset_pulseCounter_s1_translator:uav_byteenable
	wire         reset_pulsecounter_s1_agent_m0_read;                                                // reset_pulseCounter_s1_agent:m0_read -> reset_pulseCounter_s1_translator:uav_read
	wire         reset_pulsecounter_s1_agent_m0_readdatavalid;                                       // reset_pulseCounter_s1_translator:uav_readdatavalid -> reset_pulseCounter_s1_agent:m0_readdatavalid
	wire         reset_pulsecounter_s1_agent_m0_lock;                                                // reset_pulseCounter_s1_agent:m0_lock -> reset_pulseCounter_s1_translator:uav_lock
	wire  [31:0] reset_pulsecounter_s1_agent_m0_writedata;                                           // reset_pulseCounter_s1_agent:m0_writedata -> reset_pulseCounter_s1_translator:uav_writedata
	wire         reset_pulsecounter_s1_agent_m0_write;                                               // reset_pulseCounter_s1_agent:m0_write -> reset_pulseCounter_s1_translator:uav_write
	wire   [2:0] reset_pulsecounter_s1_agent_m0_burstcount;                                          // reset_pulseCounter_s1_agent:m0_burstcount -> reset_pulseCounter_s1_translator:uav_burstcount
	wire         reset_pulsecounter_s1_agent_rf_source_valid;                                        // reset_pulseCounter_s1_agent:rf_source_valid -> reset_pulseCounter_s1_agent_rsp_fifo:in_valid
	wire  [97:0] reset_pulsecounter_s1_agent_rf_source_data;                                         // reset_pulseCounter_s1_agent:rf_source_data -> reset_pulseCounter_s1_agent_rsp_fifo:in_data
	wire         reset_pulsecounter_s1_agent_rf_source_ready;                                        // reset_pulseCounter_s1_agent_rsp_fifo:in_ready -> reset_pulseCounter_s1_agent:rf_source_ready
	wire         reset_pulsecounter_s1_agent_rf_source_startofpacket;                                // reset_pulseCounter_s1_agent:rf_source_startofpacket -> reset_pulseCounter_s1_agent_rsp_fifo:in_startofpacket
	wire         reset_pulsecounter_s1_agent_rf_source_endofpacket;                                  // reset_pulseCounter_s1_agent:rf_source_endofpacket -> reset_pulseCounter_s1_agent_rsp_fifo:in_endofpacket
	wire         reset_pulsecounter_s1_agent_rsp_fifo_out_valid;                                     // reset_pulseCounter_s1_agent_rsp_fifo:out_valid -> reset_pulseCounter_s1_agent:rf_sink_valid
	wire  [97:0] reset_pulsecounter_s1_agent_rsp_fifo_out_data;                                      // reset_pulseCounter_s1_agent_rsp_fifo:out_data -> reset_pulseCounter_s1_agent:rf_sink_data
	wire         reset_pulsecounter_s1_agent_rsp_fifo_out_ready;                                     // reset_pulseCounter_s1_agent:rf_sink_ready -> reset_pulseCounter_s1_agent_rsp_fifo:out_ready
	wire         reset_pulsecounter_s1_agent_rsp_fifo_out_startofpacket;                             // reset_pulseCounter_s1_agent_rsp_fifo:out_startofpacket -> reset_pulseCounter_s1_agent:rf_sink_startofpacket
	wire         reset_pulsecounter_s1_agent_rsp_fifo_out_endofpacket;                               // reset_pulseCounter_s1_agent_rsp_fifo:out_endofpacket -> reset_pulseCounter_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> reset_pulseCounter_s1_agent:cp_valid
	wire  [96:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> reset_pulseCounter_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                              // reset_pulseCounter_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire  [18:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> reset_pulseCounter_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> reset_pulseCounter_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> reset_pulseCounter_s1_agent:cp_endofpacket
	wire  [31:0] wrreg_s1_agent_m0_readdata;                                                         // wrreg_s1_translator:uav_readdata -> wrreg_s1_agent:m0_readdata
	wire         wrreg_s1_agent_m0_waitrequest;                                                      // wrreg_s1_translator:uav_waitrequest -> wrreg_s1_agent:m0_waitrequest
	wire         wrreg_s1_agent_m0_debugaccess;                                                      // wrreg_s1_agent:m0_debugaccess -> wrreg_s1_translator:uav_debugaccess
	wire  [16:0] wrreg_s1_agent_m0_address;                                                          // wrreg_s1_agent:m0_address -> wrreg_s1_translator:uav_address
	wire   [3:0] wrreg_s1_agent_m0_byteenable;                                                       // wrreg_s1_agent:m0_byteenable -> wrreg_s1_translator:uav_byteenable
	wire         wrreg_s1_agent_m0_read;                                                             // wrreg_s1_agent:m0_read -> wrreg_s1_translator:uav_read
	wire         wrreg_s1_agent_m0_readdatavalid;                                                    // wrreg_s1_translator:uav_readdatavalid -> wrreg_s1_agent:m0_readdatavalid
	wire         wrreg_s1_agent_m0_lock;                                                             // wrreg_s1_agent:m0_lock -> wrreg_s1_translator:uav_lock
	wire  [31:0] wrreg_s1_agent_m0_writedata;                                                        // wrreg_s1_agent:m0_writedata -> wrreg_s1_translator:uav_writedata
	wire         wrreg_s1_agent_m0_write;                                                            // wrreg_s1_agent:m0_write -> wrreg_s1_translator:uav_write
	wire   [2:0] wrreg_s1_agent_m0_burstcount;                                                       // wrreg_s1_agent:m0_burstcount -> wrreg_s1_translator:uav_burstcount
	wire         wrreg_s1_agent_rf_source_valid;                                                     // wrreg_s1_agent:rf_source_valid -> wrreg_s1_agent_rsp_fifo:in_valid
	wire  [97:0] wrreg_s1_agent_rf_source_data;                                                      // wrreg_s1_agent:rf_source_data -> wrreg_s1_agent_rsp_fifo:in_data
	wire         wrreg_s1_agent_rf_source_ready;                                                     // wrreg_s1_agent_rsp_fifo:in_ready -> wrreg_s1_agent:rf_source_ready
	wire         wrreg_s1_agent_rf_source_startofpacket;                                             // wrreg_s1_agent:rf_source_startofpacket -> wrreg_s1_agent_rsp_fifo:in_startofpacket
	wire         wrreg_s1_agent_rf_source_endofpacket;                                               // wrreg_s1_agent:rf_source_endofpacket -> wrreg_s1_agent_rsp_fifo:in_endofpacket
	wire         wrreg_s1_agent_rsp_fifo_out_valid;                                                  // wrreg_s1_agent_rsp_fifo:out_valid -> wrreg_s1_agent:rf_sink_valid
	wire  [97:0] wrreg_s1_agent_rsp_fifo_out_data;                                                   // wrreg_s1_agent_rsp_fifo:out_data -> wrreg_s1_agent:rf_sink_data
	wire         wrreg_s1_agent_rsp_fifo_out_ready;                                                  // wrreg_s1_agent:rf_sink_ready -> wrreg_s1_agent_rsp_fifo:out_ready
	wire         wrreg_s1_agent_rsp_fifo_out_startofpacket;                                          // wrreg_s1_agent_rsp_fifo:out_startofpacket -> wrreg_s1_agent:rf_sink_startofpacket
	wire         wrreg_s1_agent_rsp_fifo_out_endofpacket;                                            // wrreg_s1_agent_rsp_fifo:out_endofpacket -> wrreg_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> wrreg_s1_agent:cp_valid
	wire  [96:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> wrreg_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                              // wrreg_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire  [18:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> wrreg_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> wrreg_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> wrreg_s1_agent:cp_endofpacket
	wire  [31:0] wrfull_s1_agent_m0_readdata;                                                        // wrfull_s1_translator:uav_readdata -> wrfull_s1_agent:m0_readdata
	wire         wrfull_s1_agent_m0_waitrequest;                                                     // wrfull_s1_translator:uav_waitrequest -> wrfull_s1_agent:m0_waitrequest
	wire         wrfull_s1_agent_m0_debugaccess;                                                     // wrfull_s1_agent:m0_debugaccess -> wrfull_s1_translator:uav_debugaccess
	wire  [16:0] wrfull_s1_agent_m0_address;                                                         // wrfull_s1_agent:m0_address -> wrfull_s1_translator:uav_address
	wire   [3:0] wrfull_s1_agent_m0_byteenable;                                                      // wrfull_s1_agent:m0_byteenable -> wrfull_s1_translator:uav_byteenable
	wire         wrfull_s1_agent_m0_read;                                                            // wrfull_s1_agent:m0_read -> wrfull_s1_translator:uav_read
	wire         wrfull_s1_agent_m0_readdatavalid;                                                   // wrfull_s1_translator:uav_readdatavalid -> wrfull_s1_agent:m0_readdatavalid
	wire         wrfull_s1_agent_m0_lock;                                                            // wrfull_s1_agent:m0_lock -> wrfull_s1_translator:uav_lock
	wire  [31:0] wrfull_s1_agent_m0_writedata;                                                       // wrfull_s1_agent:m0_writedata -> wrfull_s1_translator:uav_writedata
	wire         wrfull_s1_agent_m0_write;                                                           // wrfull_s1_agent:m0_write -> wrfull_s1_translator:uav_write
	wire   [2:0] wrfull_s1_agent_m0_burstcount;                                                      // wrfull_s1_agent:m0_burstcount -> wrfull_s1_translator:uav_burstcount
	wire         wrfull_s1_agent_rf_source_valid;                                                    // wrfull_s1_agent:rf_source_valid -> wrfull_s1_agent_rsp_fifo:in_valid
	wire  [97:0] wrfull_s1_agent_rf_source_data;                                                     // wrfull_s1_agent:rf_source_data -> wrfull_s1_agent_rsp_fifo:in_data
	wire         wrfull_s1_agent_rf_source_ready;                                                    // wrfull_s1_agent_rsp_fifo:in_ready -> wrfull_s1_agent:rf_source_ready
	wire         wrfull_s1_agent_rf_source_startofpacket;                                            // wrfull_s1_agent:rf_source_startofpacket -> wrfull_s1_agent_rsp_fifo:in_startofpacket
	wire         wrfull_s1_agent_rf_source_endofpacket;                                              // wrfull_s1_agent:rf_source_endofpacket -> wrfull_s1_agent_rsp_fifo:in_endofpacket
	wire         wrfull_s1_agent_rsp_fifo_out_valid;                                                 // wrfull_s1_agent_rsp_fifo:out_valid -> wrfull_s1_agent:rf_sink_valid
	wire  [97:0] wrfull_s1_agent_rsp_fifo_out_data;                                                  // wrfull_s1_agent_rsp_fifo:out_data -> wrfull_s1_agent:rf_sink_data
	wire         wrfull_s1_agent_rsp_fifo_out_ready;                                                 // wrfull_s1_agent:rf_sink_ready -> wrfull_s1_agent_rsp_fifo:out_ready
	wire         wrfull_s1_agent_rsp_fifo_out_startofpacket;                                         // wrfull_s1_agent_rsp_fifo:out_startofpacket -> wrfull_s1_agent:rf_sink_startofpacket
	wire         wrfull_s1_agent_rsp_fifo_out_endofpacket;                                           // wrfull_s1_agent_rsp_fifo:out_endofpacket -> wrfull_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> wrfull_s1_agent:cp_valid
	wire  [96:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> wrfull_s1_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                              // wrfull_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire  [18:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> wrfull_s1_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> wrfull_s1_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> wrfull_s1_agent:cp_endofpacket
	wire  [31:0] screen_s1_agent_m0_readdata;                                                        // screen_s1_translator:uav_readdata -> screen_s1_agent:m0_readdata
	wire         screen_s1_agent_m0_waitrequest;                                                     // screen_s1_translator:uav_waitrequest -> screen_s1_agent:m0_waitrequest
	wire         screen_s1_agent_m0_debugaccess;                                                     // screen_s1_agent:m0_debugaccess -> screen_s1_translator:uav_debugaccess
	wire  [16:0] screen_s1_agent_m0_address;                                                         // screen_s1_agent:m0_address -> screen_s1_translator:uav_address
	wire   [3:0] screen_s1_agent_m0_byteenable;                                                      // screen_s1_agent:m0_byteenable -> screen_s1_translator:uav_byteenable
	wire         screen_s1_agent_m0_read;                                                            // screen_s1_agent:m0_read -> screen_s1_translator:uav_read
	wire         screen_s1_agent_m0_readdatavalid;                                                   // screen_s1_translator:uav_readdatavalid -> screen_s1_agent:m0_readdatavalid
	wire         screen_s1_agent_m0_lock;                                                            // screen_s1_agent:m0_lock -> screen_s1_translator:uav_lock
	wire  [31:0] screen_s1_agent_m0_writedata;                                                       // screen_s1_agent:m0_writedata -> screen_s1_translator:uav_writedata
	wire         screen_s1_agent_m0_write;                                                           // screen_s1_agent:m0_write -> screen_s1_translator:uav_write
	wire   [2:0] screen_s1_agent_m0_burstcount;                                                      // screen_s1_agent:m0_burstcount -> screen_s1_translator:uav_burstcount
	wire         screen_s1_agent_rf_source_valid;                                                    // screen_s1_agent:rf_source_valid -> screen_s1_agent_rsp_fifo:in_valid
	wire  [97:0] screen_s1_agent_rf_source_data;                                                     // screen_s1_agent:rf_source_data -> screen_s1_agent_rsp_fifo:in_data
	wire         screen_s1_agent_rf_source_ready;                                                    // screen_s1_agent_rsp_fifo:in_ready -> screen_s1_agent:rf_source_ready
	wire         screen_s1_agent_rf_source_startofpacket;                                            // screen_s1_agent:rf_source_startofpacket -> screen_s1_agent_rsp_fifo:in_startofpacket
	wire         screen_s1_agent_rf_source_endofpacket;                                              // screen_s1_agent:rf_source_endofpacket -> screen_s1_agent_rsp_fifo:in_endofpacket
	wire         screen_s1_agent_rsp_fifo_out_valid;                                                 // screen_s1_agent_rsp_fifo:out_valid -> screen_s1_agent:rf_sink_valid
	wire  [97:0] screen_s1_agent_rsp_fifo_out_data;                                                  // screen_s1_agent_rsp_fifo:out_data -> screen_s1_agent:rf_sink_data
	wire         screen_s1_agent_rsp_fifo_out_ready;                                                 // screen_s1_agent:rf_sink_ready -> screen_s1_agent_rsp_fifo:out_ready
	wire         screen_s1_agent_rsp_fifo_out_startofpacket;                                         // screen_s1_agent_rsp_fifo:out_startofpacket -> screen_s1_agent:rf_sink_startofpacket
	wire         screen_s1_agent_rsp_fifo_out_endofpacket;                                           // screen_s1_agent_rsp_fifo:out_endofpacket -> screen_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> screen_s1_agent:cp_valid
	wire  [96:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> screen_s1_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                              // screen_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire  [18:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> screen_s1_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> screen_s1_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> screen_s1_agent:cp_endofpacket
	wire  [31:0] direction_analogic_s1_agent_m0_readdata;                                            // Direction_Analogic_s1_translator:uav_readdata -> Direction_Analogic_s1_agent:m0_readdata
	wire         direction_analogic_s1_agent_m0_waitrequest;                                         // Direction_Analogic_s1_translator:uav_waitrequest -> Direction_Analogic_s1_agent:m0_waitrequest
	wire         direction_analogic_s1_agent_m0_debugaccess;                                         // Direction_Analogic_s1_agent:m0_debugaccess -> Direction_Analogic_s1_translator:uav_debugaccess
	wire  [16:0] direction_analogic_s1_agent_m0_address;                                             // Direction_Analogic_s1_agent:m0_address -> Direction_Analogic_s1_translator:uav_address
	wire   [3:0] direction_analogic_s1_agent_m0_byteenable;                                          // Direction_Analogic_s1_agent:m0_byteenable -> Direction_Analogic_s1_translator:uav_byteenable
	wire         direction_analogic_s1_agent_m0_read;                                                // Direction_Analogic_s1_agent:m0_read -> Direction_Analogic_s1_translator:uav_read
	wire         direction_analogic_s1_agent_m0_readdatavalid;                                       // Direction_Analogic_s1_translator:uav_readdatavalid -> Direction_Analogic_s1_agent:m0_readdatavalid
	wire         direction_analogic_s1_agent_m0_lock;                                                // Direction_Analogic_s1_agent:m0_lock -> Direction_Analogic_s1_translator:uav_lock
	wire  [31:0] direction_analogic_s1_agent_m0_writedata;                                           // Direction_Analogic_s1_agent:m0_writedata -> Direction_Analogic_s1_translator:uav_writedata
	wire         direction_analogic_s1_agent_m0_write;                                               // Direction_Analogic_s1_agent:m0_write -> Direction_Analogic_s1_translator:uav_write
	wire   [2:0] direction_analogic_s1_agent_m0_burstcount;                                          // Direction_Analogic_s1_agent:m0_burstcount -> Direction_Analogic_s1_translator:uav_burstcount
	wire         direction_analogic_s1_agent_rf_source_valid;                                        // Direction_Analogic_s1_agent:rf_source_valid -> Direction_Analogic_s1_agent_rsp_fifo:in_valid
	wire  [97:0] direction_analogic_s1_agent_rf_source_data;                                         // Direction_Analogic_s1_agent:rf_source_data -> Direction_Analogic_s1_agent_rsp_fifo:in_data
	wire         direction_analogic_s1_agent_rf_source_ready;                                        // Direction_Analogic_s1_agent_rsp_fifo:in_ready -> Direction_Analogic_s1_agent:rf_source_ready
	wire         direction_analogic_s1_agent_rf_source_startofpacket;                                // Direction_Analogic_s1_agent:rf_source_startofpacket -> Direction_Analogic_s1_agent_rsp_fifo:in_startofpacket
	wire         direction_analogic_s1_agent_rf_source_endofpacket;                                  // Direction_Analogic_s1_agent:rf_source_endofpacket -> Direction_Analogic_s1_agent_rsp_fifo:in_endofpacket
	wire         direction_analogic_s1_agent_rsp_fifo_out_valid;                                     // Direction_Analogic_s1_agent_rsp_fifo:out_valid -> Direction_Analogic_s1_agent:rf_sink_valid
	wire  [97:0] direction_analogic_s1_agent_rsp_fifo_out_data;                                      // Direction_Analogic_s1_agent_rsp_fifo:out_data -> Direction_Analogic_s1_agent:rf_sink_data
	wire         direction_analogic_s1_agent_rsp_fifo_out_ready;                                     // Direction_Analogic_s1_agent:rf_sink_ready -> Direction_Analogic_s1_agent_rsp_fifo:out_ready
	wire         direction_analogic_s1_agent_rsp_fifo_out_startofpacket;                             // Direction_Analogic_s1_agent_rsp_fifo:out_startofpacket -> Direction_Analogic_s1_agent:rf_sink_startofpacket
	wire         direction_analogic_s1_agent_rsp_fifo_out_endofpacket;                               // Direction_Analogic_s1_agent_rsp_fifo:out_endofpacket -> Direction_Analogic_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> Direction_Analogic_s1_agent:cp_valid
	wire  [96:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> Direction_Analogic_s1_agent:cp_data
	wire         cmd_mux_010_src_ready;                                                              // Direction_Analogic_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire  [18:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> Direction_Analogic_s1_agent:cp_channel
	wire         cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> Direction_Analogic_s1_agent:cp_startofpacket
	wire         cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> Direction_Analogic_s1_agent:cp_endofpacket
	wire  [31:0] a_s1_agent_m0_readdata;                                                             // A_s1_translator:uav_readdata -> A_s1_agent:m0_readdata
	wire         a_s1_agent_m0_waitrequest;                                                          // A_s1_translator:uav_waitrequest -> A_s1_agent:m0_waitrequest
	wire         a_s1_agent_m0_debugaccess;                                                          // A_s1_agent:m0_debugaccess -> A_s1_translator:uav_debugaccess
	wire  [16:0] a_s1_agent_m0_address;                                                              // A_s1_agent:m0_address -> A_s1_translator:uav_address
	wire   [3:0] a_s1_agent_m0_byteenable;                                                           // A_s1_agent:m0_byteenable -> A_s1_translator:uav_byteenable
	wire         a_s1_agent_m0_read;                                                                 // A_s1_agent:m0_read -> A_s1_translator:uav_read
	wire         a_s1_agent_m0_readdatavalid;                                                        // A_s1_translator:uav_readdatavalid -> A_s1_agent:m0_readdatavalid
	wire         a_s1_agent_m0_lock;                                                                 // A_s1_agent:m0_lock -> A_s1_translator:uav_lock
	wire  [31:0] a_s1_agent_m0_writedata;                                                            // A_s1_agent:m0_writedata -> A_s1_translator:uav_writedata
	wire         a_s1_agent_m0_write;                                                                // A_s1_agent:m0_write -> A_s1_translator:uav_write
	wire   [2:0] a_s1_agent_m0_burstcount;                                                           // A_s1_agent:m0_burstcount -> A_s1_translator:uav_burstcount
	wire         a_s1_agent_rf_source_valid;                                                         // A_s1_agent:rf_source_valid -> A_s1_agent_rsp_fifo:in_valid
	wire  [97:0] a_s1_agent_rf_source_data;                                                          // A_s1_agent:rf_source_data -> A_s1_agent_rsp_fifo:in_data
	wire         a_s1_agent_rf_source_ready;                                                         // A_s1_agent_rsp_fifo:in_ready -> A_s1_agent:rf_source_ready
	wire         a_s1_agent_rf_source_startofpacket;                                                 // A_s1_agent:rf_source_startofpacket -> A_s1_agent_rsp_fifo:in_startofpacket
	wire         a_s1_agent_rf_source_endofpacket;                                                   // A_s1_agent:rf_source_endofpacket -> A_s1_agent_rsp_fifo:in_endofpacket
	wire         a_s1_agent_rsp_fifo_out_valid;                                                      // A_s1_agent_rsp_fifo:out_valid -> A_s1_agent:rf_sink_valid
	wire  [97:0] a_s1_agent_rsp_fifo_out_data;                                                       // A_s1_agent_rsp_fifo:out_data -> A_s1_agent:rf_sink_data
	wire         a_s1_agent_rsp_fifo_out_ready;                                                      // A_s1_agent:rf_sink_ready -> A_s1_agent_rsp_fifo:out_ready
	wire         a_s1_agent_rsp_fifo_out_startofpacket;                                              // A_s1_agent_rsp_fifo:out_startofpacket -> A_s1_agent:rf_sink_startofpacket
	wire         a_s1_agent_rsp_fifo_out_endofpacket;                                                // A_s1_agent_rsp_fifo:out_endofpacket -> A_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_011_src_valid;                                                              // cmd_mux_011:src_valid -> A_s1_agent:cp_valid
	wire  [96:0] cmd_mux_011_src_data;                                                               // cmd_mux_011:src_data -> A_s1_agent:cp_data
	wire         cmd_mux_011_src_ready;                                                              // A_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire  [18:0] cmd_mux_011_src_channel;                                                            // cmd_mux_011:src_channel -> A_s1_agent:cp_channel
	wire         cmd_mux_011_src_startofpacket;                                                      // cmd_mux_011:src_startofpacket -> A_s1_agent:cp_startofpacket
	wire         cmd_mux_011_src_endofpacket;                                                        // cmd_mux_011:src_endofpacket -> A_s1_agent:cp_endofpacket
	wire  [31:0] tr_s1_agent_m0_readdata;                                                            // TR_s1_translator:uav_readdata -> TR_s1_agent:m0_readdata
	wire         tr_s1_agent_m0_waitrequest;                                                         // TR_s1_translator:uav_waitrequest -> TR_s1_agent:m0_waitrequest
	wire         tr_s1_agent_m0_debugaccess;                                                         // TR_s1_agent:m0_debugaccess -> TR_s1_translator:uav_debugaccess
	wire  [16:0] tr_s1_agent_m0_address;                                                             // TR_s1_agent:m0_address -> TR_s1_translator:uav_address
	wire   [3:0] tr_s1_agent_m0_byteenable;                                                          // TR_s1_agent:m0_byteenable -> TR_s1_translator:uav_byteenable
	wire         tr_s1_agent_m0_read;                                                                // TR_s1_agent:m0_read -> TR_s1_translator:uav_read
	wire         tr_s1_agent_m0_readdatavalid;                                                       // TR_s1_translator:uav_readdatavalid -> TR_s1_agent:m0_readdatavalid
	wire         tr_s1_agent_m0_lock;                                                                // TR_s1_agent:m0_lock -> TR_s1_translator:uav_lock
	wire  [31:0] tr_s1_agent_m0_writedata;                                                           // TR_s1_agent:m0_writedata -> TR_s1_translator:uav_writedata
	wire         tr_s1_agent_m0_write;                                                               // TR_s1_agent:m0_write -> TR_s1_translator:uav_write
	wire   [2:0] tr_s1_agent_m0_burstcount;                                                          // TR_s1_agent:m0_burstcount -> TR_s1_translator:uav_burstcount
	wire         tr_s1_agent_rf_source_valid;                                                        // TR_s1_agent:rf_source_valid -> TR_s1_agent_rsp_fifo:in_valid
	wire  [97:0] tr_s1_agent_rf_source_data;                                                         // TR_s1_agent:rf_source_data -> TR_s1_agent_rsp_fifo:in_data
	wire         tr_s1_agent_rf_source_ready;                                                        // TR_s1_agent_rsp_fifo:in_ready -> TR_s1_agent:rf_source_ready
	wire         tr_s1_agent_rf_source_startofpacket;                                                // TR_s1_agent:rf_source_startofpacket -> TR_s1_agent_rsp_fifo:in_startofpacket
	wire         tr_s1_agent_rf_source_endofpacket;                                                  // TR_s1_agent:rf_source_endofpacket -> TR_s1_agent_rsp_fifo:in_endofpacket
	wire         tr_s1_agent_rsp_fifo_out_valid;                                                     // TR_s1_agent_rsp_fifo:out_valid -> TR_s1_agent:rf_sink_valid
	wire  [97:0] tr_s1_agent_rsp_fifo_out_data;                                                      // TR_s1_agent_rsp_fifo:out_data -> TR_s1_agent:rf_sink_data
	wire         tr_s1_agent_rsp_fifo_out_ready;                                                     // TR_s1_agent:rf_sink_ready -> TR_s1_agent_rsp_fifo:out_ready
	wire         tr_s1_agent_rsp_fifo_out_startofpacket;                                             // TR_s1_agent_rsp_fifo:out_startofpacket -> TR_s1_agent:rf_sink_startofpacket
	wire         tr_s1_agent_rsp_fifo_out_endofpacket;                                               // TR_s1_agent_rsp_fifo:out_endofpacket -> TR_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_012_src_valid;                                                              // cmd_mux_012:src_valid -> TR_s1_agent:cp_valid
	wire  [96:0] cmd_mux_012_src_data;                                                               // cmd_mux_012:src_data -> TR_s1_agent:cp_data
	wire         cmd_mux_012_src_ready;                                                              // TR_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire  [18:0] cmd_mux_012_src_channel;                                                            // cmd_mux_012:src_channel -> TR_s1_agent:cp_channel
	wire         cmd_mux_012_src_startofpacket;                                                      // cmd_mux_012:src_startofpacket -> TR_s1_agent:cp_startofpacket
	wire         cmd_mux_012_src_endofpacket;                                                        // cmd_mux_012:src_endofpacket -> TR_s1_agent:cp_endofpacket
	wire  [31:0] tl_s1_agent_m0_readdata;                                                            // TL_s1_translator:uav_readdata -> TL_s1_agent:m0_readdata
	wire         tl_s1_agent_m0_waitrequest;                                                         // TL_s1_translator:uav_waitrequest -> TL_s1_agent:m0_waitrequest
	wire         tl_s1_agent_m0_debugaccess;                                                         // TL_s1_agent:m0_debugaccess -> TL_s1_translator:uav_debugaccess
	wire  [16:0] tl_s1_agent_m0_address;                                                             // TL_s1_agent:m0_address -> TL_s1_translator:uav_address
	wire   [3:0] tl_s1_agent_m0_byteenable;                                                          // TL_s1_agent:m0_byteenable -> TL_s1_translator:uav_byteenable
	wire         tl_s1_agent_m0_read;                                                                // TL_s1_agent:m0_read -> TL_s1_translator:uav_read
	wire         tl_s1_agent_m0_readdatavalid;                                                       // TL_s1_translator:uav_readdatavalid -> TL_s1_agent:m0_readdatavalid
	wire         tl_s1_agent_m0_lock;                                                                // TL_s1_agent:m0_lock -> TL_s1_translator:uav_lock
	wire  [31:0] tl_s1_agent_m0_writedata;                                                           // TL_s1_agent:m0_writedata -> TL_s1_translator:uav_writedata
	wire         tl_s1_agent_m0_write;                                                               // TL_s1_agent:m0_write -> TL_s1_translator:uav_write
	wire   [2:0] tl_s1_agent_m0_burstcount;                                                          // TL_s1_agent:m0_burstcount -> TL_s1_translator:uav_burstcount
	wire         tl_s1_agent_rf_source_valid;                                                        // TL_s1_agent:rf_source_valid -> TL_s1_agent_rsp_fifo:in_valid
	wire  [97:0] tl_s1_agent_rf_source_data;                                                         // TL_s1_agent:rf_source_data -> TL_s1_agent_rsp_fifo:in_data
	wire         tl_s1_agent_rf_source_ready;                                                        // TL_s1_agent_rsp_fifo:in_ready -> TL_s1_agent:rf_source_ready
	wire         tl_s1_agent_rf_source_startofpacket;                                                // TL_s1_agent:rf_source_startofpacket -> TL_s1_agent_rsp_fifo:in_startofpacket
	wire         tl_s1_agent_rf_source_endofpacket;                                                  // TL_s1_agent:rf_source_endofpacket -> TL_s1_agent_rsp_fifo:in_endofpacket
	wire         tl_s1_agent_rsp_fifo_out_valid;                                                     // TL_s1_agent_rsp_fifo:out_valid -> TL_s1_agent:rf_sink_valid
	wire  [97:0] tl_s1_agent_rsp_fifo_out_data;                                                      // TL_s1_agent_rsp_fifo:out_data -> TL_s1_agent:rf_sink_data
	wire         tl_s1_agent_rsp_fifo_out_ready;                                                     // TL_s1_agent:rf_sink_ready -> TL_s1_agent_rsp_fifo:out_ready
	wire         tl_s1_agent_rsp_fifo_out_startofpacket;                                             // TL_s1_agent_rsp_fifo:out_startofpacket -> TL_s1_agent:rf_sink_startofpacket
	wire         tl_s1_agent_rsp_fifo_out_endofpacket;                                               // TL_s1_agent_rsp_fifo:out_endofpacket -> TL_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_013_src_valid;                                                              // cmd_mux_013:src_valid -> TL_s1_agent:cp_valid
	wire  [96:0] cmd_mux_013_src_data;                                                               // cmd_mux_013:src_data -> TL_s1_agent:cp_data
	wire         cmd_mux_013_src_ready;                                                              // TL_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire  [18:0] cmd_mux_013_src_channel;                                                            // cmd_mux_013:src_channel -> TL_s1_agent:cp_channel
	wire         cmd_mux_013_src_startofpacket;                                                      // cmd_mux_013:src_startofpacket -> TL_s1_agent:cp_startofpacket
	wire         cmd_mux_013_src_endofpacket;                                                        // cmd_mux_013:src_endofpacket -> TL_s1_agent:cp_endofpacket
	wire  [31:0] b_s1_agent_m0_readdata;                                                             // B_s1_translator:uav_readdata -> B_s1_agent:m0_readdata
	wire         b_s1_agent_m0_waitrequest;                                                          // B_s1_translator:uav_waitrequest -> B_s1_agent:m0_waitrequest
	wire         b_s1_agent_m0_debugaccess;                                                          // B_s1_agent:m0_debugaccess -> B_s1_translator:uav_debugaccess
	wire  [16:0] b_s1_agent_m0_address;                                                              // B_s1_agent:m0_address -> B_s1_translator:uav_address
	wire   [3:0] b_s1_agent_m0_byteenable;                                                           // B_s1_agent:m0_byteenable -> B_s1_translator:uav_byteenable
	wire         b_s1_agent_m0_read;                                                                 // B_s1_agent:m0_read -> B_s1_translator:uav_read
	wire         b_s1_agent_m0_readdatavalid;                                                        // B_s1_translator:uav_readdatavalid -> B_s1_agent:m0_readdatavalid
	wire         b_s1_agent_m0_lock;                                                                 // B_s1_agent:m0_lock -> B_s1_translator:uav_lock
	wire  [31:0] b_s1_agent_m0_writedata;                                                            // B_s1_agent:m0_writedata -> B_s1_translator:uav_writedata
	wire         b_s1_agent_m0_write;                                                                // B_s1_agent:m0_write -> B_s1_translator:uav_write
	wire   [2:0] b_s1_agent_m0_burstcount;                                                           // B_s1_agent:m0_burstcount -> B_s1_translator:uav_burstcount
	wire         b_s1_agent_rf_source_valid;                                                         // B_s1_agent:rf_source_valid -> B_s1_agent_rsp_fifo:in_valid
	wire  [97:0] b_s1_agent_rf_source_data;                                                          // B_s1_agent:rf_source_data -> B_s1_agent_rsp_fifo:in_data
	wire         b_s1_agent_rf_source_ready;                                                         // B_s1_agent_rsp_fifo:in_ready -> B_s1_agent:rf_source_ready
	wire         b_s1_agent_rf_source_startofpacket;                                                 // B_s1_agent:rf_source_startofpacket -> B_s1_agent_rsp_fifo:in_startofpacket
	wire         b_s1_agent_rf_source_endofpacket;                                                   // B_s1_agent:rf_source_endofpacket -> B_s1_agent_rsp_fifo:in_endofpacket
	wire         b_s1_agent_rsp_fifo_out_valid;                                                      // B_s1_agent_rsp_fifo:out_valid -> B_s1_agent:rf_sink_valid
	wire  [97:0] b_s1_agent_rsp_fifo_out_data;                                                       // B_s1_agent_rsp_fifo:out_data -> B_s1_agent:rf_sink_data
	wire         b_s1_agent_rsp_fifo_out_ready;                                                      // B_s1_agent:rf_sink_ready -> B_s1_agent_rsp_fifo:out_ready
	wire         b_s1_agent_rsp_fifo_out_startofpacket;                                              // B_s1_agent_rsp_fifo:out_startofpacket -> B_s1_agent:rf_sink_startofpacket
	wire         b_s1_agent_rsp_fifo_out_endofpacket;                                                // B_s1_agent_rsp_fifo:out_endofpacket -> B_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_014_src_valid;                                                              // cmd_mux_014:src_valid -> B_s1_agent:cp_valid
	wire  [96:0] cmd_mux_014_src_data;                                                               // cmd_mux_014:src_data -> B_s1_agent:cp_data
	wire         cmd_mux_014_src_ready;                                                              // B_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire  [18:0] cmd_mux_014_src_channel;                                                            // cmd_mux_014:src_channel -> B_s1_agent:cp_channel
	wire         cmd_mux_014_src_startofpacket;                                                      // cmd_mux_014:src_startofpacket -> B_s1_agent:cp_startofpacket
	wire         cmd_mux_014_src_endofpacket;                                                        // cmd_mux_014:src_endofpacket -> B_s1_agent:cp_endofpacket
	wire  [31:0] y_s1_agent_m0_readdata;                                                             // y_s1_translator:uav_readdata -> y_s1_agent:m0_readdata
	wire         y_s1_agent_m0_waitrequest;                                                          // y_s1_translator:uav_waitrequest -> y_s1_agent:m0_waitrequest
	wire         y_s1_agent_m0_debugaccess;                                                          // y_s1_agent:m0_debugaccess -> y_s1_translator:uav_debugaccess
	wire  [16:0] y_s1_agent_m0_address;                                                              // y_s1_agent:m0_address -> y_s1_translator:uav_address
	wire   [3:0] y_s1_agent_m0_byteenable;                                                           // y_s1_agent:m0_byteenable -> y_s1_translator:uav_byteenable
	wire         y_s1_agent_m0_read;                                                                 // y_s1_agent:m0_read -> y_s1_translator:uav_read
	wire         y_s1_agent_m0_readdatavalid;                                                        // y_s1_translator:uav_readdatavalid -> y_s1_agent:m0_readdatavalid
	wire         y_s1_agent_m0_lock;                                                                 // y_s1_agent:m0_lock -> y_s1_translator:uav_lock
	wire  [31:0] y_s1_agent_m0_writedata;                                                            // y_s1_agent:m0_writedata -> y_s1_translator:uav_writedata
	wire         y_s1_agent_m0_write;                                                                // y_s1_agent:m0_write -> y_s1_translator:uav_write
	wire   [2:0] y_s1_agent_m0_burstcount;                                                           // y_s1_agent:m0_burstcount -> y_s1_translator:uav_burstcount
	wire         y_s1_agent_rf_source_valid;                                                         // y_s1_agent:rf_source_valid -> y_s1_agent_rsp_fifo:in_valid
	wire  [97:0] y_s1_agent_rf_source_data;                                                          // y_s1_agent:rf_source_data -> y_s1_agent_rsp_fifo:in_data
	wire         y_s1_agent_rf_source_ready;                                                         // y_s1_agent_rsp_fifo:in_ready -> y_s1_agent:rf_source_ready
	wire         y_s1_agent_rf_source_startofpacket;                                                 // y_s1_agent:rf_source_startofpacket -> y_s1_agent_rsp_fifo:in_startofpacket
	wire         y_s1_agent_rf_source_endofpacket;                                                   // y_s1_agent:rf_source_endofpacket -> y_s1_agent_rsp_fifo:in_endofpacket
	wire         y_s1_agent_rsp_fifo_out_valid;                                                      // y_s1_agent_rsp_fifo:out_valid -> y_s1_agent:rf_sink_valid
	wire  [97:0] y_s1_agent_rsp_fifo_out_data;                                                       // y_s1_agent_rsp_fifo:out_data -> y_s1_agent:rf_sink_data
	wire         y_s1_agent_rsp_fifo_out_ready;                                                      // y_s1_agent:rf_sink_ready -> y_s1_agent_rsp_fifo:out_ready
	wire         y_s1_agent_rsp_fifo_out_startofpacket;                                              // y_s1_agent_rsp_fifo:out_startofpacket -> y_s1_agent:rf_sink_startofpacket
	wire         y_s1_agent_rsp_fifo_out_endofpacket;                                                // y_s1_agent_rsp_fifo:out_endofpacket -> y_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_015_src_valid;                                                              // cmd_mux_015:src_valid -> y_s1_agent:cp_valid
	wire  [96:0] cmd_mux_015_src_data;                                                               // cmd_mux_015:src_data -> y_s1_agent:cp_data
	wire         cmd_mux_015_src_ready;                                                              // y_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire  [18:0] cmd_mux_015_src_channel;                                                            // cmd_mux_015:src_channel -> y_s1_agent:cp_channel
	wire         cmd_mux_015_src_startofpacket;                                                      // cmd_mux_015:src_startofpacket -> y_s1_agent:cp_startofpacket
	wire         cmd_mux_015_src_endofpacket;                                                        // cmd_mux_015:src_endofpacket -> y_s1_agent:cp_endofpacket
	wire  [31:0] x_s1_agent_m0_readdata;                                                             // X_s1_translator:uav_readdata -> X_s1_agent:m0_readdata
	wire         x_s1_agent_m0_waitrequest;                                                          // X_s1_translator:uav_waitrequest -> X_s1_agent:m0_waitrequest
	wire         x_s1_agent_m0_debugaccess;                                                          // X_s1_agent:m0_debugaccess -> X_s1_translator:uav_debugaccess
	wire  [16:0] x_s1_agent_m0_address;                                                              // X_s1_agent:m0_address -> X_s1_translator:uav_address
	wire   [3:0] x_s1_agent_m0_byteenable;                                                           // X_s1_agent:m0_byteenable -> X_s1_translator:uav_byteenable
	wire         x_s1_agent_m0_read;                                                                 // X_s1_agent:m0_read -> X_s1_translator:uav_read
	wire         x_s1_agent_m0_readdatavalid;                                                        // X_s1_translator:uav_readdatavalid -> X_s1_agent:m0_readdatavalid
	wire         x_s1_agent_m0_lock;                                                                 // X_s1_agent:m0_lock -> X_s1_translator:uav_lock
	wire  [31:0] x_s1_agent_m0_writedata;                                                            // X_s1_agent:m0_writedata -> X_s1_translator:uav_writedata
	wire         x_s1_agent_m0_write;                                                                // X_s1_agent:m0_write -> X_s1_translator:uav_write
	wire   [2:0] x_s1_agent_m0_burstcount;                                                           // X_s1_agent:m0_burstcount -> X_s1_translator:uav_burstcount
	wire         x_s1_agent_rf_source_valid;                                                         // X_s1_agent:rf_source_valid -> X_s1_agent_rsp_fifo:in_valid
	wire  [97:0] x_s1_agent_rf_source_data;                                                          // X_s1_agent:rf_source_data -> X_s1_agent_rsp_fifo:in_data
	wire         x_s1_agent_rf_source_ready;                                                         // X_s1_agent_rsp_fifo:in_ready -> X_s1_agent:rf_source_ready
	wire         x_s1_agent_rf_source_startofpacket;                                                 // X_s1_agent:rf_source_startofpacket -> X_s1_agent_rsp_fifo:in_startofpacket
	wire         x_s1_agent_rf_source_endofpacket;                                                   // X_s1_agent:rf_source_endofpacket -> X_s1_agent_rsp_fifo:in_endofpacket
	wire         x_s1_agent_rsp_fifo_out_valid;                                                      // X_s1_agent_rsp_fifo:out_valid -> X_s1_agent:rf_sink_valid
	wire  [97:0] x_s1_agent_rsp_fifo_out_data;                                                       // X_s1_agent_rsp_fifo:out_data -> X_s1_agent:rf_sink_data
	wire         x_s1_agent_rsp_fifo_out_ready;                                                      // X_s1_agent:rf_sink_ready -> X_s1_agent_rsp_fifo:out_ready
	wire         x_s1_agent_rsp_fifo_out_startofpacket;                                              // X_s1_agent_rsp_fifo:out_startofpacket -> X_s1_agent:rf_sink_startofpacket
	wire         x_s1_agent_rsp_fifo_out_endofpacket;                                                // X_s1_agent_rsp_fifo:out_endofpacket -> X_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_016_src_valid;                                                              // cmd_mux_016:src_valid -> X_s1_agent:cp_valid
	wire  [96:0] cmd_mux_016_src_data;                                                               // cmd_mux_016:src_data -> X_s1_agent:cp_data
	wire         cmd_mux_016_src_ready;                                                              // X_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire  [18:0] cmd_mux_016_src_channel;                                                            // cmd_mux_016:src_channel -> X_s1_agent:cp_channel
	wire         cmd_mux_016_src_startofpacket;                                                      // cmd_mux_016:src_startofpacket -> X_s1_agent:cp_startofpacket
	wire         cmd_mux_016_src_endofpacket;                                                        // cmd_mux_016:src_endofpacket -> X_s1_agent:cp_endofpacket
	wire  [31:0] start_s1_agent_m0_readdata;                                                         // start_s1_translator:uav_readdata -> start_s1_agent:m0_readdata
	wire         start_s1_agent_m0_waitrequest;                                                      // start_s1_translator:uav_waitrequest -> start_s1_agent:m0_waitrequest
	wire         start_s1_agent_m0_debugaccess;                                                      // start_s1_agent:m0_debugaccess -> start_s1_translator:uav_debugaccess
	wire  [16:0] start_s1_agent_m0_address;                                                          // start_s1_agent:m0_address -> start_s1_translator:uav_address
	wire   [3:0] start_s1_agent_m0_byteenable;                                                       // start_s1_agent:m0_byteenable -> start_s1_translator:uav_byteenable
	wire         start_s1_agent_m0_read;                                                             // start_s1_agent:m0_read -> start_s1_translator:uav_read
	wire         start_s1_agent_m0_readdatavalid;                                                    // start_s1_translator:uav_readdatavalid -> start_s1_agent:m0_readdatavalid
	wire         start_s1_agent_m0_lock;                                                             // start_s1_agent:m0_lock -> start_s1_translator:uav_lock
	wire  [31:0] start_s1_agent_m0_writedata;                                                        // start_s1_agent:m0_writedata -> start_s1_translator:uav_writedata
	wire         start_s1_agent_m0_write;                                                            // start_s1_agent:m0_write -> start_s1_translator:uav_write
	wire   [2:0] start_s1_agent_m0_burstcount;                                                       // start_s1_agent:m0_burstcount -> start_s1_translator:uav_burstcount
	wire         start_s1_agent_rf_source_valid;                                                     // start_s1_agent:rf_source_valid -> start_s1_agent_rsp_fifo:in_valid
	wire  [97:0] start_s1_agent_rf_source_data;                                                      // start_s1_agent:rf_source_data -> start_s1_agent_rsp_fifo:in_data
	wire         start_s1_agent_rf_source_ready;                                                     // start_s1_agent_rsp_fifo:in_ready -> start_s1_agent:rf_source_ready
	wire         start_s1_agent_rf_source_startofpacket;                                             // start_s1_agent:rf_source_startofpacket -> start_s1_agent_rsp_fifo:in_startofpacket
	wire         start_s1_agent_rf_source_endofpacket;                                               // start_s1_agent:rf_source_endofpacket -> start_s1_agent_rsp_fifo:in_endofpacket
	wire         start_s1_agent_rsp_fifo_out_valid;                                                  // start_s1_agent_rsp_fifo:out_valid -> start_s1_agent:rf_sink_valid
	wire  [97:0] start_s1_agent_rsp_fifo_out_data;                                                   // start_s1_agent_rsp_fifo:out_data -> start_s1_agent:rf_sink_data
	wire         start_s1_agent_rsp_fifo_out_ready;                                                  // start_s1_agent:rf_sink_ready -> start_s1_agent_rsp_fifo:out_ready
	wire         start_s1_agent_rsp_fifo_out_startofpacket;                                          // start_s1_agent_rsp_fifo:out_startofpacket -> start_s1_agent:rf_sink_startofpacket
	wire         start_s1_agent_rsp_fifo_out_endofpacket;                                            // start_s1_agent_rsp_fifo:out_endofpacket -> start_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_017_src_valid;                                                              // cmd_mux_017:src_valid -> start_s1_agent:cp_valid
	wire  [96:0] cmd_mux_017_src_data;                                                               // cmd_mux_017:src_data -> start_s1_agent:cp_data
	wire         cmd_mux_017_src_ready;                                                              // start_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire  [18:0] cmd_mux_017_src_channel;                                                            // cmd_mux_017:src_channel -> start_s1_agent:cp_channel
	wire         cmd_mux_017_src_startofpacket;                                                      // cmd_mux_017:src_startofpacket -> start_s1_agent:cp_startofpacket
	wire         cmd_mux_017_src_endofpacket;                                                        // cmd_mux_017:src_endofpacket -> start_s1_agent:cp_endofpacket
	wire  [31:0] select_button_s1_agent_m0_readdata;                                                 // select_button_s1_translator:uav_readdata -> select_button_s1_agent:m0_readdata
	wire         select_button_s1_agent_m0_waitrequest;                                              // select_button_s1_translator:uav_waitrequest -> select_button_s1_agent:m0_waitrequest
	wire         select_button_s1_agent_m0_debugaccess;                                              // select_button_s1_agent:m0_debugaccess -> select_button_s1_translator:uav_debugaccess
	wire  [16:0] select_button_s1_agent_m0_address;                                                  // select_button_s1_agent:m0_address -> select_button_s1_translator:uav_address
	wire   [3:0] select_button_s1_agent_m0_byteenable;                                               // select_button_s1_agent:m0_byteenable -> select_button_s1_translator:uav_byteenable
	wire         select_button_s1_agent_m0_read;                                                     // select_button_s1_agent:m0_read -> select_button_s1_translator:uav_read
	wire         select_button_s1_agent_m0_readdatavalid;                                            // select_button_s1_translator:uav_readdatavalid -> select_button_s1_agent:m0_readdatavalid
	wire         select_button_s1_agent_m0_lock;                                                     // select_button_s1_agent:m0_lock -> select_button_s1_translator:uav_lock
	wire  [31:0] select_button_s1_agent_m0_writedata;                                                // select_button_s1_agent:m0_writedata -> select_button_s1_translator:uav_writedata
	wire         select_button_s1_agent_m0_write;                                                    // select_button_s1_agent:m0_write -> select_button_s1_translator:uav_write
	wire   [2:0] select_button_s1_agent_m0_burstcount;                                               // select_button_s1_agent:m0_burstcount -> select_button_s1_translator:uav_burstcount
	wire         select_button_s1_agent_rf_source_valid;                                             // select_button_s1_agent:rf_source_valid -> select_button_s1_agent_rsp_fifo:in_valid
	wire  [97:0] select_button_s1_agent_rf_source_data;                                              // select_button_s1_agent:rf_source_data -> select_button_s1_agent_rsp_fifo:in_data
	wire         select_button_s1_agent_rf_source_ready;                                             // select_button_s1_agent_rsp_fifo:in_ready -> select_button_s1_agent:rf_source_ready
	wire         select_button_s1_agent_rf_source_startofpacket;                                     // select_button_s1_agent:rf_source_startofpacket -> select_button_s1_agent_rsp_fifo:in_startofpacket
	wire         select_button_s1_agent_rf_source_endofpacket;                                       // select_button_s1_agent:rf_source_endofpacket -> select_button_s1_agent_rsp_fifo:in_endofpacket
	wire         select_button_s1_agent_rsp_fifo_out_valid;                                          // select_button_s1_agent_rsp_fifo:out_valid -> select_button_s1_agent:rf_sink_valid
	wire  [97:0] select_button_s1_agent_rsp_fifo_out_data;                                           // select_button_s1_agent_rsp_fifo:out_data -> select_button_s1_agent:rf_sink_data
	wire         select_button_s1_agent_rsp_fifo_out_ready;                                          // select_button_s1_agent:rf_sink_ready -> select_button_s1_agent_rsp_fifo:out_ready
	wire         select_button_s1_agent_rsp_fifo_out_startofpacket;                                  // select_button_s1_agent_rsp_fifo:out_startofpacket -> select_button_s1_agent:rf_sink_startofpacket
	wire         select_button_s1_agent_rsp_fifo_out_endofpacket;                                    // select_button_s1_agent_rsp_fifo:out_endofpacket -> select_button_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_018_src_valid;                                                              // cmd_mux_018:src_valid -> select_button_s1_agent:cp_valid
	wire  [96:0] cmd_mux_018_src_data;                                                               // cmd_mux_018:src_data -> select_button_s1_agent:cp_data
	wire         cmd_mux_018_src_ready;                                                              // select_button_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire  [18:0] cmd_mux_018_src_channel;                                                            // cmd_mux_018:src_channel -> select_button_s1_agent:cp_channel
	wire         cmd_mux_018_src_startofpacket;                                                      // cmd_mux_018:src_startofpacket -> select_button_s1_agent:cp_startofpacket
	wire         cmd_mux_018_src_endofpacket;                                                        // cmd_mux_018:src_endofpacket -> select_button_s1_agent:cp_endofpacket
	wire         nios2_gen2_0_data_master_agent_cp_valid;                                            // nios2_gen2_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [96:0] nios2_gen2_0_data_master_agent_cp_data;                                             // nios2_gen2_0_data_master_agent:cp_data -> router:sink_data
	wire         nios2_gen2_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_gen2_0_data_master_agent:cp_ready
	wire         nios2_gen2_0_data_master_agent_cp_startofpacket;                                    // nios2_gen2_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         nios2_gen2_0_data_master_agent_cp_endofpacket;                                      // nios2_gen2_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [96:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire  [18:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         nios2_gen2_0_instruction_master_agent_cp_valid;                                     // nios2_gen2_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [96:0] nios2_gen2_0_instruction_master_agent_cp_data;                                      // nios2_gen2_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire         nios2_gen2_0_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_gen2_0_instruction_master_agent:cp_ready
	wire         nios2_gen2_0_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         nios2_gen2_0_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [96:0] router_001_src_data;                                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire         router_001_src_ready;                                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire  [18:0] router_001_src_channel;                                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire         router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [96:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                       // router_002:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                               // router_002:src_valid -> rsp_demux:sink_valid
	wire  [96:0] router_002_src_data;                                                                // router_002:src_data -> rsp_demux:sink_data
	wire         router_002_src_ready;                                                               // rsp_demux:sink_ready -> router_002:src_ready
	wire  [18:0] router_002_src_channel;                                                             // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         sysid_qsys_0_control_slave_agent_rp_valid;                                          // sysid_qsys_0_control_slave_agent:rp_valid -> router_003:sink_valid
	wire  [96:0] sysid_qsys_0_control_slave_agent_rp_data;                                           // sysid_qsys_0_control_slave_agent:rp_data -> router_003:sink_data
	wire         sysid_qsys_0_control_slave_agent_rp_ready;                                          // router_003:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire         sysid_qsys_0_control_slave_agent_rp_startofpacket;                                  // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         sysid_qsys_0_control_slave_agent_rp_endofpacket;                                    // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                               // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [96:0] router_003_src_data;                                                                // router_003:src_data -> rsp_demux_001:sink_data
	wire         router_003_src_ready;                                                               // rsp_demux_001:sink_ready -> router_003:src_ready
	wire  [18:0] router_003_src_channel;                                                             // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         nios2_gen2_0_debug_mem_slave_agent_rp_valid;                                        // nios2_gen2_0_debug_mem_slave_agent:rp_valid -> router_004:sink_valid
	wire  [96:0] nios2_gen2_0_debug_mem_slave_agent_rp_data;                                         // nios2_gen2_0_debug_mem_slave_agent:rp_data -> router_004:sink_data
	wire         nios2_gen2_0_debug_mem_slave_agent_rp_ready;                                        // router_004:sink_ready -> nios2_gen2_0_debug_mem_slave_agent:rp_ready
	wire         nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket;                                // nios2_gen2_0_debug_mem_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_gen2_0_debug_mem_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                               // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [96:0] router_004_src_data;                                                                // router_004:src_data -> rsp_demux_002:sink_data
	wire         router_004_src_ready;                                                               // rsp_demux_002:sink_ready -> router_004:src_ready
	wire  [18:0] router_004_src_channel;                                                             // router_004:src_channel -> rsp_demux_002:sink_channel
	wire         router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         onchip_memory2_0_s1_agent_rp_valid;                                                 // onchip_memory2_0_s1_agent:rp_valid -> router_005:sink_valid
	wire  [96:0] onchip_memory2_0_s1_agent_rp_data;                                                  // onchip_memory2_0_s1_agent:rp_data -> router_005:sink_data
	wire         onchip_memory2_0_s1_agent_rp_ready;                                                 // router_005:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire         onchip_memory2_0_s1_agent_rp_startofpacket;                                         // onchip_memory2_0_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         onchip_memory2_0_s1_agent_rp_endofpacket;                                           // onchip_memory2_0_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                               // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [96:0] router_005_src_data;                                                                // router_005:src_data -> rsp_demux_003:sink_data
	wire         router_005_src_ready;                                                               // rsp_demux_003:sink_ready -> router_005:src_ready
	wire  [18:0] router_005_src_channel;                                                             // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         data_a_s1_agent_rp_valid;                                                           // data_A_s1_agent:rp_valid -> router_006:sink_valid
	wire  [96:0] data_a_s1_agent_rp_data;                                                            // data_A_s1_agent:rp_data -> router_006:sink_data
	wire         data_a_s1_agent_rp_ready;                                                           // router_006:sink_ready -> data_A_s1_agent:rp_ready
	wire         data_a_s1_agent_rp_startofpacket;                                                   // data_A_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         data_a_s1_agent_rp_endofpacket;                                                     // data_A_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                               // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [96:0] router_006_src_data;                                                                // router_006:src_data -> rsp_demux_004:sink_data
	wire         router_006_src_ready;                                                               // rsp_demux_004:sink_ready -> router_006:src_ready
	wire  [18:0] router_006_src_channel;                                                             // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         data_b_s1_agent_rp_valid;                                                           // data_B_s1_agent:rp_valid -> router_007:sink_valid
	wire  [96:0] data_b_s1_agent_rp_data;                                                            // data_B_s1_agent:rp_data -> router_007:sink_data
	wire         data_b_s1_agent_rp_ready;                                                           // router_007:sink_ready -> data_B_s1_agent:rp_ready
	wire         data_b_s1_agent_rp_startofpacket;                                                   // data_B_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         data_b_s1_agent_rp_endofpacket;                                                     // data_B_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                               // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [96:0] router_007_src_data;                                                                // router_007:src_data -> rsp_demux_005:sink_data
	wire         router_007_src_ready;                                                               // rsp_demux_005:sink_ready -> router_007:src_ready
	wire  [18:0] router_007_src_channel;                                                             // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         reset_pulsecounter_s1_agent_rp_valid;                                               // reset_pulseCounter_s1_agent:rp_valid -> router_008:sink_valid
	wire  [96:0] reset_pulsecounter_s1_agent_rp_data;                                                // reset_pulseCounter_s1_agent:rp_data -> router_008:sink_data
	wire         reset_pulsecounter_s1_agent_rp_ready;                                               // router_008:sink_ready -> reset_pulseCounter_s1_agent:rp_ready
	wire         reset_pulsecounter_s1_agent_rp_startofpacket;                                       // reset_pulseCounter_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         reset_pulsecounter_s1_agent_rp_endofpacket;                                         // reset_pulseCounter_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [96:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux_006:sink_data
	wire         router_008_src_ready;                                                               // rsp_demux_006:sink_ready -> router_008:src_ready
	wire  [18:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux_006:sink_channel
	wire         router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         wrreg_s1_agent_rp_valid;                                                            // wrreg_s1_agent:rp_valid -> router_009:sink_valid
	wire  [96:0] wrreg_s1_agent_rp_data;                                                             // wrreg_s1_agent:rp_data -> router_009:sink_data
	wire         wrreg_s1_agent_rp_ready;                                                            // router_009:sink_ready -> wrreg_s1_agent:rp_ready
	wire         wrreg_s1_agent_rp_startofpacket;                                                    // wrreg_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         wrreg_s1_agent_rp_endofpacket;                                                      // wrreg_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [96:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_007:sink_data
	wire         router_009_src_ready;                                                               // rsp_demux_007:sink_ready -> router_009:src_ready
	wire  [18:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_007:sink_channel
	wire         router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         wrfull_s1_agent_rp_valid;                                                           // wrfull_s1_agent:rp_valid -> router_010:sink_valid
	wire  [96:0] wrfull_s1_agent_rp_data;                                                            // wrfull_s1_agent:rp_data -> router_010:sink_data
	wire         wrfull_s1_agent_rp_ready;                                                           // router_010:sink_ready -> wrfull_s1_agent:rp_ready
	wire         wrfull_s1_agent_rp_startofpacket;                                                   // wrfull_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         wrfull_s1_agent_rp_endofpacket;                                                     // wrfull_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [96:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_008:sink_data
	wire         router_010_src_ready;                                                               // rsp_demux_008:sink_ready -> router_010:src_ready
	wire  [18:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_008:sink_channel
	wire         router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         screen_s1_agent_rp_valid;                                                           // screen_s1_agent:rp_valid -> router_011:sink_valid
	wire  [96:0] screen_s1_agent_rp_data;                                                            // screen_s1_agent:rp_data -> router_011:sink_data
	wire         screen_s1_agent_rp_ready;                                                           // router_011:sink_ready -> screen_s1_agent:rp_ready
	wire         screen_s1_agent_rp_startofpacket;                                                   // screen_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         screen_s1_agent_rp_endofpacket;                                                     // screen_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         router_011_src_valid;                                                               // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [96:0] router_011_src_data;                                                                // router_011:src_data -> rsp_demux_009:sink_data
	wire         router_011_src_ready;                                                               // rsp_demux_009:sink_ready -> router_011:src_ready
	wire  [18:0] router_011_src_channel;                                                             // router_011:src_channel -> rsp_demux_009:sink_channel
	wire         router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         direction_analogic_s1_agent_rp_valid;                                               // Direction_Analogic_s1_agent:rp_valid -> router_012:sink_valid
	wire  [96:0] direction_analogic_s1_agent_rp_data;                                                // Direction_Analogic_s1_agent:rp_data -> router_012:sink_data
	wire         direction_analogic_s1_agent_rp_ready;                                               // router_012:sink_ready -> Direction_Analogic_s1_agent:rp_ready
	wire         direction_analogic_s1_agent_rp_startofpacket;                                       // Direction_Analogic_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire         direction_analogic_s1_agent_rp_endofpacket;                                         // Direction_Analogic_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         router_012_src_valid;                                                               // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [96:0] router_012_src_data;                                                                // router_012:src_data -> rsp_demux_010:sink_data
	wire         router_012_src_ready;                                                               // rsp_demux_010:sink_ready -> router_012:src_ready
	wire  [18:0] router_012_src_channel;                                                             // router_012:src_channel -> rsp_demux_010:sink_channel
	wire         router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire         router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         a_s1_agent_rp_valid;                                                                // A_s1_agent:rp_valid -> router_013:sink_valid
	wire  [96:0] a_s1_agent_rp_data;                                                                 // A_s1_agent:rp_data -> router_013:sink_data
	wire         a_s1_agent_rp_ready;                                                                // router_013:sink_ready -> A_s1_agent:rp_ready
	wire         a_s1_agent_rp_startofpacket;                                                        // A_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire         a_s1_agent_rp_endofpacket;                                                          // A_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire         router_013_src_valid;                                                               // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [96:0] router_013_src_data;                                                                // router_013:src_data -> rsp_demux_011:sink_data
	wire         router_013_src_ready;                                                               // rsp_demux_011:sink_ready -> router_013:src_ready
	wire  [18:0] router_013_src_channel;                                                             // router_013:src_channel -> rsp_demux_011:sink_channel
	wire         router_013_src_startofpacket;                                                       // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire         router_013_src_endofpacket;                                                         // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         tr_s1_agent_rp_valid;                                                               // TR_s1_agent:rp_valid -> router_014:sink_valid
	wire  [96:0] tr_s1_agent_rp_data;                                                                // TR_s1_agent:rp_data -> router_014:sink_data
	wire         tr_s1_agent_rp_ready;                                                               // router_014:sink_ready -> TR_s1_agent:rp_ready
	wire         tr_s1_agent_rp_startofpacket;                                                       // TR_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire         tr_s1_agent_rp_endofpacket;                                                         // TR_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire         router_014_src_valid;                                                               // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [96:0] router_014_src_data;                                                                // router_014:src_data -> rsp_demux_012:sink_data
	wire         router_014_src_ready;                                                               // rsp_demux_012:sink_ready -> router_014:src_ready
	wire  [18:0] router_014_src_channel;                                                             // router_014:src_channel -> rsp_demux_012:sink_channel
	wire         router_014_src_startofpacket;                                                       // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire         router_014_src_endofpacket;                                                         // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire         tl_s1_agent_rp_valid;                                                               // TL_s1_agent:rp_valid -> router_015:sink_valid
	wire  [96:0] tl_s1_agent_rp_data;                                                                // TL_s1_agent:rp_data -> router_015:sink_data
	wire         tl_s1_agent_rp_ready;                                                               // router_015:sink_ready -> TL_s1_agent:rp_ready
	wire         tl_s1_agent_rp_startofpacket;                                                       // TL_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire         tl_s1_agent_rp_endofpacket;                                                         // TL_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire         router_015_src_valid;                                                               // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [96:0] router_015_src_data;                                                                // router_015:src_data -> rsp_demux_013:sink_data
	wire         router_015_src_ready;                                                               // rsp_demux_013:sink_ready -> router_015:src_ready
	wire  [18:0] router_015_src_channel;                                                             // router_015:src_channel -> rsp_demux_013:sink_channel
	wire         router_015_src_startofpacket;                                                       // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire         router_015_src_endofpacket;                                                         // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire         b_s1_agent_rp_valid;                                                                // B_s1_agent:rp_valid -> router_016:sink_valid
	wire  [96:0] b_s1_agent_rp_data;                                                                 // B_s1_agent:rp_data -> router_016:sink_data
	wire         b_s1_agent_rp_ready;                                                                // router_016:sink_ready -> B_s1_agent:rp_ready
	wire         b_s1_agent_rp_startofpacket;                                                        // B_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire         b_s1_agent_rp_endofpacket;                                                          // B_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire         router_016_src_valid;                                                               // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [96:0] router_016_src_data;                                                                // router_016:src_data -> rsp_demux_014:sink_data
	wire         router_016_src_ready;                                                               // rsp_demux_014:sink_ready -> router_016:src_ready
	wire  [18:0] router_016_src_channel;                                                             // router_016:src_channel -> rsp_demux_014:sink_channel
	wire         router_016_src_startofpacket;                                                       // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire         router_016_src_endofpacket;                                                         // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire         y_s1_agent_rp_valid;                                                                // y_s1_agent:rp_valid -> router_017:sink_valid
	wire  [96:0] y_s1_agent_rp_data;                                                                 // y_s1_agent:rp_data -> router_017:sink_data
	wire         y_s1_agent_rp_ready;                                                                // router_017:sink_ready -> y_s1_agent:rp_ready
	wire         y_s1_agent_rp_startofpacket;                                                        // y_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire         y_s1_agent_rp_endofpacket;                                                          // y_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire         router_017_src_valid;                                                               // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [96:0] router_017_src_data;                                                                // router_017:src_data -> rsp_demux_015:sink_data
	wire         router_017_src_ready;                                                               // rsp_demux_015:sink_ready -> router_017:src_ready
	wire  [18:0] router_017_src_channel;                                                             // router_017:src_channel -> rsp_demux_015:sink_channel
	wire         router_017_src_startofpacket;                                                       // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire         router_017_src_endofpacket;                                                         // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire         x_s1_agent_rp_valid;                                                                // X_s1_agent:rp_valid -> router_018:sink_valid
	wire  [96:0] x_s1_agent_rp_data;                                                                 // X_s1_agent:rp_data -> router_018:sink_data
	wire         x_s1_agent_rp_ready;                                                                // router_018:sink_ready -> X_s1_agent:rp_ready
	wire         x_s1_agent_rp_startofpacket;                                                        // X_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire         x_s1_agent_rp_endofpacket;                                                          // X_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire         router_018_src_valid;                                                               // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [96:0] router_018_src_data;                                                                // router_018:src_data -> rsp_demux_016:sink_data
	wire         router_018_src_ready;                                                               // rsp_demux_016:sink_ready -> router_018:src_ready
	wire  [18:0] router_018_src_channel;                                                             // router_018:src_channel -> rsp_demux_016:sink_channel
	wire         router_018_src_startofpacket;                                                       // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire         router_018_src_endofpacket;                                                         // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire         start_s1_agent_rp_valid;                                                            // start_s1_agent:rp_valid -> router_019:sink_valid
	wire  [96:0] start_s1_agent_rp_data;                                                             // start_s1_agent:rp_data -> router_019:sink_data
	wire         start_s1_agent_rp_ready;                                                            // router_019:sink_ready -> start_s1_agent:rp_ready
	wire         start_s1_agent_rp_startofpacket;                                                    // start_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire         start_s1_agent_rp_endofpacket;                                                      // start_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire         router_019_src_valid;                                                               // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [96:0] router_019_src_data;                                                                // router_019:src_data -> rsp_demux_017:sink_data
	wire         router_019_src_ready;                                                               // rsp_demux_017:sink_ready -> router_019:src_ready
	wire  [18:0] router_019_src_channel;                                                             // router_019:src_channel -> rsp_demux_017:sink_channel
	wire         router_019_src_startofpacket;                                                       // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire         router_019_src_endofpacket;                                                         // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire         select_button_s1_agent_rp_valid;                                                    // select_button_s1_agent:rp_valid -> router_020:sink_valid
	wire  [96:0] select_button_s1_agent_rp_data;                                                     // select_button_s1_agent:rp_data -> router_020:sink_data
	wire         select_button_s1_agent_rp_ready;                                                    // router_020:sink_ready -> select_button_s1_agent:rp_ready
	wire         select_button_s1_agent_rp_startofpacket;                                            // select_button_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire         select_button_s1_agent_rp_endofpacket;                                              // select_button_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire         router_020_src_valid;                                                               // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [96:0] router_020_src_data;                                                                // router_020:src_data -> rsp_demux_018:sink_data
	wire         router_020_src_ready;                                                               // rsp_demux_018:sink_ready -> router_020:src_ready
	wire  [18:0] router_020_src_channel;                                                             // router_020:src_channel -> rsp_demux_018:sink_channel
	wire         router_020_src_startofpacket;                                                       // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire         router_020_src_endofpacket;                                                         // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire         cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [96:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire  [18:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [96:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire  [18:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [96:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire  [18:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [96:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire  [18:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                               // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [96:0] cmd_demux_src4_data;                                                                // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                               // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire  [18:0] cmd_demux_src4_channel;                                                             // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                                       // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                         // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                               // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [96:0] cmd_demux_src5_data;                                                                // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                               // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire  [18:0] cmd_demux_src5_channel;                                                             // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                                       // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                         // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                               // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [96:0] cmd_demux_src6_data;                                                                // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                                               // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire  [18:0] cmd_demux_src6_channel;                                                             // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                                       // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                                         // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                               // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [96:0] cmd_demux_src7_data;                                                                // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                                               // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire  [18:0] cmd_demux_src7_channel;                                                             // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                                       // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                                         // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                               // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [96:0] cmd_demux_src8_data;                                                                // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                                               // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire  [18:0] cmd_demux_src8_channel;                                                             // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                                       // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                                         // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                               // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [96:0] cmd_demux_src9_data;                                                                // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                                               // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire  [18:0] cmd_demux_src9_channel;                                                             // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                                       // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                                         // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_src10_valid;                                                              // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [96:0] cmd_demux_src10_data;                                                               // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire         cmd_demux_src10_ready;                                                              // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire  [18:0] cmd_demux_src10_channel;                                                            // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire         cmd_demux_src10_startofpacket;                                                      // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire         cmd_demux_src10_endofpacket;                                                        // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_src11_valid;                                                              // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [96:0] cmd_demux_src11_data;                                                               // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire         cmd_demux_src11_ready;                                                              // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire  [18:0] cmd_demux_src11_channel;                                                            // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire         cmd_demux_src11_startofpacket;                                                      // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire         cmd_demux_src11_endofpacket;                                                        // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         cmd_demux_src12_valid;                                                              // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [96:0] cmd_demux_src12_data;                                                               // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire         cmd_demux_src12_ready;                                                              // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire  [18:0] cmd_demux_src12_channel;                                                            // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire         cmd_demux_src12_startofpacket;                                                      // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire         cmd_demux_src12_endofpacket;                                                        // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire         cmd_demux_src13_valid;                                                              // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [96:0] cmd_demux_src13_data;                                                               // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire         cmd_demux_src13_ready;                                                              // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire  [18:0] cmd_demux_src13_channel;                                                            // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire         cmd_demux_src13_startofpacket;                                                      // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire         cmd_demux_src13_endofpacket;                                                        // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire         cmd_demux_src14_valid;                                                              // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [96:0] cmd_demux_src14_data;                                                               // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire         cmd_demux_src14_ready;                                                              // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire  [18:0] cmd_demux_src14_channel;                                                            // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire         cmd_demux_src14_startofpacket;                                                      // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire         cmd_demux_src14_endofpacket;                                                        // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire         cmd_demux_src15_valid;                                                              // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [96:0] cmd_demux_src15_data;                                                               // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire         cmd_demux_src15_ready;                                                              // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire  [18:0] cmd_demux_src15_channel;                                                            // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire         cmd_demux_src15_startofpacket;                                                      // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire         cmd_demux_src15_endofpacket;                                                        // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire         cmd_demux_src16_valid;                                                              // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [96:0] cmd_demux_src16_data;                                                               // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire         cmd_demux_src16_ready;                                                              // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire  [18:0] cmd_demux_src16_channel;                                                            // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire         cmd_demux_src16_startofpacket;                                                      // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire         cmd_demux_src16_endofpacket;                                                        // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire         cmd_demux_src17_valid;                                                              // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [96:0] cmd_demux_src17_data;                                                               // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire         cmd_demux_src17_ready;                                                              // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire  [18:0] cmd_demux_src17_channel;                                                            // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire         cmd_demux_src17_startofpacket;                                                      // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire         cmd_demux_src17_endofpacket;                                                        // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire         cmd_demux_src18_valid;                                                              // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [96:0] cmd_demux_src18_data;                                                               // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire         cmd_demux_src18_ready;                                                              // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire  [18:0] cmd_demux_src18_channel;                                                            // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire         cmd_demux_src18_startofpacket;                                                      // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire         cmd_demux_src18_endofpacket;                                                        // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [96:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire         cmd_demux_001_src0_ready;                                                           // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire  [18:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire         cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire         cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [96:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire         cmd_demux_001_src1_ready;                                                           // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire  [18:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire         cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire         cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire         cmd_demux_001_src2_valid;                                                           // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [96:0] cmd_demux_001_src2_data;                                                            // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire         cmd_demux_001_src2_ready;                                                           // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire  [18:0] cmd_demux_001_src2_channel;                                                         // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire         cmd_demux_001_src2_startofpacket;                                                   // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire         cmd_demux_001_src2_endofpacket;                                                     // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire         cmd_demux_001_src3_valid;                                                           // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [96:0] cmd_demux_001_src3_data;                                                            // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire         cmd_demux_001_src3_ready;                                                           // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire  [18:0] cmd_demux_001_src3_channel;                                                         // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire         cmd_demux_001_src3_startofpacket;                                                   // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire         cmd_demux_001_src3_endofpacket;                                                     // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire         cmd_demux_001_src4_valid;                                                           // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [96:0] cmd_demux_001_src4_data;                                                            // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire         cmd_demux_001_src4_ready;                                                           // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire  [18:0] cmd_demux_001_src4_channel;                                                         // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire         cmd_demux_001_src4_startofpacket;                                                   // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire         cmd_demux_001_src4_endofpacket;                                                     // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire         cmd_demux_001_src5_valid;                                                           // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [96:0] cmd_demux_001_src5_data;                                                            // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire         cmd_demux_001_src5_ready;                                                           // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire  [18:0] cmd_demux_001_src5_channel;                                                         // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire         cmd_demux_001_src5_startofpacket;                                                   // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire         cmd_demux_001_src5_endofpacket;                                                     // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire         cmd_demux_001_src6_valid;                                                           // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [96:0] cmd_demux_001_src6_data;                                                            // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire         cmd_demux_001_src6_ready;                                                           // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire  [18:0] cmd_demux_001_src6_channel;                                                         // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire         cmd_demux_001_src6_startofpacket;                                                   // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire         cmd_demux_001_src6_endofpacket;                                                     // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire         cmd_demux_001_src7_valid;                                                           // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [96:0] cmd_demux_001_src7_data;                                                            // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire         cmd_demux_001_src7_ready;                                                           // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire  [18:0] cmd_demux_001_src7_channel;                                                         // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire         cmd_demux_001_src7_startofpacket;                                                   // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire         cmd_demux_001_src7_endofpacket;                                                     // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire         cmd_demux_001_src8_valid;                                                           // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [96:0] cmd_demux_001_src8_data;                                                            // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire         cmd_demux_001_src8_ready;                                                           // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire  [18:0] cmd_demux_001_src8_channel;                                                         // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire         cmd_demux_001_src8_startofpacket;                                                   // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire         cmd_demux_001_src8_endofpacket;                                                     // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire         cmd_demux_001_src9_valid;                                                           // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire  [96:0] cmd_demux_001_src9_data;                                                            // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire         cmd_demux_001_src9_ready;                                                           // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire  [18:0] cmd_demux_001_src9_channel;                                                         // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire         cmd_demux_001_src9_startofpacket;                                                   // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire         cmd_demux_001_src9_endofpacket;                                                     // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire         cmd_demux_001_src10_valid;                                                          // cmd_demux_001:src10_valid -> cmd_mux_010:sink1_valid
	wire  [96:0] cmd_demux_001_src10_data;                                                           // cmd_demux_001:src10_data -> cmd_mux_010:sink1_data
	wire         cmd_demux_001_src10_ready;                                                          // cmd_mux_010:sink1_ready -> cmd_demux_001:src10_ready
	wire  [18:0] cmd_demux_001_src10_channel;                                                        // cmd_demux_001:src10_channel -> cmd_mux_010:sink1_channel
	wire         cmd_demux_001_src10_startofpacket;                                                  // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire         cmd_demux_001_src10_endofpacket;                                                    // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire         cmd_demux_001_src11_valid;                                                          // cmd_demux_001:src11_valid -> cmd_mux_011:sink1_valid
	wire  [96:0] cmd_demux_001_src11_data;                                                           // cmd_demux_001:src11_data -> cmd_mux_011:sink1_data
	wire         cmd_demux_001_src11_ready;                                                          // cmd_mux_011:sink1_ready -> cmd_demux_001:src11_ready
	wire  [18:0] cmd_demux_001_src11_channel;                                                        // cmd_demux_001:src11_channel -> cmd_mux_011:sink1_channel
	wire         cmd_demux_001_src11_startofpacket;                                                  // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire         cmd_demux_001_src11_endofpacket;                                                    // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire         cmd_demux_001_src12_valid;                                                          // cmd_demux_001:src12_valid -> cmd_mux_012:sink1_valid
	wire  [96:0] cmd_demux_001_src12_data;                                                           // cmd_demux_001:src12_data -> cmd_mux_012:sink1_data
	wire         cmd_demux_001_src12_ready;                                                          // cmd_mux_012:sink1_ready -> cmd_demux_001:src12_ready
	wire  [18:0] cmd_demux_001_src12_channel;                                                        // cmd_demux_001:src12_channel -> cmd_mux_012:sink1_channel
	wire         cmd_demux_001_src12_startofpacket;                                                  // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire         cmd_demux_001_src12_endofpacket;                                                    // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire         cmd_demux_001_src13_valid;                                                          // cmd_demux_001:src13_valid -> cmd_mux_013:sink1_valid
	wire  [96:0] cmd_demux_001_src13_data;                                                           // cmd_demux_001:src13_data -> cmd_mux_013:sink1_data
	wire         cmd_demux_001_src13_ready;                                                          // cmd_mux_013:sink1_ready -> cmd_demux_001:src13_ready
	wire  [18:0] cmd_demux_001_src13_channel;                                                        // cmd_demux_001:src13_channel -> cmd_mux_013:sink1_channel
	wire         cmd_demux_001_src13_startofpacket;                                                  // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire         cmd_demux_001_src13_endofpacket;                                                    // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire         cmd_demux_001_src14_valid;                                                          // cmd_demux_001:src14_valid -> cmd_mux_014:sink1_valid
	wire  [96:0] cmd_demux_001_src14_data;                                                           // cmd_demux_001:src14_data -> cmd_mux_014:sink1_data
	wire         cmd_demux_001_src14_ready;                                                          // cmd_mux_014:sink1_ready -> cmd_demux_001:src14_ready
	wire  [18:0] cmd_demux_001_src14_channel;                                                        // cmd_demux_001:src14_channel -> cmd_mux_014:sink1_channel
	wire         cmd_demux_001_src14_startofpacket;                                                  // cmd_demux_001:src14_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire         cmd_demux_001_src14_endofpacket;                                                    // cmd_demux_001:src14_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire         cmd_demux_001_src15_valid;                                                          // cmd_demux_001:src15_valid -> cmd_mux_015:sink1_valid
	wire  [96:0] cmd_demux_001_src15_data;                                                           // cmd_demux_001:src15_data -> cmd_mux_015:sink1_data
	wire         cmd_demux_001_src15_ready;                                                          // cmd_mux_015:sink1_ready -> cmd_demux_001:src15_ready
	wire  [18:0] cmd_demux_001_src15_channel;                                                        // cmd_demux_001:src15_channel -> cmd_mux_015:sink1_channel
	wire         cmd_demux_001_src15_startofpacket;                                                  // cmd_demux_001:src15_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire         cmd_demux_001_src15_endofpacket;                                                    // cmd_demux_001:src15_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire         cmd_demux_001_src16_valid;                                                          // cmd_demux_001:src16_valid -> cmd_mux_016:sink1_valid
	wire  [96:0] cmd_demux_001_src16_data;                                                           // cmd_demux_001:src16_data -> cmd_mux_016:sink1_data
	wire         cmd_demux_001_src16_ready;                                                          // cmd_mux_016:sink1_ready -> cmd_demux_001:src16_ready
	wire  [18:0] cmd_demux_001_src16_channel;                                                        // cmd_demux_001:src16_channel -> cmd_mux_016:sink1_channel
	wire         cmd_demux_001_src16_startofpacket;                                                  // cmd_demux_001:src16_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire         cmd_demux_001_src16_endofpacket;                                                    // cmd_demux_001:src16_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire         cmd_demux_001_src17_valid;                                                          // cmd_demux_001:src17_valid -> cmd_mux_017:sink1_valid
	wire  [96:0] cmd_demux_001_src17_data;                                                           // cmd_demux_001:src17_data -> cmd_mux_017:sink1_data
	wire         cmd_demux_001_src17_ready;                                                          // cmd_mux_017:sink1_ready -> cmd_demux_001:src17_ready
	wire  [18:0] cmd_demux_001_src17_channel;                                                        // cmd_demux_001:src17_channel -> cmd_mux_017:sink1_channel
	wire         cmd_demux_001_src17_startofpacket;                                                  // cmd_demux_001:src17_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire         cmd_demux_001_src17_endofpacket;                                                    // cmd_demux_001:src17_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire         cmd_demux_001_src18_valid;                                                          // cmd_demux_001:src18_valid -> cmd_mux_018:sink1_valid
	wire  [96:0] cmd_demux_001_src18_data;                                                           // cmd_demux_001:src18_data -> cmd_mux_018:sink1_data
	wire         cmd_demux_001_src18_ready;                                                          // cmd_mux_018:sink1_ready -> cmd_demux_001:src18_ready
	wire  [18:0] cmd_demux_001_src18_channel;                                                        // cmd_demux_001:src18_channel -> cmd_mux_018:sink1_channel
	wire         cmd_demux_001_src18_startofpacket;                                                  // cmd_demux_001:src18_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire         cmd_demux_001_src18_endofpacket;                                                    // cmd_demux_001:src18_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire         rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [96:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire  [18:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_src1_valid;                                                               // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [96:0] rsp_demux_src1_data;                                                                // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire         rsp_demux_src1_ready;                                                               // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire  [18:0] rsp_demux_src1_channel;                                                             // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_src1_startofpacket;                                                       // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         rsp_demux_src1_endofpacket;                                                         // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [96:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire  [18:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_001_src1_valid;                                                           // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [96:0] rsp_demux_001_src1_data;                                                            // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire         rsp_demux_001_src1_ready;                                                           // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire  [18:0] rsp_demux_001_src1_channel;                                                         // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_001_src1_startofpacket;                                                   // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire         rsp_demux_001_src1_endofpacket;                                                     // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [96:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire  [18:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_002_src1_valid;                                                           // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [96:0] rsp_demux_002_src1_data;                                                            // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire         rsp_demux_002_src1_ready;                                                           // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire  [18:0] rsp_demux_002_src1_channel;                                                         // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire         rsp_demux_002_src1_startofpacket;                                                   // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire         rsp_demux_002_src1_endofpacket;                                                     // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [96:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire  [18:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_003_src1_valid;                                                           // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [96:0] rsp_demux_003_src1_data;                                                            // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire         rsp_demux_003_src1_ready;                                                           // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire  [18:0] rsp_demux_003_src1_channel;                                                         // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire         rsp_demux_003_src1_startofpacket;                                                   // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire         rsp_demux_003_src1_endofpacket;                                                     // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [96:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                           // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire  [18:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_004_src1_valid;                                                           // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [96:0] rsp_demux_004_src1_data;                                                            // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire         rsp_demux_004_src1_ready;                                                           // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire  [18:0] rsp_demux_004_src1_channel;                                                         // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire         rsp_demux_004_src1_startofpacket;                                                   // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire         rsp_demux_004_src1_endofpacket;                                                     // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [96:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                           // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire  [18:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_005_src1_valid;                                                           // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [96:0] rsp_demux_005_src1_data;                                                            // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire         rsp_demux_005_src1_ready;                                                           // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire  [18:0] rsp_demux_005_src1_channel;                                                         // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire         rsp_demux_005_src1_startofpacket;                                                   // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire         rsp_demux_005_src1_endofpacket;                                                     // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [96:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                                           // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire  [18:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_006_src1_valid;                                                           // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [96:0] rsp_demux_006_src1_data;                                                            // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire         rsp_demux_006_src1_ready;                                                           // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire  [18:0] rsp_demux_006_src1_channel;                                                         // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire         rsp_demux_006_src1_startofpacket;                                                   // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire         rsp_demux_006_src1_endofpacket;                                                     // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [96:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                                           // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire  [18:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_007_src1_valid;                                                           // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [96:0] rsp_demux_007_src1_data;                                                            // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire         rsp_demux_007_src1_ready;                                                           // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire  [18:0] rsp_demux_007_src1_channel;                                                         // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire         rsp_demux_007_src1_startofpacket;                                                   // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire         rsp_demux_007_src1_endofpacket;                                                     // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [96:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                                           // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire  [18:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_008_src1_valid;                                                           // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [96:0] rsp_demux_008_src1_data;                                                            // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire         rsp_demux_008_src1_ready;                                                           // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire  [18:0] rsp_demux_008_src1_channel;                                                         // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire         rsp_demux_008_src1_startofpacket;                                                   // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire         rsp_demux_008_src1_endofpacket;                                                     // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [96:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                                           // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire  [18:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         rsp_demux_009_src1_valid;                                                           // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire  [96:0] rsp_demux_009_src1_data;                                                            // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire         rsp_demux_009_src1_ready;                                                           // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire  [18:0] rsp_demux_009_src1_channel;                                                         // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire         rsp_demux_009_src1_startofpacket;                                                   // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire         rsp_demux_009_src1_endofpacket;                                                     // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire         rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [96:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire         rsp_demux_010_src0_ready;                                                           // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire  [18:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire         rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire         rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire         rsp_demux_010_src1_valid;                                                           // rsp_demux_010:src1_valid -> rsp_mux_001:sink10_valid
	wire  [96:0] rsp_demux_010_src1_data;                                                            // rsp_demux_010:src1_data -> rsp_mux_001:sink10_data
	wire         rsp_demux_010_src1_ready;                                                           // rsp_mux_001:sink10_ready -> rsp_demux_010:src1_ready
	wire  [18:0] rsp_demux_010_src1_channel;                                                         // rsp_demux_010:src1_channel -> rsp_mux_001:sink10_channel
	wire         rsp_demux_010_src1_startofpacket;                                                   // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire         rsp_demux_010_src1_endofpacket;                                                     // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire         rsp_demux_011_src0_valid;                                                           // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [96:0] rsp_demux_011_src0_data;                                                            // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire         rsp_demux_011_src0_ready;                                                           // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire  [18:0] rsp_demux_011_src0_channel;                                                         // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire         rsp_demux_011_src0_startofpacket;                                                   // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire         rsp_demux_011_src0_endofpacket;                                                     // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire         rsp_demux_011_src1_valid;                                                           // rsp_demux_011:src1_valid -> rsp_mux_001:sink11_valid
	wire  [96:0] rsp_demux_011_src1_data;                                                            // rsp_demux_011:src1_data -> rsp_mux_001:sink11_data
	wire         rsp_demux_011_src1_ready;                                                           // rsp_mux_001:sink11_ready -> rsp_demux_011:src1_ready
	wire  [18:0] rsp_demux_011_src1_channel;                                                         // rsp_demux_011:src1_channel -> rsp_mux_001:sink11_channel
	wire         rsp_demux_011_src1_startofpacket;                                                   // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire         rsp_demux_011_src1_endofpacket;                                                     // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire         rsp_demux_012_src0_valid;                                                           // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [96:0] rsp_demux_012_src0_data;                                                            // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire         rsp_demux_012_src0_ready;                                                           // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire  [18:0] rsp_demux_012_src0_channel;                                                         // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire         rsp_demux_012_src0_startofpacket;                                                   // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire         rsp_demux_012_src0_endofpacket;                                                     // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire         rsp_demux_012_src1_valid;                                                           // rsp_demux_012:src1_valid -> rsp_mux_001:sink12_valid
	wire  [96:0] rsp_demux_012_src1_data;                                                            // rsp_demux_012:src1_data -> rsp_mux_001:sink12_data
	wire         rsp_demux_012_src1_ready;                                                           // rsp_mux_001:sink12_ready -> rsp_demux_012:src1_ready
	wire  [18:0] rsp_demux_012_src1_channel;                                                         // rsp_demux_012:src1_channel -> rsp_mux_001:sink12_channel
	wire         rsp_demux_012_src1_startofpacket;                                                   // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire         rsp_demux_012_src1_endofpacket;                                                     // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire         rsp_demux_013_src0_valid;                                                           // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [96:0] rsp_demux_013_src0_data;                                                            // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire         rsp_demux_013_src0_ready;                                                           // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire  [18:0] rsp_demux_013_src0_channel;                                                         // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire         rsp_demux_013_src0_startofpacket;                                                   // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire         rsp_demux_013_src0_endofpacket;                                                     // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire         rsp_demux_013_src1_valid;                                                           // rsp_demux_013:src1_valid -> rsp_mux_001:sink13_valid
	wire  [96:0] rsp_demux_013_src1_data;                                                            // rsp_demux_013:src1_data -> rsp_mux_001:sink13_data
	wire         rsp_demux_013_src1_ready;                                                           // rsp_mux_001:sink13_ready -> rsp_demux_013:src1_ready
	wire  [18:0] rsp_demux_013_src1_channel;                                                         // rsp_demux_013:src1_channel -> rsp_mux_001:sink13_channel
	wire         rsp_demux_013_src1_startofpacket;                                                   // rsp_demux_013:src1_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire         rsp_demux_013_src1_endofpacket;                                                     // rsp_demux_013:src1_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire         rsp_demux_014_src0_valid;                                                           // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [96:0] rsp_demux_014_src0_data;                                                            // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire         rsp_demux_014_src0_ready;                                                           // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire  [18:0] rsp_demux_014_src0_channel;                                                         // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire         rsp_demux_014_src0_startofpacket;                                                   // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire         rsp_demux_014_src0_endofpacket;                                                     // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire         rsp_demux_014_src1_valid;                                                           // rsp_demux_014:src1_valid -> rsp_mux_001:sink14_valid
	wire  [96:0] rsp_demux_014_src1_data;                                                            // rsp_demux_014:src1_data -> rsp_mux_001:sink14_data
	wire         rsp_demux_014_src1_ready;                                                           // rsp_mux_001:sink14_ready -> rsp_demux_014:src1_ready
	wire  [18:0] rsp_demux_014_src1_channel;                                                         // rsp_demux_014:src1_channel -> rsp_mux_001:sink14_channel
	wire         rsp_demux_014_src1_startofpacket;                                                   // rsp_demux_014:src1_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire         rsp_demux_014_src1_endofpacket;                                                     // rsp_demux_014:src1_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire         rsp_demux_015_src0_valid;                                                           // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [96:0] rsp_demux_015_src0_data;                                                            // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire         rsp_demux_015_src0_ready;                                                           // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire  [18:0] rsp_demux_015_src0_channel;                                                         // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire         rsp_demux_015_src0_startofpacket;                                                   // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire         rsp_demux_015_src0_endofpacket;                                                     // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire         rsp_demux_015_src1_valid;                                                           // rsp_demux_015:src1_valid -> rsp_mux_001:sink15_valid
	wire  [96:0] rsp_demux_015_src1_data;                                                            // rsp_demux_015:src1_data -> rsp_mux_001:sink15_data
	wire         rsp_demux_015_src1_ready;                                                           // rsp_mux_001:sink15_ready -> rsp_demux_015:src1_ready
	wire  [18:0] rsp_demux_015_src1_channel;                                                         // rsp_demux_015:src1_channel -> rsp_mux_001:sink15_channel
	wire         rsp_demux_015_src1_startofpacket;                                                   // rsp_demux_015:src1_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire         rsp_demux_015_src1_endofpacket;                                                     // rsp_demux_015:src1_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire         rsp_demux_016_src0_valid;                                                           // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [96:0] rsp_demux_016_src0_data;                                                            // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire         rsp_demux_016_src0_ready;                                                           // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire  [18:0] rsp_demux_016_src0_channel;                                                         // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire         rsp_demux_016_src0_startofpacket;                                                   // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire         rsp_demux_016_src0_endofpacket;                                                     // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire         rsp_demux_016_src1_valid;                                                           // rsp_demux_016:src1_valid -> rsp_mux_001:sink16_valid
	wire  [96:0] rsp_demux_016_src1_data;                                                            // rsp_demux_016:src1_data -> rsp_mux_001:sink16_data
	wire         rsp_demux_016_src1_ready;                                                           // rsp_mux_001:sink16_ready -> rsp_demux_016:src1_ready
	wire  [18:0] rsp_demux_016_src1_channel;                                                         // rsp_demux_016:src1_channel -> rsp_mux_001:sink16_channel
	wire         rsp_demux_016_src1_startofpacket;                                                   // rsp_demux_016:src1_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire         rsp_demux_016_src1_endofpacket;                                                     // rsp_demux_016:src1_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire         rsp_demux_017_src0_valid;                                                           // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [96:0] rsp_demux_017_src0_data;                                                            // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire         rsp_demux_017_src0_ready;                                                           // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire  [18:0] rsp_demux_017_src0_channel;                                                         // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire         rsp_demux_017_src0_startofpacket;                                                   // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire         rsp_demux_017_src0_endofpacket;                                                     // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire         rsp_demux_017_src1_valid;                                                           // rsp_demux_017:src1_valid -> rsp_mux_001:sink17_valid
	wire  [96:0] rsp_demux_017_src1_data;                                                            // rsp_demux_017:src1_data -> rsp_mux_001:sink17_data
	wire         rsp_demux_017_src1_ready;                                                           // rsp_mux_001:sink17_ready -> rsp_demux_017:src1_ready
	wire  [18:0] rsp_demux_017_src1_channel;                                                         // rsp_demux_017:src1_channel -> rsp_mux_001:sink17_channel
	wire         rsp_demux_017_src1_startofpacket;                                                   // rsp_demux_017:src1_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire         rsp_demux_017_src1_endofpacket;                                                     // rsp_demux_017:src1_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire         rsp_demux_018_src0_valid;                                                           // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [96:0] rsp_demux_018_src0_data;                                                            // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire         rsp_demux_018_src0_ready;                                                           // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire  [18:0] rsp_demux_018_src0_channel;                                                         // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire         rsp_demux_018_src0_startofpacket;                                                   // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire         rsp_demux_018_src0_endofpacket;                                                     // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire         rsp_demux_018_src1_valid;                                                           // rsp_demux_018:src1_valid -> rsp_mux_001:sink18_valid
	wire  [96:0] rsp_demux_018_src1_data;                                                            // rsp_demux_018:src1_data -> rsp_mux_001:sink18_data
	wire         rsp_demux_018_src1_ready;                                                           // rsp_mux_001:sink18_ready -> rsp_demux_018:src1_ready
	wire  [18:0] rsp_demux_018_src1_channel;                                                         // rsp_demux_018:src1_channel -> rsp_mux_001:sink18_channel
	wire         rsp_demux_018_src1_startofpacket;                                                   // rsp_demux_018:src1_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire         rsp_demux_018_src1_endofpacket;                                                     // rsp_demux_018:src1_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                      // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire         sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;                              // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;                               // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_001:in_0_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                                  // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_error
	wire         nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_002:in_0_ready -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                                  // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_error
	wire         onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                     // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                      // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_003:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                                  // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error
	wire         data_a_s1_agent_rdata_fifo_src_valid;                                               // data_A_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] data_a_s1_agent_rdata_fifo_src_data;                                                // data_A_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         data_a_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_004:in_0_ready -> data_A_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> data_A_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> data_A_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                                  // data_A_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> data_A_s1_agent:rdata_fifo_sink_error
	wire         data_b_s1_agent_rdata_fifo_src_valid;                                               // data_B_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] data_b_s1_agent_rdata_fifo_src_data;                                                // data_B_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         data_b_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_005:in_0_ready -> data_B_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> data_B_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> data_B_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                                  // data_B_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> data_B_s1_agent:rdata_fifo_sink_error
	wire         reset_pulsecounter_s1_agent_rdata_fifo_src_valid;                                   // reset_pulseCounter_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] reset_pulsecounter_s1_agent_rdata_fifo_src_data;                                    // reset_pulseCounter_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire         reset_pulsecounter_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_006:in_0_ready -> reset_pulseCounter_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> reset_pulseCounter_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> reset_pulseCounter_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                                  // reset_pulseCounter_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> reset_pulseCounter_s1_agent:rdata_fifo_sink_error
	wire         wrreg_s1_agent_rdata_fifo_src_valid;                                                // wrreg_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] wrreg_s1_agent_rdata_fifo_src_data;                                                 // wrreg_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire         wrreg_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_007:in_0_ready -> wrreg_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> wrreg_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> wrreg_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                                  // wrreg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> wrreg_s1_agent:rdata_fifo_sink_error
	wire         wrfull_s1_agent_rdata_fifo_src_valid;                                               // wrfull_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] wrfull_s1_agent_rdata_fifo_src_data;                                                // wrfull_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire         wrfull_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_008:in_0_ready -> wrfull_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_008_out_0_valid;                                                  // avalon_st_adapter_008:out_0_valid -> wrfull_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                                   // avalon_st_adapter_008:out_0_data -> wrfull_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                                  // wrfull_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                                  // avalon_st_adapter_008:out_0_error -> wrfull_s1_agent:rdata_fifo_sink_error
	wire         screen_s1_agent_rdata_fifo_src_valid;                                               // screen_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire  [33:0] screen_s1_agent_rdata_fifo_src_data;                                                // screen_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire         screen_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_009:in_0_ready -> screen_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_009_out_0_valid;                                                  // avalon_st_adapter_009:out_0_valid -> screen_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_009_out_0_data;                                                   // avalon_st_adapter_009:out_0_data -> screen_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                                  // screen_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                                  // avalon_st_adapter_009:out_0_error -> screen_s1_agent:rdata_fifo_sink_error
	wire         direction_analogic_s1_agent_rdata_fifo_src_valid;                                   // Direction_Analogic_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire  [33:0] direction_analogic_s1_agent_rdata_fifo_src_data;                                    // Direction_Analogic_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire         direction_analogic_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_010:in_0_ready -> Direction_Analogic_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_010_out_0_valid;                                                  // avalon_st_adapter_010:out_0_valid -> Direction_Analogic_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_010_out_0_data;                                                   // avalon_st_adapter_010:out_0_data -> Direction_Analogic_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_010_out_0_ready;                                                  // Direction_Analogic_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire   [0:0] avalon_st_adapter_010_out_0_error;                                                  // avalon_st_adapter_010:out_0_error -> Direction_Analogic_s1_agent:rdata_fifo_sink_error
	wire         a_s1_agent_rdata_fifo_src_valid;                                                    // A_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire  [33:0] a_s1_agent_rdata_fifo_src_data;                                                     // A_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire         a_s1_agent_rdata_fifo_src_ready;                                                    // avalon_st_adapter_011:in_0_ready -> A_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_011_out_0_valid;                                                  // avalon_st_adapter_011:out_0_valid -> A_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_011_out_0_data;                                                   // avalon_st_adapter_011:out_0_data -> A_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_011_out_0_ready;                                                  // A_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire   [0:0] avalon_st_adapter_011_out_0_error;                                                  // avalon_st_adapter_011:out_0_error -> A_s1_agent:rdata_fifo_sink_error
	wire         tr_s1_agent_rdata_fifo_src_valid;                                                   // TR_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire  [33:0] tr_s1_agent_rdata_fifo_src_data;                                                    // TR_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire         tr_s1_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_012:in_0_ready -> TR_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_012_out_0_valid;                                                  // avalon_st_adapter_012:out_0_valid -> TR_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_012_out_0_data;                                                   // avalon_st_adapter_012:out_0_data -> TR_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_012_out_0_ready;                                                  // TR_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire   [0:0] avalon_st_adapter_012_out_0_error;                                                  // avalon_st_adapter_012:out_0_error -> TR_s1_agent:rdata_fifo_sink_error
	wire         tl_s1_agent_rdata_fifo_src_valid;                                                   // TL_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire  [33:0] tl_s1_agent_rdata_fifo_src_data;                                                    // TL_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire         tl_s1_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_013:in_0_ready -> TL_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_013_out_0_valid;                                                  // avalon_st_adapter_013:out_0_valid -> TL_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_013_out_0_data;                                                   // avalon_st_adapter_013:out_0_data -> TL_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_013_out_0_ready;                                                  // TL_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire   [0:0] avalon_st_adapter_013_out_0_error;                                                  // avalon_st_adapter_013:out_0_error -> TL_s1_agent:rdata_fifo_sink_error
	wire         b_s1_agent_rdata_fifo_src_valid;                                                    // B_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire  [33:0] b_s1_agent_rdata_fifo_src_data;                                                     // B_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire         b_s1_agent_rdata_fifo_src_ready;                                                    // avalon_st_adapter_014:in_0_ready -> B_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_014_out_0_valid;                                                  // avalon_st_adapter_014:out_0_valid -> B_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_014_out_0_data;                                                   // avalon_st_adapter_014:out_0_data -> B_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_014_out_0_ready;                                                  // B_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire   [0:0] avalon_st_adapter_014_out_0_error;                                                  // avalon_st_adapter_014:out_0_error -> B_s1_agent:rdata_fifo_sink_error
	wire         y_s1_agent_rdata_fifo_src_valid;                                                    // y_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire  [33:0] y_s1_agent_rdata_fifo_src_data;                                                     // y_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire         y_s1_agent_rdata_fifo_src_ready;                                                    // avalon_st_adapter_015:in_0_ready -> y_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_015_out_0_valid;                                                  // avalon_st_adapter_015:out_0_valid -> y_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_015_out_0_data;                                                   // avalon_st_adapter_015:out_0_data -> y_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_015_out_0_ready;                                                  // y_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire   [0:0] avalon_st_adapter_015_out_0_error;                                                  // avalon_st_adapter_015:out_0_error -> y_s1_agent:rdata_fifo_sink_error
	wire         x_s1_agent_rdata_fifo_src_valid;                                                    // X_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire  [33:0] x_s1_agent_rdata_fifo_src_data;                                                     // X_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire         x_s1_agent_rdata_fifo_src_ready;                                                    // avalon_st_adapter_016:in_0_ready -> X_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_016_out_0_valid;                                                  // avalon_st_adapter_016:out_0_valid -> X_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_016_out_0_data;                                                   // avalon_st_adapter_016:out_0_data -> X_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_016_out_0_ready;                                                  // X_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire   [0:0] avalon_st_adapter_016_out_0_error;                                                  // avalon_st_adapter_016:out_0_error -> X_s1_agent:rdata_fifo_sink_error
	wire         start_s1_agent_rdata_fifo_src_valid;                                                // start_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire  [33:0] start_s1_agent_rdata_fifo_src_data;                                                 // start_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire         start_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_017:in_0_ready -> start_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_017_out_0_valid;                                                  // avalon_st_adapter_017:out_0_valid -> start_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_017_out_0_data;                                                   // avalon_st_adapter_017:out_0_data -> start_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_017_out_0_ready;                                                  // start_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire   [0:0] avalon_st_adapter_017_out_0_error;                                                  // avalon_st_adapter_017:out_0_error -> start_s1_agent:rdata_fifo_sink_error
	wire         select_button_s1_agent_rdata_fifo_src_valid;                                        // select_button_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire  [33:0] select_button_s1_agent_rdata_fifo_src_data;                                         // select_button_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire         select_button_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_018:in_0_ready -> select_button_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_018_out_0_valid;                                                  // avalon_st_adapter_018:out_0_valid -> select_button_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_018_out_0_data;                                                   // avalon_st_adapter_018:out_0_data -> select_button_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_018_out_0_ready;                                                  // select_button_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire   [0:0] avalon_st_adapter_018_out_0_error;                                                  // avalon_st_adapter_018:out_0_error -> select_button_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (17),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_gen2_0_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                               //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_gen2_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (17),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                      //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_gen2_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_readdatavalid       (),                                                                                   //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_0_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_gen2_0_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_gen2_0_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_gen2_0_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_gen2_0_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_gen2_0_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_0_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_gen2_0_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_gen2_0_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_gen2_0_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_gen2_0_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_gen2_0_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_gen2_0_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),              //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                      //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                   //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                  //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                 //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                 //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                      //                         .clken
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) data_a_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (data_a_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (data_a_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (data_a_s1_agent_m0_read),                        //                         .read
		.uav_write              (data_a_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (data_a_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (data_a_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (data_a_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (data_a_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (data_a_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (data_a_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (data_a_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (data_A_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (data_A_s1_write),                                //                         .write
		.av_readdata            (data_A_s1_readdata),                             //                         .readdata
		.av_writedata           (data_A_s1_writedata),                            //                         .writedata
		.av_chipselect          (data_A_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) data_b_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (data_b_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (data_b_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (data_b_s1_agent_m0_read),                        //                         .read
		.uav_write              (data_b_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (data_b_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (data_b_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (data_b_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (data_b_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (data_b_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (data_b_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (data_b_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (data_B_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (data_B_s1_write),                                //                         .write
		.av_readdata            (data_B_s1_readdata),                             //                         .readdata
		.av_writedata           (data_B_s1_writedata),                            //                         .writedata
		.av_chipselect          (data_B_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) reset_pulsecounter_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (reset_pulsecounter_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (reset_pulsecounter_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (reset_pulsecounter_s1_agent_m0_read),            //                         .read
		.uav_write              (reset_pulsecounter_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (reset_pulsecounter_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (reset_pulsecounter_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (reset_pulsecounter_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (reset_pulsecounter_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (reset_pulsecounter_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (reset_pulsecounter_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (reset_pulsecounter_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (reset_pulseCounter_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (reset_pulseCounter_s1_write),                    //                         .write
		.av_readdata            (reset_pulseCounter_s1_readdata),                 //                         .readdata
		.av_writedata           (reset_pulseCounter_s1_writedata),                //                         .writedata
		.av_chipselect          (reset_pulseCounter_s1_chipselect),               //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) wrreg_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (wrreg_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (wrreg_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (wrreg_s1_agent_m0_read),                         //                         .read
		.uav_write              (wrreg_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (wrreg_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (wrreg_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (wrreg_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (wrreg_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (wrreg_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (wrreg_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (wrreg_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (wrreg_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (wrreg_s1_write),                                 //                         .write
		.av_readdata            (wrreg_s1_readdata),                              //                         .readdata
		.av_writedata           (wrreg_s1_writedata),                             //                         .writedata
		.av_chipselect          (wrreg_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) wrfull_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (wrfull_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (wrfull_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (wrfull_s1_agent_m0_read),                        //                         .read
		.uav_write              (wrfull_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (wrfull_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (wrfull_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (wrfull_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (wrfull_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (wrfull_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (wrfull_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (wrfull_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (wrfull_s1_address),                              //      avalon_anti_slave_0.address
		.av_readdata            (wrfull_s1_readdata),                             //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) screen_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (screen_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (screen_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (screen_s1_agent_m0_read),                        //                         .read
		.uav_write              (screen_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (screen_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (screen_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (screen_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (screen_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (screen_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (screen_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (screen_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (screen_s1_address),                              //      avalon_anti_slave_0.address
		.av_readdata            (screen_s1_readdata),                             //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) direction_analogic_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (direction_analogic_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (direction_analogic_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (direction_analogic_s1_agent_m0_read),            //                         .read
		.uav_write              (direction_analogic_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (direction_analogic_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (direction_analogic_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (direction_analogic_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (direction_analogic_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (direction_analogic_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (direction_analogic_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (direction_analogic_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (Direction_Analogic_s1_address),                  //      avalon_anti_slave_0.address
		.av_readdata            (Direction_Analogic_s1_readdata),                 //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) a_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (a_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (a_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (a_s1_agent_m0_read),                             //                         .read
		.uav_write              (a_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (a_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (a_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (a_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (a_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (a_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (a_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (a_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (A_s1_address),                                   //      avalon_anti_slave_0.address
		.av_readdata            (A_s1_readdata),                                  //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tr_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (tr_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (tr_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (tr_s1_agent_m0_read),                            //                         .read
		.uav_write              (tr_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (tr_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (tr_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (tr_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (tr_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (tr_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (tr_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (tr_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (TR_s1_address),                                  //      avalon_anti_slave_0.address
		.av_readdata            (TR_s1_readdata),                                 //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tl_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (tl_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (tl_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (tl_s1_agent_m0_read),                            //                         .read
		.uav_write              (tl_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (tl_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (tl_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (tl_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (tl_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (tl_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (tl_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (tl_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (TL_s1_address),                                  //      avalon_anti_slave_0.address
		.av_readdata            (TL_s1_readdata),                                 //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) b_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (b_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (b_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (b_s1_agent_m0_read),                             //                         .read
		.uav_write              (b_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (b_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (b_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (b_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (b_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (b_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (b_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (b_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (B_s1_address),                                   //      avalon_anti_slave_0.address
		.av_readdata            (B_s1_readdata),                                  //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) y_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (y_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (y_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (y_s1_agent_m0_read),                             //                         .read
		.uav_write              (y_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (y_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (y_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (y_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (y_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (y_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (y_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (y_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (y_s1_address),                                   //      avalon_anti_slave_0.address
		.av_readdata            (y_s1_readdata),                                  //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) x_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (x_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (x_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (x_s1_agent_m0_read),                             //                         .read
		.uav_write              (x_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (x_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (x_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (x_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (x_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (x_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (x_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (x_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (X_s1_address),                                   //      avalon_anti_slave_0.address
		.av_readdata            (X_s1_readdata),                                  //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) start_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (start_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (start_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (start_s1_agent_m0_read),                         //                         .read
		.uav_write              (start_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (start_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (start_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (start_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (start_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (start_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (start_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (start_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (start_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (start_s1_readdata),                              //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) select_button_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (select_button_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (select_button_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (select_button_s1_agent_m0_read),                 //                         .read
		.uav_write              (select_button_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (select_button_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (select_button_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (select_button_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (select_button_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (select_button_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (select_button_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (select_button_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (select_button_s1_address),                       //      avalon_anti_slave_0.address
		.av_readdata            (select_button_s1_readdata),                      //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_QOS_H                 (73),
		.PKT_QOS_L                 (73),
		.PKT_DATA_SIDEBAND_H       (71),
		.PKT_DATA_SIDEBAND_L       (71),
		.PKT_ADDR_SIDEBAND_H       (70),
		.PKT_ADDR_SIDEBAND_L       (70),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_CACHE_H               (91),
		.PKT_CACHE_L               (88),
		.PKT_THREAD_ID_H           (84),
		.PKT_THREAD_ID_L           (84),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_EXCLUSIVE       (58),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.ST_DATA_W                 (97),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                               //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                           //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_QOS_H                 (73),
		.PKT_QOS_L                 (73),
		.PKT_DATA_SIDEBAND_H       (71),
		.PKT_DATA_SIDEBAND_L       (71),
		.PKT_ADDR_SIDEBAND_H       (70),
		.PKT_ADDR_SIDEBAND_L       (70),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_CACHE_H               (91),
		.PKT_CACHE_L               (88),
		.PKT_THREAD_ID_H           (84),
		.PKT_THREAD_ID_L           (84),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_EXCLUSIVE       (58),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.ST_DATA_W                 (97),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                     //                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_0_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_gen2_0_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_gen2_0_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_gen2_0_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_gen2_0_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_gen2_0_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_gen2_0_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_gen2_0_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                       //                .channel
		.rf_sink_ready           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) data_a_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (data_a_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (data_a_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (data_a_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (data_a_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (data_a_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (data_a_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (data_a_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (data_a_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (data_a_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (data_a_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (data_a_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (data_a_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (data_a_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (data_a_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (data_a_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (data_a_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_004_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                        //                .channel
		.rf_sink_ready           (data_a_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (data_a_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (data_a_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (data_a_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (data_a_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (data_a_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (data_a_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (data_a_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (data_a_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (data_a_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),              //                .error
		.rdata_fifo_src_ready    (data_a_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (data_a_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (data_a_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) data_a_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (data_a_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (data_a_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (data_a_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (data_a_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (data_a_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (data_a_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (data_a_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (data_a_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (data_a_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (data_a_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) data_b_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (data_b_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (data_b_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (data_b_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (data_b_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (data_b_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (data_b_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (data_b_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (data_b_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (data_b_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (data_b_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (data_b_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (data_b_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (data_b_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (data_b_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (data_b_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (data_b_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_005_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                        //                .channel
		.rf_sink_ready           (data_b_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (data_b_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (data_b_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (data_b_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (data_b_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (data_b_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (data_b_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (data_b_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (data_b_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (data_b_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),              //                .error
		.rdata_fifo_src_ready    (data_b_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (data_b_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (data_b_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) data_b_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (data_b_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (data_b_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (data_b_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (data_b_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (data_b_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (data_b_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (data_b_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (data_b_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (data_b_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (data_b_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) reset_pulsecounter_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (reset_pulsecounter_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (reset_pulsecounter_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (reset_pulsecounter_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (reset_pulsecounter_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (reset_pulsecounter_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (reset_pulsecounter_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (reset_pulsecounter_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (reset_pulsecounter_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (reset_pulsecounter_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (reset_pulsecounter_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (reset_pulsecounter_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (reset_pulsecounter_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (reset_pulsecounter_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (reset_pulsecounter_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (reset_pulsecounter_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (reset_pulsecounter_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                //                .channel
		.rf_sink_ready           (reset_pulsecounter_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (reset_pulsecounter_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (reset_pulsecounter_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (reset_pulsecounter_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (reset_pulsecounter_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (reset_pulsecounter_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (reset_pulsecounter_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (reset_pulsecounter_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (reset_pulsecounter_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (reset_pulsecounter_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (reset_pulsecounter_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (reset_pulsecounter_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (reset_pulsecounter_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reset_pulsecounter_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (reset_pulsecounter_s1_agent_rf_source_data),             //        in.data
		.in_valid          (reset_pulsecounter_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (reset_pulsecounter_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (reset_pulsecounter_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (reset_pulsecounter_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (reset_pulsecounter_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (reset_pulsecounter_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (reset_pulsecounter_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (reset_pulsecounter_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (reset_pulsecounter_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) wrreg_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (wrreg_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (wrreg_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (wrreg_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (wrreg_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (wrreg_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (wrreg_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (wrreg_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (wrreg_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (wrreg_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (wrreg_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (wrreg_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (wrreg_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (wrreg_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (wrreg_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (wrreg_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (wrreg_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_007_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                        //                .channel
		.rf_sink_ready           (wrreg_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (wrreg_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (wrreg_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (wrreg_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (wrreg_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (wrreg_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (wrreg_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (wrreg_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (wrreg_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (wrreg_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),              //                .error
		.rdata_fifo_src_ready    (wrreg_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (wrreg_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (wrreg_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) wrreg_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (wrreg_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (wrreg_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (wrreg_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (wrreg_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (wrreg_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (wrreg_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (wrreg_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (wrreg_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (wrreg_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (wrreg_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) wrfull_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (wrfull_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (wrfull_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (wrfull_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (wrfull_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (wrfull_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (wrfull_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (wrfull_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (wrfull_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (wrfull_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (wrfull_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (wrfull_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (wrfull_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (wrfull_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (wrfull_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (wrfull_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (wrfull_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_008_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                        //                .channel
		.rf_sink_ready           (wrfull_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (wrfull_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (wrfull_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (wrfull_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (wrfull_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (wrfull_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (wrfull_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (wrfull_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (wrfull_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (wrfull_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),              //                .error
		.rdata_fifo_src_ready    (wrfull_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (wrfull_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (wrfull_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) wrfull_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (wrfull_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (wrfull_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (wrfull_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (wrfull_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (wrfull_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (wrfull_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (wrfull_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (wrfull_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (wrfull_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (wrfull_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) screen_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (screen_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (screen_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (screen_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (screen_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (screen_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (screen_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (screen_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (screen_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (screen_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (screen_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (screen_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (screen_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (screen_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (screen_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (screen_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (screen_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_009_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                        //                .channel
		.rf_sink_ready           (screen_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (screen_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (screen_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (screen_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (screen_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (screen_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (screen_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (screen_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (screen_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (screen_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),              //                .error
		.rdata_fifo_src_ready    (screen_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (screen_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (screen_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) screen_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (screen_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (screen_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (screen_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (screen_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (screen_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (screen_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (screen_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (screen_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (screen_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (screen_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) direction_analogic_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (direction_analogic_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (direction_analogic_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (direction_analogic_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (direction_analogic_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (direction_analogic_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (direction_analogic_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (direction_analogic_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (direction_analogic_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (direction_analogic_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (direction_analogic_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (direction_analogic_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (direction_analogic_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (direction_analogic_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (direction_analogic_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (direction_analogic_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (direction_analogic_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                //                .channel
		.rf_sink_ready           (direction_analogic_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (direction_analogic_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (direction_analogic_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (direction_analogic_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (direction_analogic_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (direction_analogic_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (direction_analogic_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (direction_analogic_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (direction_analogic_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (direction_analogic_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (direction_analogic_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (direction_analogic_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (direction_analogic_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) direction_analogic_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (direction_analogic_s1_agent_rf_source_data),             //        in.data
		.in_valid          (direction_analogic_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (direction_analogic_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (direction_analogic_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (direction_analogic_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (direction_analogic_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (direction_analogic_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (direction_analogic_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (direction_analogic_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (direction_analogic_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) a_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (a_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (a_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (a_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (a_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (a_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (a_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (a_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (a_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (a_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (a_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (a_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (a_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (a_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (a_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (a_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (a_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_011_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                        //                .channel
		.rf_sink_ready           (a_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (a_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (a_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (a_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (a_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (a_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (a_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (a_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (a_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (a_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),              //                .error
		.rdata_fifo_src_ready    (a_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (a_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (a_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) a_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (a_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (a_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (a_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (a_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (a_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (a_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (a_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (a_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (a_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (a_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tr_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (tr_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (tr_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (tr_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (tr_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (tr_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (tr_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (tr_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (tr_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (tr_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (tr_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (tr_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (tr_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (tr_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (tr_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (tr_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (tr_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_012_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                        //                .channel
		.rf_sink_ready           (tr_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (tr_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (tr_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (tr_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (tr_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (tr_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (tr_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (tr_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (tr_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (tr_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),              //                .error
		.rdata_fifo_src_ready    (tr_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tr_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (tr_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tr_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (tr_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (tr_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (tr_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (tr_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (tr_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (tr_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (tr_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (tr_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (tr_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (tr_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tl_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (tl_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (tl_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (tl_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (tl_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (tl_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (tl_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (tl_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (tl_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (tl_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (tl_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (tl_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (tl_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (tl_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (tl_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (tl_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (tl_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_013_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                        //                .channel
		.rf_sink_ready           (tl_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (tl_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (tl_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (tl_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (tl_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (tl_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (tl_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (tl_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (tl_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (tl_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),              //                .error
		.rdata_fifo_src_ready    (tl_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tl_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (tl_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tl_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (tl_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (tl_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (tl_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (tl_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (tl_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (tl_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (tl_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (tl_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (tl_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (tl_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) b_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (b_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (b_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (b_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (b_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (b_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (b_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (b_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (b_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (b_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (b_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (b_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (b_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (b_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (b_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (b_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (b_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_014_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                        //                .channel
		.rf_sink_ready           (b_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (b_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (b_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (b_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (b_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (b_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (b_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (b_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (b_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (b_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),              //                .error
		.rdata_fifo_src_ready    (b_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (b_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (b_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) b_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (b_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (b_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (b_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (b_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (b_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (b_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (b_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (b_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (b_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (b_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) y_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (y_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (y_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (y_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (y_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (y_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (y_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (y_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (y_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (y_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (y_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (y_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (y_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (y_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (y_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (y_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (y_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_015_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                        //                .channel
		.rf_sink_ready           (y_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (y_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (y_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (y_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (y_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (y_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (y_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (y_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (y_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (y_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),              //                .error
		.rdata_fifo_src_ready    (y_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (y_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (y_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) y_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (y_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (y_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (y_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (y_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (y_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (y_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (y_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (y_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (y_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (y_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) x_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (x_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (x_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (x_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (x_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (x_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (x_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (x_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (x_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (x_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (x_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (x_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (x_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (x_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (x_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (x_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (x_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_016_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                        //                .channel
		.rf_sink_ready           (x_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (x_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (x_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (x_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (x_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (x_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (x_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (x_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (x_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (x_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),              //                .error
		.rdata_fifo_src_ready    (x_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (x_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (x_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) x_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (x_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (x_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (x_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (x_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (x_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (x_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (x_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (x_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (x_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (x_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) start_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (start_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (start_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (start_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (start_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (start_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (start_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (start_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (start_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (start_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (start_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (start_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (start_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (start_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (start_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (start_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (start_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_017_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                        //                .channel
		.rf_sink_ready           (start_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (start_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (start_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (start_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (start_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (start_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (start_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (start_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (start_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (start_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),              //                .error
		.rdata_fifo_src_ready    (start_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (start_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (start_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) start_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (start_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (start_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (start_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (start_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (start_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (start_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (start_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (start_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (start_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (start_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (57),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (59),
		.PKT_ADDR_H                (52),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (53),
		.PKT_TRANS_POSTED          (54),
		.PKT_TRANS_WRITE           (55),
		.PKT_TRANS_READ            (56),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) select_button_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (select_button_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (select_button_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (select_button_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (select_button_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (select_button_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (select_button_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (select_button_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (select_button_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (select_button_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (select_button_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (select_button_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (select_button_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (select_button_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (select_button_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (select_button_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (select_button_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_018_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                           //                .channel
		.rf_sink_ready           (select_button_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (select_button_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (select_button_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (select_button_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (select_button_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (select_button_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (select_button_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (select_button_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (select_button_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (select_button_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (select_button_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (select_button_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (select_button_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) select_button_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (select_button_s1_agent_rf_source_data),             //        in.data
		.in_valid          (select_button_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (select_button_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (select_button_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (select_button_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (select_button_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (select_button_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (select_button_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (select_button_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (select_button_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	Arquitetura_mm_interconnect_0_router router (
		.sink_ready         (nios2_gen2_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router router_001 (
		.sink_ready         (nios2_gen2_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_003_src_ready),                              //       src.ready
		.src_valid          (router_003_src_valid),                              //          .valid
		.src_data           (router_003_src_data),                               //          .data
		.src_channel        (router_003_src_channel),                            //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (nios2_gen2_0_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_004_src_ready),                                //       src.ready
		.src_valid          (router_004_src_valid),                                //          .valid
		.src_data           (router_004_src_data),                                 //          .data
		.src_channel        (router_004_src_channel),                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                           //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),             //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),              //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                           //       src.ready
		.src_valid          (router_005_src_valid),                           //          .valid
		.src_data           (router_005_src_data),                            //          .data
		.src_channel        (router_005_src_channel),                         //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (data_a_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (data_a_s1_agent_rp_valid),                       //          .valid
		.sink_data          (data_a_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (data_a_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (data_a_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                           //       src.ready
		.src_valid          (router_006_src_valid),                           //          .valid
		.src_data           (router_006_src_data),                            //          .data
		.src_channel        (router_006_src_channel),                         //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (data_b_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (data_b_s1_agent_rp_valid),                       //          .valid
		.sink_data          (data_b_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (data_b_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (data_b_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                           //       src.ready
		.src_valid          (router_007_src_valid),                           //          .valid
		.src_data           (router_007_src_data),                            //          .data
		.src_channel        (router_007_src_channel),                         //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (reset_pulsecounter_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (reset_pulsecounter_s1_agent_rp_valid),           //          .valid
		.sink_data          (reset_pulsecounter_s1_agent_rp_data),            //          .data
		.sink_startofpacket (reset_pulsecounter_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (reset_pulsecounter_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                           //       src.ready
		.src_valid          (router_008_src_valid),                           //          .valid
		.src_data           (router_008_src_data),                            //          .data
		.src_channel        (router_008_src_channel),                         //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (wrreg_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (wrreg_s1_agent_rp_valid),                        //          .valid
		.sink_data          (wrreg_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (wrreg_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (wrreg_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                           //       src.ready
		.src_valid          (router_009_src_valid),                           //          .valid
		.src_data           (router_009_src_data),                            //          .data
		.src_channel        (router_009_src_channel),                         //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (wrfull_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (wrfull_s1_agent_rp_valid),                       //          .valid
		.sink_data          (wrfull_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (wrfull_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (wrfull_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                           //       src.ready
		.src_valid          (router_010_src_valid),                           //          .valid
		.src_data           (router_010_src_data),                            //          .data
		.src_channel        (router_010_src_channel),                         //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (screen_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (screen_s1_agent_rp_valid),                       //          .valid
		.sink_data          (screen_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (screen_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (screen_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                           //       src.ready
		.src_valid          (router_011_src_valid),                           //          .valid
		.src_data           (router_011_src_data),                            //          .data
		.src_channel        (router_011_src_channel),                         //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (direction_analogic_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (direction_analogic_s1_agent_rp_valid),           //          .valid
		.sink_data          (direction_analogic_s1_agent_rp_data),            //          .data
		.sink_startofpacket (direction_analogic_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (direction_analogic_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                           //       src.ready
		.src_valid          (router_012_src_valid),                           //          .valid
		.src_data           (router_012_src_data),                            //          .data
		.src_channel        (router_012_src_channel),                         //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (a_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (a_s1_agent_rp_valid),                            //          .valid
		.sink_data          (a_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (a_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (a_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                           //       src.ready
		.src_valid          (router_013_src_valid),                           //          .valid
		.src_data           (router_013_src_data),                            //          .data
		.src_channel        (router_013_src_channel),                         //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (tr_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (tr_s1_agent_rp_valid),                           //          .valid
		.sink_data          (tr_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (tr_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (tr_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                           //       src.ready
		.src_valid          (router_014_src_valid),                           //          .valid
		.src_data           (router_014_src_data),                            //          .data
		.src_channel        (router_014_src_channel),                         //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_015 (
		.sink_ready         (tl_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (tl_s1_agent_rp_valid),                           //          .valid
		.sink_data          (tl_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (tl_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (tl_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                           //       src.ready
		.src_valid          (router_015_src_valid),                           //          .valid
		.src_data           (router_015_src_data),                            //          .data
		.src_channel        (router_015_src_channel),                         //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (b_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (b_s1_agent_rp_valid),                            //          .valid
		.sink_data          (b_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (b_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (b_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                           //       src.ready
		.src_valid          (router_016_src_valid),                           //          .valid
		.src_data           (router_016_src_data),                            //          .data
		.src_channel        (router_016_src_channel),                         //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (y_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (y_s1_agent_rp_valid),                            //          .valid
		.sink_data          (y_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (y_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (y_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                           //       src.ready
		.src_valid          (router_017_src_valid),                           //          .valid
		.src_data           (router_017_src_data),                            //          .data
		.src_channel        (router_017_src_channel),                         //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_018 (
		.sink_ready         (x_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (x_s1_agent_rp_valid),                            //          .valid
		.sink_data          (x_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (x_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (x_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                           //       src.ready
		.src_valid          (router_018_src_valid),                           //          .valid
		.src_data           (router_018_src_data),                            //          .data
		.src_channel        (router_018_src_channel),                         //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_019 (
		.sink_ready         (start_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (start_s1_agent_rp_valid),                        //          .valid
		.sink_data          (start_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (start_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (start_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                           //       src.ready
		.src_valid          (router_019_src_valid),                           //          .valid
		.src_data           (router_019_src_data),                            //          .data
		.src_channel        (router_019_src_channel),                         //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_router_002 router_020 (
		.sink_ready         (select_button_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (select_button_s1_agent_rp_valid),                //          .valid
		.sink_data          (select_button_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (select_button_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (select_button_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                           //       src.ready
		.src_valid          (router_020_src_valid),                           //          .valid
		.src_data           (router_020_src_data),                            //          .data
		.src_channel        (router_020_src_channel),                         //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                               //      sink.ready
		.sink_channel        (router_src_channel),                             //          .channel
		.sink_data           (router_src_data),                                //          .data
		.sink_startofpacket  (router_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                         //          .endofpacket
		.sink_valid          (router_src_valid),                               //          .valid
		.src0_ready          (cmd_demux_src0_ready),                           //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                           //          .valid
		.src0_data           (cmd_demux_src0_data),                            //          .data
		.src0_channel        (cmd_demux_src0_channel),                         //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                           //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                           //          .valid
		.src1_data           (cmd_demux_src1_data),                            //          .data
		.src1_channel        (cmd_demux_src1_channel),                         //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                           //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                           //          .valid
		.src2_data           (cmd_demux_src2_data),                            //          .data
		.src2_channel        (cmd_demux_src2_channel),                         //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                           //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                           //          .valid
		.src3_data           (cmd_demux_src3_data),                            //          .data
		.src3_channel        (cmd_demux_src3_channel),                         //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                           //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                           //          .valid
		.src4_data           (cmd_demux_src4_data),                            //          .data
		.src4_channel        (cmd_demux_src4_channel),                         //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                           //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                           //          .valid
		.src5_data           (cmd_demux_src5_data),                            //          .data
		.src5_channel        (cmd_demux_src5_channel),                         //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                           //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                           //          .valid
		.src6_data           (cmd_demux_src6_data),                            //          .data
		.src6_channel        (cmd_demux_src6_channel),                         //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                     //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                           //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                           //          .valid
		.src7_data           (cmd_demux_src7_data),                            //          .data
		.src7_channel        (cmd_demux_src7_channel),                         //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                     //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                           //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                           //          .valid
		.src8_data           (cmd_demux_src8_data),                            //          .data
		.src8_channel        (cmd_demux_src8_channel),                         //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                     //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                           //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                           //          .valid
		.src9_data           (cmd_demux_src9_data),                            //          .data
		.src9_channel        (cmd_demux_src9_channel),                         //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                   //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                     //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                          //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                          //          .valid
		.src10_data          (cmd_demux_src10_data),                           //          .data
		.src10_channel       (cmd_demux_src10_channel),                        //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                  //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                    //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                          //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                          //          .valid
		.src11_data          (cmd_demux_src11_data),                           //          .data
		.src11_channel       (cmd_demux_src11_channel),                        //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                  //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                    //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                          //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                          //          .valid
		.src12_data          (cmd_demux_src12_data),                           //          .data
		.src12_channel       (cmd_demux_src12_channel),                        //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                  //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                    //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                          //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                          //          .valid
		.src13_data          (cmd_demux_src13_data),                           //          .data
		.src13_channel       (cmd_demux_src13_channel),                        //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                  //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                    //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                          //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                          //          .valid
		.src14_data          (cmd_demux_src14_data),                           //          .data
		.src14_channel       (cmd_demux_src14_channel),                        //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                  //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                    //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                          //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                          //          .valid
		.src15_data          (cmd_demux_src15_data),                           //          .data
		.src15_channel       (cmd_demux_src15_channel),                        //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                  //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                    //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                          //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                          //          .valid
		.src16_data          (cmd_demux_src16_data),                           //          .data
		.src16_channel       (cmd_demux_src16_channel),                        //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                  //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                    //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                          //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                          //          .valid
		.src17_data          (cmd_demux_src17_data),                           //          .data
		.src17_channel       (cmd_demux_src17_channel),                        //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                  //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                    //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                          //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                          //          .valid
		.src18_data          (cmd_demux_src18_data),                           //          .data
		.src18_channel       (cmd_demux_src18_channel),                        //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                  //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket)                     //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_001_src_ready),                           //      sink.ready
		.sink_channel        (router_001_src_channel),                         //          .channel
		.sink_data           (router_001_src_data),                            //          .data
		.sink_startofpacket  (router_001_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket    (router_001_src_endofpacket),                     //          .endofpacket
		.sink_valid          (router_001_src_valid),                           //          .valid
		.src0_ready          (cmd_demux_001_src0_ready),                       //      src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                       //          .valid
		.src0_data           (cmd_demux_001_src0_data),                        //          .data
		.src0_channel        (cmd_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                       //      src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                       //          .valid
		.src1_data           (cmd_demux_001_src1_data),                        //          .data
		.src1_channel        (cmd_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                 //          .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                       //      src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                       //          .valid
		.src2_data           (cmd_demux_001_src2_data),                        //          .data
		.src2_channel        (cmd_demux_001_src2_channel),                     //          .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                 //          .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                       //      src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                       //          .valid
		.src3_data           (cmd_demux_001_src3_data),                        //          .data
		.src3_channel        (cmd_demux_001_src3_channel),                     //          .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),               //          .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                 //          .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                       //      src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                       //          .valid
		.src4_data           (cmd_demux_001_src4_data),                        //          .data
		.src4_channel        (cmd_demux_001_src4_channel),                     //          .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),               //          .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                 //          .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                       //      src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                       //          .valid
		.src5_data           (cmd_demux_001_src5_data),                        //          .data
		.src5_channel        (cmd_demux_001_src5_channel),                     //          .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),               //          .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                 //          .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                       //      src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                       //          .valid
		.src6_data           (cmd_demux_001_src6_data),                        //          .data
		.src6_channel        (cmd_demux_001_src6_channel),                     //          .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),               //          .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                 //          .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                       //      src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                       //          .valid
		.src7_data           (cmd_demux_001_src7_data),                        //          .data
		.src7_channel        (cmd_demux_001_src7_channel),                     //          .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),               //          .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                 //          .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                       //      src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                       //          .valid
		.src8_data           (cmd_demux_001_src8_data),                        //          .data
		.src8_channel        (cmd_demux_001_src8_channel),                     //          .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),               //          .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                 //          .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                       //      src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                       //          .valid
		.src9_data           (cmd_demux_001_src9_data),                        //          .data
		.src9_channel        (cmd_demux_001_src9_channel),                     //          .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),               //          .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                 //          .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                      //     src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                      //          .valid
		.src10_data          (cmd_demux_001_src10_data),                       //          .data
		.src10_channel       (cmd_demux_001_src10_channel),                    //          .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),              //          .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                //          .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                      //     src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                      //          .valid
		.src11_data          (cmd_demux_001_src11_data),                       //          .data
		.src11_channel       (cmd_demux_001_src11_channel),                    //          .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),              //          .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                //          .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                      //     src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                      //          .valid
		.src12_data          (cmd_demux_001_src12_data),                       //          .data
		.src12_channel       (cmd_demux_001_src12_channel),                    //          .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),              //          .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                //          .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                      //     src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                      //          .valid
		.src13_data          (cmd_demux_001_src13_data),                       //          .data
		.src13_channel       (cmd_demux_001_src13_channel),                    //          .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),              //          .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),                //          .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                      //     src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                      //          .valid
		.src14_data          (cmd_demux_001_src14_data),                       //          .data
		.src14_channel       (cmd_demux_001_src14_channel),                    //          .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),              //          .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),                //          .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                      //     src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                      //          .valid
		.src15_data          (cmd_demux_001_src15_data),                       //          .data
		.src15_channel       (cmd_demux_001_src15_channel),                    //          .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),              //          .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),                //          .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                      //     src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                      //          .valid
		.src16_data          (cmd_demux_001_src16_data),                       //          .data
		.src16_channel       (cmd_demux_001_src16_channel),                    //          .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),              //          .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),                //          .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                      //     src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                      //          .valid
		.src17_data          (cmd_demux_001_src17_data),                       //          .data
		.src17_channel       (cmd_demux_001_src17_channel),                    //          .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),              //          .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),                //          .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                      //     src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                      //          .valid
		.src18_data          (cmd_demux_001_src18_data),                       //          .data
		.src18_channel       (cmd_demux_001_src18_channel),                    //          .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),              //          .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket)                 //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_src_valid),                              //          .valid
		.src_data            (cmd_mux_src_data),                               //          .data
		.src_channel         (cmd_mux_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                         //          .channel
		.sink0_data          (cmd_demux_src0_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                          //          .valid
		.src_data            (cmd_mux_001_src_data),                           //          .data
		.src_channel         (cmd_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                         //          .channel
		.sink0_data          (cmd_demux_src1_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_mux_002_src_data),                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                         //          .channel
		.sink0_data          (cmd_demux_src2_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                         //          .channel
		.sink0_data          (cmd_demux_src3_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                          //          .valid
		.src_data            (cmd_mux_004_src_data),                           //          .data
		.src_channel         (cmd_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                         //          .channel
		.sink0_data          (cmd_demux_src4_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_mux_005_src_data),                           //          .data
		.src_channel         (cmd_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                         //          .channel
		.sink0_data          (cmd_demux_src5_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                          //          .valid
		.src_data            (cmd_mux_006_src_data),                           //          .data
		.src_channel         (cmd_mux_006_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                         //          .channel
		.sink0_data          (cmd_demux_src6_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                          //          .valid
		.src_data            (cmd_mux_007_src_data),                           //          .data
		.src_channel         (cmd_mux_007_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                         //          .channel
		.sink0_data          (cmd_demux_src7_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                          //          .valid
		.src_data            (cmd_mux_008_src_data),                           //          .data
		.src_channel         (cmd_mux_008_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                         //          .channel
		.sink0_data          (cmd_demux_src8_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                          //          .valid
		.src_data            (cmd_mux_009_src_data),                           //          .data
		.src_channel         (cmd_mux_009_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                         //          .channel
		.sink0_data          (cmd_demux_src9_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                          //          .valid
		.src_data            (cmd_mux_010_src_data),                           //          .data
		.src_channel         (cmd_mux_010_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                        //          .channel
		.sink0_data          (cmd_demux_src10_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket)                 //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                          //          .valid
		.src_data            (cmd_mux_011_src_data),                           //          .data
		.src_channel         (cmd_mux_011_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                        //          .channel
		.sink0_data          (cmd_demux_src11_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src11_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket)                 //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                          //          .valid
		.src_data            (cmd_mux_012_src_data),                           //          .data
		.src_channel         (cmd_mux_012_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                        //          .channel
		.sink0_data          (cmd_demux_src12_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src12_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src12_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src12_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src12_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src12_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src12_endofpacket)                 //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                          //          .valid
		.src_data            (cmd_mux_013_src_data),                           //          .data
		.src_channel         (cmd_mux_013_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                        //          .channel
		.sink0_data          (cmd_demux_src13_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src13_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src13_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src13_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src13_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src13_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src13_endofpacket)                 //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                          //          .valid
		.src_data            (cmd_mux_014_src_data),                           //          .data
		.src_channel         (cmd_mux_014_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                        //          .channel
		.sink0_data          (cmd_demux_src14_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src14_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src14_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src14_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src14_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src14_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src14_endofpacket)                 //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                          //          .valid
		.src_data            (cmd_mux_015_src_data),                           //          .data
		.src_channel         (cmd_mux_015_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                        //          .channel
		.sink0_data          (cmd_demux_src15_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src15_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src15_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src15_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src15_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src15_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src15_endofpacket)                 //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                          //          .valid
		.src_data            (cmd_mux_016_src_data),                           //          .data
		.src_channel         (cmd_mux_016_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                        //          .channel
		.sink0_data          (cmd_demux_src16_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src16_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src16_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src16_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src16_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src16_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src16_endofpacket)                 //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                          //          .valid
		.src_data            (cmd_mux_017_src_data),                           //          .data
		.src_channel         (cmd_mux_017_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                        //          .channel
		.sink0_data          (cmd_demux_src17_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src17_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src17_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src17_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src17_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src17_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src17_endofpacket)                 //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                          //          .valid
		.src_data            (cmd_mux_018_src_data),                           //          .data
		.src_channel         (cmd_mux_018_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                        //          .channel
		.sink0_data          (cmd_demux_src18_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src18_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src18_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src18_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src18_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src18_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src18_endofpacket)                 //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                           //      sink.ready
		.sink_channel       (router_002_src_channel),                         //          .channel
		.sink_data          (router_002_src_data),                            //          .data
		.sink_startofpacket (router_002_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_002_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_src0_data),                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_src1_data),                            //          .data
		.src1_channel       (rsp_demux_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                      //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                           //      sink.ready
		.sink_channel       (router_003_src_channel),                         //          .channel
		.sink_data          (router_003_src_data),                            //          .data
		.sink_startofpacket (router_003_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_003_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_001_src0_data),                        //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_001_src1_data),                        //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                           //      sink.ready
		.sink_channel       (router_004_src_channel),                         //          .channel
		.sink_data          (router_004_src_data),                            //          .data
		.sink_startofpacket (router_004_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_004_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_002_src1_data),                        //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_003_src1_data),                        //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                           //      sink.ready
		.sink_channel       (router_006_src_channel),                         //          .channel
		.sink_data          (router_006_src_data),                            //          .data
		.sink_startofpacket (router_006_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_006_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_004_src1_data),                        //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                           //      sink.ready
		.sink_channel       (router_007_src_channel),                         //          .channel
		.sink_data          (router_007_src_data),                            //          .data
		.sink_startofpacket (router_007_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_007_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_005_src1_data),                        //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                           //      sink.ready
		.sink_channel       (router_008_src_channel),                         //          .channel
		.sink_data          (router_008_src_data),                            //          .data
		.sink_startofpacket (router_008_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_008_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_006_src0_data),                        //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_006_src1_data),                        //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                           //      sink.ready
		.sink_channel       (router_009_src_channel),                         //          .channel
		.sink_data          (router_009_src_data),                            //          .data
		.sink_startofpacket (router_009_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_009_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_007_src0_data),                        //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_007_src1_data),                        //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                           //      sink.ready
		.sink_channel       (router_010_src_channel),                         //          .channel
		.sink_data          (router_010_src_data),                            //          .data
		.sink_startofpacket (router_010_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_010_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_008_src0_data),                        //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_008_src1_data),                        //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                           //      sink.ready
		.sink_channel       (router_011_src_channel),                         //          .channel
		.sink_data          (router_011_src_data),                            //          .data
		.sink_startofpacket (router_011_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_011_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_009_src0_data),                        //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_009_src1_data),                        //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                           //      sink.ready
		.sink_channel       (router_012_src_channel),                         //          .channel
		.sink_data          (router_012_src_data),                            //          .data
		.sink_startofpacket (router_012_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_012_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_010_src0_data),                        //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_010_src1_data),                        //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                           //      sink.ready
		.sink_channel       (router_013_src_channel),                         //          .channel
		.sink_data          (router_013_src_data),                            //          .data
		.sink_startofpacket (router_013_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_013_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_011_src0_data),                        //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_011_src1_data),                        //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                           //      sink.ready
		.sink_channel       (router_014_src_channel),                         //          .channel
		.sink_data          (router_014_src_data),                            //          .data
		.sink_startofpacket (router_014_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_014_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_012_src0_data),                        //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_012_src1_data),                        //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                           //      sink.ready
		.sink_channel       (router_015_src_channel),                         //          .channel
		.sink_data          (router_015_src_data),                            //          .data
		.sink_startofpacket (router_015_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_015_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_013_src0_data),                        //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_013_src1_data),                        //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                           //      sink.ready
		.sink_channel       (router_016_src_channel),                         //          .channel
		.sink_data          (router_016_src_data),                            //          .data
		.sink_startofpacket (router_016_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_016_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_014_src0_data),                        //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_014_src1_data),                        //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                           //      sink.ready
		.sink_channel       (router_017_src_channel),                         //          .channel
		.sink_data          (router_017_src_data),                            //          .data
		.sink_startofpacket (router_017_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_017_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_015_src0_data),                        //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_015_src1_data),                        //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                           //      sink.ready
		.sink_channel       (router_018_src_channel),                         //          .channel
		.sink_data          (router_018_src_data),                            //          .data
		.sink_startofpacket (router_018_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_018_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_016_src0_data),                        //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_016_src1_data),                        //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                           //      sink.ready
		.sink_channel       (router_019_src_channel),                         //          .channel
		.sink_data          (router_019_src_data),                            //          .data
		.sink_startofpacket (router_019_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_019_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_017_src0_data),                        //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_017_src1_data),                        //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                           //      sink.ready
		.sink_channel       (router_020_src_channel),                         //          .channel
		.sink_data          (router_020_src_data),                            //          .data
		.sink_startofpacket (router_020_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_020_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_018_src0_data),                        //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_018_src1_data),                        //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                  //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                              //       src.ready
		.src_valid            (rsp_mux_src_valid),                              //          .valid
		.src_data             (rsp_mux_src_data),                               //          .data
		.src_channel          (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                           //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                           //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                         //          .channel
		.sink0_data           (rsp_demux_src0_data),                            //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                       //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                     //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                        //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                       //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                     //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                        //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                       //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                       //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                     //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                        //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                       //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                       //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                     //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                        //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                       //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                       //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                     //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                        //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                       //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                       //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                     //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                        //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                 //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                       //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                       //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                     //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                        //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                 //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                       //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                       //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                     //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                        //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                 //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                       //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                       //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                     //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                        //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                 //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                       //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                        //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                 //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                       //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                       //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                     //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                        //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                 //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                       //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                       //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                     //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                        //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),               //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                 //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                       //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                       //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                     //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                        //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),               //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                 //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                       //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                       //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                     //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                        //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),               //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                 //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                       //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                       //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                     //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                        //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),               //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                 //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                       //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                       //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                     //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                        //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),               //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                 //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                       //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                       //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                     //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                        //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),               //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                 //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                       //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                       //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                     //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                        //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),               //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                  (clk_0_clk_clk),                                  //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                          //          .valid
		.src_data             (rsp_mux_001_src_data),                           //          .data
		.src_channel          (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                           //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                           //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                         //          .channel
		.sink0_data           (rsp_demux_src1_data),                            //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                     //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                       //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                       //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),                     //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                        //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),                 //          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                       //     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                       //          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),                     //          .channel
		.sink2_data           (rsp_demux_002_src1_data),                        //          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),               //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),                 //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                       //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                       //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                     //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                        //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),               //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                 //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                       //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                       //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                     //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                        //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),               //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                 //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                       //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                       //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),                     //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                        //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),               //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),                 //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                       //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                       //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                     //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                        //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),               //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                 //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                       //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                       //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),                     //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                        //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),               //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),                 //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                       //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                       //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                     //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                        //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),               //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                 //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                       //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                       //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                     //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                        //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),               //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                 //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                       //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                       //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                     //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                        //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),               //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket),                 //          .endofpacket
		.sink11_ready         (rsp_demux_011_src1_ready),                       //    sink11.ready
		.sink11_valid         (rsp_demux_011_src1_valid),                       //          .valid
		.sink11_channel       (rsp_demux_011_src1_channel),                     //          .channel
		.sink11_data          (rsp_demux_011_src1_data),                        //          .data
		.sink11_startofpacket (rsp_demux_011_src1_startofpacket),               //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src1_endofpacket),                 //          .endofpacket
		.sink12_ready         (rsp_demux_012_src1_ready),                       //    sink12.ready
		.sink12_valid         (rsp_demux_012_src1_valid),                       //          .valid
		.sink12_channel       (rsp_demux_012_src1_channel),                     //          .channel
		.sink12_data          (rsp_demux_012_src1_data),                        //          .data
		.sink12_startofpacket (rsp_demux_012_src1_startofpacket),               //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src1_endofpacket),                 //          .endofpacket
		.sink13_ready         (rsp_demux_013_src1_ready),                       //    sink13.ready
		.sink13_valid         (rsp_demux_013_src1_valid),                       //          .valid
		.sink13_channel       (rsp_demux_013_src1_channel),                     //          .channel
		.sink13_data          (rsp_demux_013_src1_data),                        //          .data
		.sink13_startofpacket (rsp_demux_013_src1_startofpacket),               //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src1_endofpacket),                 //          .endofpacket
		.sink14_ready         (rsp_demux_014_src1_ready),                       //    sink14.ready
		.sink14_valid         (rsp_demux_014_src1_valid),                       //          .valid
		.sink14_channel       (rsp_demux_014_src1_channel),                     //          .channel
		.sink14_data          (rsp_demux_014_src1_data),                        //          .data
		.sink14_startofpacket (rsp_demux_014_src1_startofpacket),               //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src1_endofpacket),                 //          .endofpacket
		.sink15_ready         (rsp_demux_015_src1_ready),                       //    sink15.ready
		.sink15_valid         (rsp_demux_015_src1_valid),                       //          .valid
		.sink15_channel       (rsp_demux_015_src1_channel),                     //          .channel
		.sink15_data          (rsp_demux_015_src1_data),                        //          .data
		.sink15_startofpacket (rsp_demux_015_src1_startofpacket),               //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src1_endofpacket),                 //          .endofpacket
		.sink16_ready         (rsp_demux_016_src1_ready),                       //    sink16.ready
		.sink16_valid         (rsp_demux_016_src1_valid),                       //          .valid
		.sink16_channel       (rsp_demux_016_src1_channel),                     //          .channel
		.sink16_data          (rsp_demux_016_src1_data),                        //          .data
		.sink16_startofpacket (rsp_demux_016_src1_startofpacket),               //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src1_endofpacket),                 //          .endofpacket
		.sink17_ready         (rsp_demux_017_src1_ready),                       //    sink17.ready
		.sink17_valid         (rsp_demux_017_src1_valid),                       //          .valid
		.sink17_channel       (rsp_demux_017_src1_channel),                     //          .channel
		.sink17_data          (rsp_demux_017_src1_data),                        //          .data
		.sink17_startofpacket (rsp_demux_017_src1_startofpacket),               //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src1_endofpacket),                 //          .endofpacket
		.sink18_ready         (rsp_demux_018_src1_ready),                       //    sink18.ready
		.sink18_valid         (rsp_demux_018_src1_valid),                       //          .valid
		.sink18_channel       (rsp_demux_018_src1_channel),                     //          .channel
		.sink18_data          (rsp_demux_018_src1_data),                        //          .data
		.sink18_startofpacket (rsp_demux_018_src1_startofpacket),               //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src1_endofpacket)                  //          .endofpacket
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                      //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                        //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (data_a_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (data_a_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (data_a_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)               //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (data_b_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (data_b_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (data_b_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)               //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (reset_pulsecounter_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (reset_pulsecounter_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (reset_pulsecounter_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                 //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (wrreg_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (wrreg_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (wrreg_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)               //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (wrfull_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (wrfull_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (wrfull_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)               //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (screen_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (screen_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (screen_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)               //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (direction_analogic_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (direction_analogic_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (direction_analogic_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                 //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (a_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (a_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (a_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)               //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (tr_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (tr_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (tr_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)               //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (tl_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (tl_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (tl_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)               //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (b_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (b_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (b_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)               //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (y_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (y_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (y_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)               //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (x_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (x_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (x_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)               //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (start_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (start_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (start_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)               //         .error
	);

	Arquitetura_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (select_button_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (select_button_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (select_button_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)               //         .error
	);

endmodule
