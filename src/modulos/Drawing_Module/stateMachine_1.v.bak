module stateMachine_1(
	input wire clk,
	input wire reset,
	input wire enu,
	input wire is_pixel,
	output reg en_comp,
	output reg en_2
);

parameter [2:0] RESET  = 3'b000, 
				A1     = 3'b001,
				B1     = 3'b010,
				C1     = 3'b011,
				D1     = 3'b100,
				WAIT_1 = 3'b101,
				WAIT_2 = 3'b110,
				WAIT_3 = 3'b111;

reg [2:0] state, next;

always @(posedge clk or negedge reset) begin
	if (!reset) begin
		state <= RESET;
	end
	else
		state <= next;
end

always @(state or enu or is_pixel) begin
	next    = 3'bxxx;
	case(state)
		RESET: begin
			if(enu == 1'b0 && (is_pixel == 1'b0 || is_pixel == 1'b1)) begin
				next = RESET;
			end
			else begin
				next = A1;
			end
		end
		A1: begin
			if( (enu == 1'b1 || enu == 1'b0) && (is_pixel == 1'b0 || is_pixel == 1'b1)) begin
				next = B1;
			end
		end
		B1: begin
			if( (enu == 1'b1 || enu == 1'b0) && (is_pixel == 1'b0 || is_pixel == 1'b1)) begin
				next = C1;
			end
		end

		C1: begin
			if( (enu == 1'b1 || enu == 1'b0) && (is_pixel == 1'b0 || is_pixel == 1'b1)) begin
				next = D1;
			end
		end

		D1: begin
		    if(is_pixel == 1'b1 && (enu == 1'b1 || enu == 1'b0)) begin
		    	next = A1;
		    end
		    else begin
		    	next = WAIT_1; 
		    end
		end

		WAIT_1: begin
			if( (enu == 1'b1 || enu == 1'b0) && (is_pixel == 1'b0 || is_pixel == 1'b1)) begin
				next = WAIT_2;
			end
		end

		WAIT_2: begin
			if( (enu == 1'b1 || enu == 1'b0) && (is_pixel == 1'b0 || is_pixel == 1'b1)) begin
				next = WAIT_3; 
			end
		end

		WAIT_3: begin
			if( (enu == 1'b1 || enu == 1'b0) && (is_pixel == 1'b0 || is_pixel == 1'b1)) begin
				next = D1;
			end
		end
	endcase
end


always @(state) begin
	case(state)
		RESET: begin
			en_comp = 1'b0;
			en_2    = 1'b0;
		end
		A1: begin
			en_comp = 1'b1;
			en_2    = 1'b0;
		end
		B1: begin
			en_comp = 1'b1;
			en_2    = 1'b0;
		end

		C1: begin
			en_comp = 1'b0;
			en_2    = 1'b1;
		end

		D1: begin
			en_comp = 1'b0;
			en_2    = 1'b0;
		end

		WAIT_1: begin
			en_comp = 1'b0;
			en_2    = 1'b0;
		end

		WAIT_2: begin
			en_comp = 1'b0;
			en_2    = 1'b0;
		end

		WAIT_3: begin
			en_comp = 1'b0;
			en_2    = 1'b0;
		end
	endcase
end

endmodule