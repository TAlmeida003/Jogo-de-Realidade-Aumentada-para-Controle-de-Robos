module register_file #(
    parameter DATA_WIDTH = 32;
    parameter NUM_REGISTERS = 2
) (
    // Inputs
    input  clk, rst_n, we, register_addr_wr, register_addr_rd,
    input [DATA_WIDTH-1:0] wr_data, wr_data_system,
    // Outputs
    output [DATA_WIDTH-1:0] rd_data, rd_data_system

);
    
    reg [DATA_WIDTH-1:0] registers [1:0];

    initial begin
        registers[0] = 32'b0; // data
        registers[1] = 32'b00000000_00000000_00000000_00000000; // flegs
    end

    always @(posedge clk, negedge rst_n) begin
        if (!rst_n) begin
            registers[1] = 32'd0;
        end else if (we & (register_addr_wr  != 0)) begin
            registers[1] <= wr_data;
        end
    end

    always @(posedge clk, negedge rst_n) begin
        if (!rst_n) begin
            registers[0] = 32'd0;
        end else begin
            registers[0] <= wr_data_system;
        end
    end

    assign rd_data = registers[register_addr_rd];
    assign rd_data_system = registers[1];

endmodule